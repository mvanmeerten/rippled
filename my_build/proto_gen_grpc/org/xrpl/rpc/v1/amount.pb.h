// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/amount.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2famount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2famount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/account.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2famount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class Currency;
class CurrencyDefaultTypeInternal;
extern CurrencyDefaultTypeInternal _Currency_default_instance_;
class CurrencyAmount;
class CurrencyAmountDefaultTypeInternal;
extern CurrencyAmountDefaultTypeInternal _CurrencyAmount_default_instance_;
class IssuedCurrencyAmount;
class IssuedCurrencyAmountDefaultTypeInternal;
extern IssuedCurrencyAmountDefaultTypeInternal _IssuedCurrencyAmount_default_instance_;
class XRPDropsAmount;
class XRPDropsAmountDefaultTypeInternal;
extern XRPDropsAmountDefaultTypeInternal _XRPDropsAmount_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::Currency* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Currency>(Arena*);
template<> ::org::xrpl::rpc::v1::CurrencyAmount* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::CurrencyAmount>(Arena*);
template<> ::org::xrpl::rpc::v1::IssuedCurrencyAmount* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::IssuedCurrencyAmount>(Arena*);
template<> ::org::xrpl::rpc::v1::XRPDropsAmount* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::XRPDropsAmount>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class CurrencyAmount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.CurrencyAmount) */ {
 public:
  CurrencyAmount();
  virtual ~CurrencyAmount();

  CurrencyAmount(const CurrencyAmount& from);
  CurrencyAmount(CurrencyAmount&& from) noexcept
    : CurrencyAmount() {
    *this = ::std::move(from);
  }

  inline CurrencyAmount& operator=(const CurrencyAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyAmount& operator=(CurrencyAmount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrencyAmount& default_instance();

  enum AmountCase {
    kXrpAmount = 1,
    kIssuedCurrencyAmount = 2,
    AMOUNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrencyAmount* internal_default_instance() {
    return reinterpret_cast<const CurrencyAmount*>(
               &_CurrencyAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CurrencyAmount* other);
  friend void swap(CurrencyAmount& a, CurrencyAmount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrencyAmount* New() const final {
    return CreateMaybeMessage<CurrencyAmount>(nullptr);
  }

  CurrencyAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrencyAmount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrencyAmount& from);
  void MergeFrom(const CurrencyAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyAmount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.CurrencyAmount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.XRPDropsAmount xrp_amount = 1;
  bool has_xrp_amount() const;
  void clear_xrp_amount();
  static const int kXrpAmountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::XRPDropsAmount& xrp_amount() const;
  ::org::xrpl::rpc::v1::XRPDropsAmount* release_xrp_amount();
  ::org::xrpl::rpc::v1::XRPDropsAmount* mutable_xrp_amount();
  void set_allocated_xrp_amount(::org::xrpl::rpc::v1::XRPDropsAmount* xrp_amount);

  // .org.xrpl.rpc.v1.IssuedCurrencyAmount issued_currency_amount = 2;
  bool has_issued_currency_amount() const;
  void clear_issued_currency_amount();
  static const int kIssuedCurrencyAmountFieldNumber = 2;
  const ::org::xrpl::rpc::v1::IssuedCurrencyAmount& issued_currency_amount() const;
  ::org::xrpl::rpc::v1::IssuedCurrencyAmount* release_issued_currency_amount();
  ::org::xrpl::rpc::v1::IssuedCurrencyAmount* mutable_issued_currency_amount();
  void set_allocated_issued_currency_amount(::org::xrpl::rpc::v1::IssuedCurrencyAmount* issued_currency_amount);

  void clear_amount();
  AmountCase amount_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.CurrencyAmount)
 private:
  class HasBitSetters;
  void set_has_xrp_amount();
  void set_has_issued_currency_amount();

  inline bool has_amount() const;
  inline void clear_has_amount();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union AmountUnion {
    AmountUnion() {}
    ::org::xrpl::rpc::v1::XRPDropsAmount* xrp_amount_;
    ::org::xrpl::rpc::v1::IssuedCurrencyAmount* issued_currency_amount_;
  } amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
};
// -------------------------------------------------------------------

class XRPDropsAmount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.XRPDropsAmount) */ {
 public:
  XRPDropsAmount();
  virtual ~XRPDropsAmount();

  XRPDropsAmount(const XRPDropsAmount& from);
  XRPDropsAmount(XRPDropsAmount&& from) noexcept
    : XRPDropsAmount() {
    *this = ::std::move(from);
  }

  inline XRPDropsAmount& operator=(const XRPDropsAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline XRPDropsAmount& operator=(XRPDropsAmount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XRPDropsAmount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XRPDropsAmount* internal_default_instance() {
    return reinterpret_cast<const XRPDropsAmount*>(
               &_XRPDropsAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(XRPDropsAmount* other);
  friend void swap(XRPDropsAmount& a, XRPDropsAmount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XRPDropsAmount* New() const final {
    return CreateMaybeMessage<XRPDropsAmount>(nullptr);
  }

  XRPDropsAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XRPDropsAmount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XRPDropsAmount& from);
  void MergeFrom(const XRPDropsAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XRPDropsAmount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.XRPDropsAmount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 drops = 1 [jstype = JS_STRING];
  void clear_drops();
  static const int kDropsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 drops() const;
  void set_drops(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.XRPDropsAmount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 drops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
};
// -------------------------------------------------------------------

class IssuedCurrencyAmount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.IssuedCurrencyAmount) */ {
 public:
  IssuedCurrencyAmount();
  virtual ~IssuedCurrencyAmount();

  IssuedCurrencyAmount(const IssuedCurrencyAmount& from);
  IssuedCurrencyAmount(IssuedCurrencyAmount&& from) noexcept
    : IssuedCurrencyAmount() {
    *this = ::std::move(from);
  }

  inline IssuedCurrencyAmount& operator=(const IssuedCurrencyAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssuedCurrencyAmount& operator=(IssuedCurrencyAmount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IssuedCurrencyAmount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssuedCurrencyAmount* internal_default_instance() {
    return reinterpret_cast<const IssuedCurrencyAmount*>(
               &_IssuedCurrencyAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IssuedCurrencyAmount* other);
  friend void swap(IssuedCurrencyAmount& a, IssuedCurrencyAmount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IssuedCurrencyAmount* New() const final {
    return CreateMaybeMessage<IssuedCurrencyAmount>(nullptr);
  }

  IssuedCurrencyAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IssuedCurrencyAmount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IssuedCurrencyAmount& from);
  void MergeFrom(const IssuedCurrencyAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IssuedCurrencyAmount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.IssuedCurrencyAmount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // .org.xrpl.rpc.v1.Currency currency = 1;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Currency& currency() const;
  ::org::xrpl::rpc::v1::Currency* release_currency();
  ::org::xrpl::rpc::v1::Currency* mutable_currency();
  void set_allocated_currency(::org::xrpl::rpc::v1::Currency* currency);

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  bool has_issuer() const;
  void clear_issuer();
  static const int kIssuerFieldNumber = 3;
  const ::org::xrpl::rpc::v1::AccountAddress& issuer() const;
  ::org::xrpl::rpc::v1::AccountAddress* release_issuer();
  ::org::xrpl::rpc::v1::AccountAddress* mutable_issuer();
  void set_allocated_issuer(::org::xrpl::rpc::v1::AccountAddress* issuer);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.IssuedCurrencyAmount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::org::xrpl::rpc::v1::Currency* currency_;
  ::org::xrpl::rpc::v1::AccountAddress* issuer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
};
// -------------------------------------------------------------------

class Currency :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Currency) */ {
 public:
  Currency();
  virtual ~Currency();

  Currency(const Currency& from);
  Currency(Currency&& from) noexcept
    : Currency() {
    *this = ::std::move(from);
  }

  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Currency& operator=(Currency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Currency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Currency* internal_default_instance() {
    return reinterpret_cast<const Currency*>(
               &_Currency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Currency* other);
  friend void swap(Currency& a, Currency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Currency* New() const final {
    return CreateMaybeMessage<Currency>(nullptr);
  }

  Currency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Currency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Currency& from);
  void MergeFrom(const Currency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Currency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Currency";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Currency)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CurrencyAmount

// .org.xrpl.rpc.v1.XRPDropsAmount xrp_amount = 1;
inline bool CurrencyAmount::has_xrp_amount() const {
  return amount_case() == kXrpAmount;
}
inline void CurrencyAmount::set_has_xrp_amount() {
  _oneof_case_[0] = kXrpAmount;
}
inline void CurrencyAmount::clear_xrp_amount() {
  if (has_xrp_amount()) {
    delete amount_.xrp_amount_;
    clear_has_amount();
  }
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* CurrencyAmount::release_xrp_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CurrencyAmount.xrp_amount)
  if (has_xrp_amount()) {
    clear_has_amount();
      ::org::xrpl::rpc::v1::XRPDropsAmount* temp = amount_.xrp_amount_;
    amount_.xrp_amount_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::XRPDropsAmount& CurrencyAmount::xrp_amount() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CurrencyAmount.xrp_amount)
  return has_xrp_amount()
      ? *amount_.xrp_amount_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(&::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* CurrencyAmount::mutable_xrp_amount() {
  if (!has_xrp_amount()) {
    clear_amount();
    set_has_xrp_amount();
    amount_.xrp_amount_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::XRPDropsAmount >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CurrencyAmount.xrp_amount)
  return amount_.xrp_amount_;
}

// .org.xrpl.rpc.v1.IssuedCurrencyAmount issued_currency_amount = 2;
inline bool CurrencyAmount::has_issued_currency_amount() const {
  return amount_case() == kIssuedCurrencyAmount;
}
inline void CurrencyAmount::set_has_issued_currency_amount() {
  _oneof_case_[0] = kIssuedCurrencyAmount;
}
inline void CurrencyAmount::clear_issued_currency_amount() {
  if (has_issued_currency_amount()) {
    delete amount_.issued_currency_amount_;
    clear_has_amount();
  }
}
inline ::org::xrpl::rpc::v1::IssuedCurrencyAmount* CurrencyAmount::release_issued_currency_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CurrencyAmount.issued_currency_amount)
  if (has_issued_currency_amount()) {
    clear_has_amount();
      ::org::xrpl::rpc::v1::IssuedCurrencyAmount* temp = amount_.issued_currency_amount_;
    amount_.issued_currency_amount_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::IssuedCurrencyAmount& CurrencyAmount::issued_currency_amount() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CurrencyAmount.issued_currency_amount)
  return has_issued_currency_amount()
      ? *amount_.issued_currency_amount_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::IssuedCurrencyAmount*>(&::org::xrpl::rpc::v1::_IssuedCurrencyAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::IssuedCurrencyAmount* CurrencyAmount::mutable_issued_currency_amount() {
  if (!has_issued_currency_amount()) {
    clear_amount();
    set_has_issued_currency_amount();
    amount_.issued_currency_amount_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::IssuedCurrencyAmount >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CurrencyAmount.issued_currency_amount)
  return amount_.issued_currency_amount_;
}

inline bool CurrencyAmount::has_amount() const {
  return amount_case() != AMOUNT_NOT_SET;
}
inline void CurrencyAmount::clear_has_amount() {
  _oneof_case_[0] = AMOUNT_NOT_SET;
}
inline CurrencyAmount::AmountCase CurrencyAmount::amount_case() const {
  return CurrencyAmount::AmountCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// XRPDropsAmount

// uint64 drops = 1 [jstype = JS_STRING];
inline void XRPDropsAmount::clear_drops() {
  drops_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 XRPDropsAmount::drops() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.XRPDropsAmount.drops)
  return drops_;
}
inline void XRPDropsAmount::set_drops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  drops_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.XRPDropsAmount.drops)
}

// -------------------------------------------------------------------

// IssuedCurrencyAmount

// .org.xrpl.rpc.v1.Currency currency = 1;
inline bool IssuedCurrencyAmount::has_currency() const {
  return this != internal_default_instance() && currency_ != nullptr;
}
inline void IssuedCurrencyAmount::clear_currency() {
  if (GetArenaNoVirtual() == nullptr && currency_ != nullptr) {
    delete currency_;
  }
  currency_ = nullptr;
}
inline const ::org::xrpl::rpc::v1::Currency& IssuedCurrencyAmount::currency() const {
  const ::org::xrpl::rpc::v1::Currency* p = currency_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.IssuedCurrencyAmount.currency)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Currency*>(
      &::org::xrpl::rpc::v1::_Currency_default_instance_);
}
inline ::org::xrpl::rpc::v1::Currency* IssuedCurrencyAmount::release_currency() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.IssuedCurrencyAmount.currency)
  
  ::org::xrpl::rpc::v1::Currency* temp = currency_;
  currency_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Currency* IssuedCurrencyAmount::mutable_currency() {
  
  if (currency_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Currency>(GetArenaNoVirtual());
    currency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.IssuedCurrencyAmount.currency)
  return currency_;
}
inline void IssuedCurrencyAmount::set_allocated_currency(::org::xrpl::rpc::v1::Currency* currency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete currency_;
  }
  if (currency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      currency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency, submessage_arena);
    }
    
  } else {
    
  }
  currency_ = currency;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.IssuedCurrencyAmount.currency)
}

// string value = 2;
inline void IssuedCurrencyAmount::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IssuedCurrencyAmount::value() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
  return value_.GetNoArena();
}
inline void IssuedCurrencyAmount::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
}
inline void IssuedCurrencyAmount::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
}
inline void IssuedCurrencyAmount::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
}
inline void IssuedCurrencyAmount::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
}
inline std::string* IssuedCurrencyAmount::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IssuedCurrencyAmount::release_value() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IssuedCurrencyAmount::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.IssuedCurrencyAmount.value)
}

// .org.xrpl.rpc.v1.AccountAddress issuer = 3;
inline bool IssuedCurrencyAmount::has_issuer() const {
  return this != internal_default_instance() && issuer_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::AccountAddress& IssuedCurrencyAmount::issuer() const {
  const ::org::xrpl::rpc::v1::AccountAddress* p = issuer_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.IssuedCurrencyAmount.issuer)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::AccountAddress*>(
      &::org::xrpl::rpc::v1::_AccountAddress_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountAddress* IssuedCurrencyAmount::release_issuer() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.IssuedCurrencyAmount.issuer)
  
  ::org::xrpl::rpc::v1::AccountAddress* temp = issuer_;
  issuer_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::AccountAddress* IssuedCurrencyAmount::mutable_issuer() {
  
  if (issuer_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::AccountAddress>(GetArenaNoVirtual());
    issuer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.IssuedCurrencyAmount.issuer)
  return issuer_;
}
inline void IssuedCurrencyAmount::set_allocated_issuer(::org::xrpl::rpc::v1::AccountAddress* issuer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(issuer_);
  }
  if (issuer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      issuer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, issuer, submessage_arena);
    }
    
  } else {
    
  }
  issuer_ = issuer;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.IssuedCurrencyAmount.issuer)
}

// -------------------------------------------------------------------

// Currency

// string name = 1;
inline void Currency::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Currency::name() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Currency.name)
  return name_.GetNoArena();
}
inline void Currency::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.Currency.name)
}
inline void Currency::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.Currency.name)
}
inline void Currency::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.Currency.name)
}
inline void Currency::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.Currency.name)
}
inline std::string* Currency::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Currency.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Currency::release_name() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Currency.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Currency::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Currency.name)
}

// bytes code = 2;
inline void Currency::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Currency::code() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Currency.code)
  return code_.GetNoArena();
}
inline void Currency::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.Currency.code)
}
inline void Currency::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.Currency.code)
}
inline void Currency::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.Currency.code)
}
inline void Currency::set_code(const void* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.Currency.code)
}
inline std::string* Currency::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Currency.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Currency::release_code() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Currency.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Currency::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Currency.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2famount_2eproto
