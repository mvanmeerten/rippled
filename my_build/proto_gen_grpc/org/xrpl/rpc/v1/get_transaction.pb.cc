// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_transaction.proto

#include "org/xrpl/rpc/v1/get_transaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionRequest> _instance;
} _GetTransactionRequest_default_instance_;
class GetTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionResponse> _instance;
  const ::org::xrpl::rpc::v1::Transaction* transaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_binary_;
  const ::org::xrpl::rpc::v1::Meta* meta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_binary_;
} _GetTransactionResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_GetTransactionRequest_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetTransactionRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTransactionRequest_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetTransactionRequest_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto}, {
      &scc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static void InitDefaultsscc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetTransactionResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto}, {
      &scc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
      &scc_info_Date_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionRequest, hash_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionRequest, binary_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionRequest, ledger_range_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionRequest, client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::org::xrpl::rpc::v1::GetTransactionResponseDefaultTypeInternal, transaction_),
  offsetof(::org::xrpl::rpc::v1::GetTransactionResponseDefaultTypeInternal, transaction_binary_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, ledger_index_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, hash_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, validated_),
  offsetof(::org::xrpl::rpc::v1::GetTransactionResponseDefaultTypeInternal, meta_),
  offsetof(::org::xrpl::rpc::v1::GetTransactionResponseDefaultTypeInternal, meta_binary_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, date_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, serialized_transaction_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetTransactionResponse, serialized_meta_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::GetTransactionRequest)},
  { 9, -1, sizeof(::org::xrpl::rpc::v1::GetTransactionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetTransactionResponse_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto[] =
  "\n%org/xrpl/rpc/v1/get_transaction.proto\022"
  "\017org.xrpl.rpc.v1\032\032org/xrpl/rpc/v1/meta.p"
  "roto\032\034org/xrpl/rpc/v1/ledger.proto\032!org/"
  "xrpl/rpc/v1/transaction.proto\032\034org/xrpl/"
  "rpc/v1/common.proto\"|\n\025GetTransactionReq"
  "uest\022\014\n\004hash\030\001 \001(\014\022\016\n\006binary\030\002 \001(\010\0222\n\014le"
  "dger_range\030\003 \001(\0132\034.org.xrpl.rpc.v1.Ledge"
  "rRange\022\021\n\tclient_ip\030\004 \001(\t\"\262\002\n\026GetTransac"
  "tionResponse\0223\n\013transaction\030\001 \001(\0132\034.org."
  "xrpl.rpc.v1.TransactionH\000\022\034\n\022transaction"
  "_binary\030\002 \001(\014H\000\022\024\n\014ledger_index\030\003 \001(\r\022\014\n"
  "\004hash\030\004 \001(\014\022\021\n\tvalidated\030\005 \001(\010\022%\n\004meta\030\006"
  " \001(\0132\025.org.xrpl.rpc.v1.MetaH\001\022\025\n\013meta_bi"
  "nary\030\007 \001(\014H\001\022#\n\004date\030\010 \001(\0132\025.org.xrpl.rp"
  "c.v1.DateB\030\n\026serialized_transactionB\021\n\017s"
  "erialized_metaB\023\n\017org.xrpl.rpc.v1P\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_deps[4] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_sccs[2] = {
  &scc_info_GetTransactionRequest_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.base,
  &scc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto, "org/xrpl/rpc/v1/get_transaction.proto", 643,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto, 2, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void GetTransactionRequest::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetTransactionRequest_default_instance_._instance.get_mutable()->ledger_range_ = const_cast< ::org::xrpl::rpc::v1::LedgerRange*>(
      ::org::xrpl::rpc::v1::LedgerRange::internal_default_instance());
}
class GetTransactionRequest::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LedgerRange& ledger_range(const GetTransactionRequest* msg);
};

const ::org::xrpl::rpc::v1::LedgerRange&
GetTransactionRequest::HasBitSetters::ledger_range(const GetTransactionRequest* msg) {
  return *msg->ledger_range_;
}
void GetTransactionRequest::clear_ledger_range() {
  if (GetArenaNoVirtual() == nullptr && ledger_range_ != nullptr) {
    delete ledger_range_;
  }
  ledger_range_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTransactionRequest::kHashFieldNumber;
const int GetTransactionRequest::kBinaryFieldNumber;
const int GetTransactionRequest::kLedgerRangeFieldNumber;
const int GetTransactionRequest::kClientIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTransactionRequest::GetTransactionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetTransactionRequest)
}
GetTransactionRequest::GetTransactionRequest(const GetTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_ledger_range()) {
    ledger_range_ = new ::org::xrpl::rpc::v1::LedgerRange(*from.ledger_range_);
  } else {
    ledger_range_ = nullptr;
  }
  binary_ = from.binary_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetTransactionRequest)
}

void GetTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionRequest_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ledger_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&binary_) -
      reinterpret_cast<char*>(&ledger_range_)) + sizeof(binary_));
}

GetTransactionRequest::~GetTransactionRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetTransactionRequest)
  SharedDtor();
}

void GetTransactionRequest::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ledger_range_;
}

void GetTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionRequest& GetTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionRequest_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ledger_range_ != nullptr) {
    delete ledger_range_;
  }
  ledger_range_ = nullptr;
  binary_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool binary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ledger_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_ip(), ptr, ctx, "org.xrpl.rpc.v1.GetTransactionRequest.client_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTransactionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetTransactionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool binary = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), static_cast<int>(this->client_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetTransactionRequest.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetTransactionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTransactionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // bool binary = 2;
  if (this->binary() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->binary(), output);
  }

  // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
  if (this->has_ledger_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ledger_range(this), output);
  }

  // string client_ip = 4;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetTransactionRequest.client_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetTransactionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // bool binary = 2;
  if (this->binary() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->binary(), target);
  }

  // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
  if (this->has_ledger_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ledger_range(this), target);
  }

  // string client_ip = 4;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetTransactionRequest.client_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetTransactionRequest)
  return target;
}

size_t GetTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetTransactionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // string client_ip = 4;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
  if (this->has_ledger_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_range_);
  }

  // bool binary = 2;
  if (this->binary() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetTransactionRequest)
    MergeFrom(*source);
  }
}

void GetTransactionRequest::MergeFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_ledger_range()) {
    mutable_ledger_range()->::org::xrpl::rpc::v1::LedgerRange::MergeFrom(from.ledger_range());
  }
  if (from.binary() != 0) {
    set_binary(from.binary());
  }
}

void GetTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionRequest::CopyFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionRequest::IsInitialized() const {
  return true;
}

void GetTransactionRequest::Swap(GetTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTransactionRequest::InternalSwap(GetTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ledger_range_, other->ledger_range_);
  swap(binary_, other->binary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetTransactionResponse_default_instance_.transaction_ = const_cast< ::org::xrpl::rpc::v1::Transaction*>(
      ::org::xrpl::rpc::v1::Transaction::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetTransactionResponse_default_instance_.transaction_binary_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::org::xrpl::rpc::v1::_GetTransactionResponse_default_instance_.meta_ = const_cast< ::org::xrpl::rpc::v1::Meta*>(
      ::org::xrpl::rpc::v1::Meta::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetTransactionResponse_default_instance_.meta_binary_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::org::xrpl::rpc::v1::_GetTransactionResponse_default_instance_._instance.get_mutable()->date_ = const_cast< ::org::xrpl::rpc::v1::Date*>(
      ::org::xrpl::rpc::v1::Date::internal_default_instance());
}
class GetTransactionResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Transaction& transaction(const GetTransactionResponse* msg);
  static const ::org::xrpl::rpc::v1::Meta& meta(const GetTransactionResponse* msg);
  static const ::org::xrpl::rpc::v1::Date& date(const GetTransactionResponse* msg);
};

const ::org::xrpl::rpc::v1::Transaction&
GetTransactionResponse::HasBitSetters::transaction(const GetTransactionResponse* msg) {
  return *msg->serialized_transaction_.transaction_;
}
const ::org::xrpl::rpc::v1::Meta&
GetTransactionResponse::HasBitSetters::meta(const GetTransactionResponse* msg) {
  return *msg->serialized_meta_.meta_;
}
const ::org::xrpl::rpc::v1::Date&
GetTransactionResponse::HasBitSetters::date(const GetTransactionResponse* msg) {
  return *msg->date_;
}
void GetTransactionResponse::set_allocated_transaction(::org::xrpl::rpc::v1::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_serialized_transaction();
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    set_has_transaction();
    serialized_transaction_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionResponse.transaction)
}
void GetTransactionResponse::clear_transaction() {
  if (has_transaction()) {
    delete serialized_transaction_.transaction_;
    clear_has_serialized_transaction();
  }
}
void GetTransactionResponse::set_allocated_meta(::org::xrpl::rpc::v1::Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_serialized_meta();
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    set_has_meta();
    serialized_meta_.meta_ = meta;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionResponse.meta)
}
void GetTransactionResponse::clear_meta() {
  if (has_meta()) {
    delete serialized_meta_.meta_;
    clear_has_serialized_meta();
  }
}
void GetTransactionResponse::clear_date() {
  if (GetArenaNoVirtual() == nullptr && date_ != nullptr) {
    delete date_;
  }
  date_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTransactionResponse::kTransactionFieldNumber;
const int GetTransactionResponse::kTransactionBinaryFieldNumber;
const int GetTransactionResponse::kLedgerIndexFieldNumber;
const int GetTransactionResponse::kHashFieldNumber;
const int GetTransactionResponse::kValidatedFieldNumber;
const int GetTransactionResponse::kMetaFieldNumber;
const int GetTransactionResponse::kMetaBinaryFieldNumber;
const int GetTransactionResponse::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTransactionResponse::GetTransactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetTransactionResponse)
}
GetTransactionResponse::GetTransactionResponse(const GetTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_date()) {
    date_ = new ::org::xrpl::rpc::v1::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  ::memcpy(&ledger_index_, &from.ledger_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&validated_) -
    reinterpret_cast<char*>(&ledger_index_)) + sizeof(validated_));
  clear_has_serialized_transaction();
  switch (from.serialized_transaction_case()) {
    case kTransaction: {
      mutable_transaction()->::org::xrpl::rpc::v1::Transaction::MergeFrom(from.transaction());
      break;
    }
    case kTransactionBinary: {
      set_transaction_binary(from.transaction_binary());
      break;
    }
    case SERIALIZED_TRANSACTION_NOT_SET: {
      break;
    }
  }
  clear_has_serialized_meta();
  switch (from.serialized_meta_case()) {
    case kMeta: {
      mutable_meta()->::org::xrpl::rpc::v1::Meta::MergeFrom(from.meta());
      break;
    }
    case kMetaBinary: {
      set_meta_binary(from.meta_binary());
      break;
    }
    case SERIALIZED_META_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetTransactionResponse)
}

void GetTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validated_) -
      reinterpret_cast<char*>(&date_)) + sizeof(validated_));
  clear_has_serialized_transaction();
  clear_has_serialized_meta();
}

GetTransactionResponse::~GetTransactionResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetTransactionResponse)
  SharedDtor();
}

void GetTransactionResponse::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_;
  if (has_serialized_transaction()) {
    clear_serialized_transaction();
  }
  if (has_serialized_meta()) {
    clear_serialized_meta();
  }
}

void GetTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionResponse& GetTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionResponse::clear_serialized_transaction() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.GetTransactionResponse)
  switch (serialized_transaction_case()) {
    case kTransaction: {
      delete serialized_transaction_.transaction_;
      break;
    }
    case kTransactionBinary: {
      serialized_transaction_.transaction_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SERIALIZED_TRANSACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERIALIZED_TRANSACTION_NOT_SET;
}

void GetTransactionResponse::clear_serialized_meta() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.GetTransactionResponse)
  switch (serialized_meta_case()) {
    case kMeta: {
      delete serialized_meta_.meta_;
      break;
    }
    case kMetaBinary: {
      serialized_meta_.meta_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SERIALIZED_META_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SERIALIZED_META_NOT_SET;
}


void GetTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && date_ != nullptr) {
    delete date_;
  }
  date_ = nullptr;
  ::memset(&ledger_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validated_) -
      reinterpret_cast<char*>(&ledger_index_)) + sizeof(validated_));
  clear_serialized_transaction();
  clear_serialized_meta();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transaction_binary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transaction_binary(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ledger_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ledger_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool validated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Meta meta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes meta_binary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_meta_binary(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Date date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTransactionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetTransactionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Transaction transaction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction_binary = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ledger_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool validated = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Meta meta = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes meta_binary = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_meta_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Date date = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetTransactionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTransactionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Transaction transaction = 1;
  if (has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::transaction(this), output);
  }

  // bytes transaction_binary = 2;
  if (has_transaction_binary()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction_binary(), output);
  }

  // uint32 ledger_index = 3;
  if (this->ledger_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ledger_index(), output);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->hash(), output);
  }

  // bool validated = 5;
  if (this->validated() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->validated(), output);
  }

  // .org.xrpl.rpc.v1.Meta meta = 6;
  if (has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::meta(this), output);
  }

  // bytes meta_binary = 7;
  if (has_meta_binary()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->meta_binary(), output);
  }

  // .org.xrpl.rpc.v1.Date date = 8;
  if (this->has_date()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::date(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetTransactionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Transaction transaction = 1;
  if (has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::transaction(this), target);
  }

  // bytes transaction_binary = 2;
  if (has_transaction_binary()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction_binary(), target);
  }

  // uint32 ledger_index = 3;
  if (this->ledger_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->ledger_index(), target);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->hash(), target);
  }

  // bool validated = 5;
  if (this->validated() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->validated(), target);
  }

  // .org.xrpl.rpc.v1.Meta meta = 6;
  if (has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::meta(this), target);
  }

  // bytes meta_binary = 7;
  if (has_meta_binary()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->meta_binary(), target);
  }

  // .org.xrpl.rpc.v1.Date date = 8;
  if (this->has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::date(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetTransactionResponse)
  return target;
}

size_t GetTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetTransactionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .org.xrpl.rpc.v1.Date date = 8;
  if (this->has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_);
  }

  // uint32 ledger_index = 3;
  if (this->ledger_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index());
  }

  // bool validated = 5;
  if (this->validated() != 0) {
    total_size += 1 + 1;
  }

  switch (serialized_transaction_case()) {
    // .org.xrpl.rpc.v1.Transaction transaction = 1;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *serialized_transaction_.transaction_);
      break;
    }
    // bytes transaction_binary = 2;
    case kTransactionBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->transaction_binary());
      break;
    }
    case SERIALIZED_TRANSACTION_NOT_SET: {
      break;
    }
  }
  switch (serialized_meta_case()) {
    // .org.xrpl.rpc.v1.Meta meta = 6;
    case kMeta: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *serialized_meta_.meta_);
      break;
    }
    // bytes meta_binary = 7;
    case kMetaBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->meta_binary());
      break;
    }
    case SERIALIZED_META_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetTransactionResponse)
    MergeFrom(*source);
  }
}

void GetTransactionResponse::MergeFrom(const GetTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_date()) {
    mutable_date()->::org::xrpl::rpc::v1::Date::MergeFrom(from.date());
  }
  if (from.ledger_index() != 0) {
    set_ledger_index(from.ledger_index());
  }
  if (from.validated() != 0) {
    set_validated(from.validated());
  }
  switch (from.serialized_transaction_case()) {
    case kTransaction: {
      mutable_transaction()->::org::xrpl::rpc::v1::Transaction::MergeFrom(from.transaction());
      break;
    }
    case kTransactionBinary: {
      set_transaction_binary(from.transaction_binary());
      break;
    }
    case SERIALIZED_TRANSACTION_NOT_SET: {
      break;
    }
  }
  switch (from.serialized_meta_case()) {
    case kMeta: {
      mutable_meta()->::org::xrpl::rpc::v1::Meta::MergeFrom(from.meta());
      break;
    }
    case kMetaBinary: {
      set_meta_binary(from.meta_binary());
      break;
    }
    case SERIALIZED_META_NOT_SET: {
      break;
    }
  }
}

void GetTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionResponse::CopyFrom(const GetTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionResponse::IsInitialized() const {
  return true;
}

void GetTransactionResponse::Swap(GetTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTransactionResponse::InternalSwap(GetTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(date_, other->date_);
  swap(ledger_index_, other->ledger_index_);
  swap(validated_, other->validated_);
  swap(serialized_transaction_, other->serialized_transaction_);
  swap(serialized_meta_, other->serialized_meta_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetTransactionRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetTransactionResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetTransactionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
