// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: org/xrpl/rpc/v1/xrp_ledger.proto
#ifndef GRPC_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto__INCLUDED
#define GRPC_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto__INCLUDED

#include "org/xrpl/rpc/v1/xrp_ledger.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// RPCs available to interact with the XRP Ledger.
// The gRPC API mimics the JSON API. Refer to xrpl.org for documentation
class XRPLedgerAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "org.xrpl.rpc.v1.XRPLedgerAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get account info for an account on the XRP Ledger.
    virtual ::grpc::Status GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountInfoResponse>> AsyncGetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountInfoResponse>>(AsyncGetAccountInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountInfoResponse>> PrepareAsyncGetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountInfoResponse>>(PrepareAsyncGetAccountInfoRaw(context, request, cq));
    }
    // Get the fee for a transaction on the XRP Ledger.
    virtual ::grpc::Status GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::org::xrpl::rpc::v1::GetFeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetFeeResponse>> AsyncGetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetFeeResponse>>(AsyncGetFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetFeeResponse>> PrepareAsyncGetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetFeeResponse>>(PrepareAsyncGetFeeRaw(context, request, cq));
    }
    // Submit a signed transaction to the XRP Ledger.
    virtual ::grpc::Status SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::SubmitTransactionResponse>> AsyncSubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::SubmitTransactionResponse>>(AsyncSubmitTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::SubmitTransactionResponse>> PrepareAsyncSubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::SubmitTransactionResponse>>(PrepareAsyncSubmitTransactionRaw(context, request, cq));
    }
    // Get the status of a transaction
    virtual ::grpc::Status GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::org::xrpl::rpc::v1::GetTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetTransactionResponse>> AsyncGetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetTransactionResponse>>(AsyncGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetTransactionResponse>> PrepareAsyncGetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetTransactionResponse>>(PrepareAsyncGetTransactionRaw(context, request, cq));
    }
    // Get all validated transactions associated with a given account
    virtual ::grpc::Status GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>> AsyncGetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>>(AsyncGetAccountTransactionHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>> PrepareAsyncGetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>>(PrepareAsyncGetAccountTransactionHistoryRaw(context, request, cq));
    }
    // ///////////////////////////////////////////////////////////////////////////
    // The below methods do not mimic the JSON API exactly, and are mostly binary
    //
    // Get a specific ledger, optionally including transactions and any modified,
    // added or deleted ledger objects
    virtual ::grpc::Status GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::org::xrpl::rpc::v1::GetLedgerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerResponse>> AsyncGetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerResponse>>(AsyncGetLedgerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerResponse>> PrepareAsyncGetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerResponse>>(PrepareAsyncGetLedgerRaw(context, request, cq));
    }
    // Get a specific ledger object from a specific ledger
    virtual ::grpc::Status GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>> AsyncGetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>>(AsyncGetLedgerEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>> PrepareAsyncGetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>>(PrepareAsyncGetLedgerEntryRaw(context, request, cq));
    }
    // Iterate through all ledger objects in a specific ledger
    virtual ::grpc::Status GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDataResponse>> AsyncGetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDataResponse>>(AsyncGetLedgerDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDataResponse>> PrepareAsyncGetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDataResponse>>(PrepareAsyncGetLedgerDataRaw(context, request, cq));
    }
    // Get all ledger objects that are different between the two specified
    // ledgers. Note, this method has no JSON equivalent.
    virtual ::grpc::Status GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>> AsyncGetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>>(AsyncGetLedgerDiffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>> PrepareAsyncGetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>>(PrepareAsyncGetLedgerDiffRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get account info for an account on the XRP Ledger.
      virtual void GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccountInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get the fee for a transaction on the XRP Ledger.
      virtual void GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Submit a signed transaction to the XRP Ledger.
      virtual void SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get the status of a transaction
      virtual void GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get all validated transactions associated with a given account
      virtual void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // ///////////////////////////////////////////////////////////////////////////
      // The below methods do not mimic the JSON API exactly, and are mostly binary
      //
      // Get a specific ledger, optionally including transactions and any modified,
      // added or deleted ledger objects
      virtual void GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetLedger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get a specific ledger object from a specific ledger
      virtual void GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedgerEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetLedgerEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Iterate through all ledger objects in a specific ledger
      virtual void GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedgerData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetLedgerData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get all ledger objects that are different between the two specified
      // ledgers. Note, this method has no JSON equivalent.
      virtual void GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedgerDiff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetLedgerDiff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountInfoResponse>* AsyncGetAccountInfoRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountInfoResponse>* PrepareAsyncGetAccountInfoRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetFeeResponse>* AsyncGetFeeRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetFeeResponse>* PrepareAsyncGetFeeRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::SubmitTransactionResponse>* AsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::SubmitTransactionResponse>* PrepareAsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetTransactionResponse>* AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetTransactionResponse>* PrepareAsyncGetTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* AsyncGetAccountTransactionHistoryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* PrepareAsyncGetAccountTransactionHistoryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerResponse>* AsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerResponse>* PrepareAsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* AsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* PrepareAsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* AsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* PrepareAsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* AsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* PrepareAsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>> AsyncGetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>>(AsyncGetAccountInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>> PrepareAsyncGetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>>(PrepareAsyncGetAccountInfoRaw(context, request, cq));
    }
    ::grpc::Status GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::org::xrpl::rpc::v1::GetFeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>> AsyncGetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>>(AsyncGetFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>> PrepareAsyncGetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>>(PrepareAsyncGetFeeRaw(context, request, cq));
    }
    ::grpc::Status SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>> AsyncSubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>>(AsyncSubmitTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>> PrepareAsyncSubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>>(PrepareAsyncSubmitTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::org::xrpl::rpc::v1::GetTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>> AsyncGetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>>(AsyncGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>> PrepareAsyncGetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>>(PrepareAsyncGetTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>> AsyncGetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>>(AsyncGetAccountTransactionHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>> PrepareAsyncGetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>>(PrepareAsyncGetAccountTransactionHistoryRaw(context, request, cq));
    }
    ::grpc::Status GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::org::xrpl::rpc::v1::GetLedgerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>> AsyncGetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>>(AsyncGetLedgerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>> PrepareAsyncGetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>>(PrepareAsyncGetLedgerRaw(context, request, cq));
    }
    ::grpc::Status GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>> AsyncGetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>>(AsyncGetLedgerEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>> PrepareAsyncGetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>>(PrepareAsyncGetLedgerEntryRaw(context, request, cq));
    }
    ::grpc::Status GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>> AsyncGetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>>(AsyncGetLedgerDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>> PrepareAsyncGetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>>(PrepareAsyncGetLedgerDataRaw(context, request, cq));
    }
    ::grpc::Status GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>> AsyncGetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>>(AsyncGetLedgerDiffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>> PrepareAsyncGetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>>(PrepareAsyncGetLedgerDiffRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAccountInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAccountInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubmitTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAccountTransactionHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedgerEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedgerEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedgerData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedgerData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedgerDiff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLedgerDiff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>* AsyncGetAccountInfoRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>* PrepareAsyncGetAccountInfoRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>* AsyncGetFeeRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>* PrepareAsyncGetFeeRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>* AsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>* PrepareAsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>* AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>* PrepareAsyncGetTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* AsyncGetAccountTransactionHistoryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* PrepareAsyncGetAccountTransactionHistoryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>* AsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>* PrepareAsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* AsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* PrepareAsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* AsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* PrepareAsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* AsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* PrepareAsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFee_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountTransactionHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLedger_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLedgerEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLedgerData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLedgerDiff_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get account info for an account on the XRP Ledger.
    virtual ::grpc::Status GetAccountInfo(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response);
    // Get the fee for a transaction on the XRP Ledger.
    virtual ::grpc::Status GetFee(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response);
    // Submit a signed transaction to the XRP Ledger.
    virtual ::grpc::Status SubmitTransaction(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response);
    // Get the status of a transaction
    virtual ::grpc::Status GetTransaction(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response);
    // Get all validated transactions associated with a given account
    virtual ::grpc::Status GetAccountTransactionHistory(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response);
    // ///////////////////////////////////////////////////////////////////////////
    // The below methods do not mimic the JSON API exactly, and are mostly binary
    //
    // Get a specific ledger, optionally including transactions and any modified,
    // added or deleted ledger objects
    virtual ::grpc::Status GetLedger(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response);
    // Get a specific ledger object from a specific ledger
    virtual ::grpc::Status GetLedgerEntry(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response);
    // Iterate through all ledger objects in a specific ledger
    virtual ::grpc::Status GetLedgerData(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response);
    // Get all ledger objects that are different between the two specified
    // ledgers. Note, this method has no JSON equivalent.
    virtual ::grpc::Status GetLedgerDiff(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountInfo(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountInfo(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetAccountInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFee() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFee(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetFeeRequest* /*request*/, ::org::xrpl::rpc::v1::GetFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFee(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetFeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetFeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubmitTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::SubmitTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTransaction(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::SubmitTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransaction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransaction(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountTransactionHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountTransactionHistory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAccountTransactionHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountTransactionHistory(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLedger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLedger() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetLedger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedger(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedger(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetLedgerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLedgerEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLedgerEntry() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetLedgerEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedgerEntry(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLedgerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLedgerData() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetLedgerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerData(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedgerData(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLedgerDiff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLedgerDiff() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetLedgerDiff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedgerDiff(::grpc::ServerContext* context, ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAccountInfo<WithAsyncMethod_GetFee<WithAsyncMethod_SubmitTransaction<WithAsyncMethod_GetTransaction<WithAsyncMethod_GetAccountTransactionHistory<WithAsyncMethod_GetLedger<WithAsyncMethod_GetLedgerEntry<WithAsyncMethod_GetLedgerData<WithAsyncMethod_GetLedgerDiff<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAccountInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetAccountInfoRequest, ::org::xrpl::rpc::v1::GetAccountInfoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request,
                 ::org::xrpl::rpc::v1::GetAccountInfoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAccountInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetAccountInfo(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetAccountInfoRequest, ::org::xrpl::rpc::v1::GetAccountInfoResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetAccountInfoRequest, ::org::xrpl::rpc::v1::GetAccountInfoResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountInfo(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAccountInfo(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountInfoResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFee() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetFeeRequest, ::org::xrpl::rpc::v1::GetFeeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetFeeRequest* request,
                 ::org::xrpl::rpc::v1::GetFeeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetFee(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetFee(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetFeeRequest, ::org::xrpl::rpc::v1::GetFeeResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetFeeRequest, ::org::xrpl::rpc::v1::GetFeeResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFee(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetFeeRequest* /*request*/, ::org::xrpl::rpc::v1::GetFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetFee(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetFeeRequest* /*request*/, ::org::xrpl::rpc::v1::GetFeeResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::SubmitTransactionRequest, ::org::xrpl::rpc::v1::SubmitTransactionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request,
                 ::org::xrpl::rpc::v1::SubmitTransactionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SubmitTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SubmitTransaction(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::SubmitTransactionRequest, ::org::xrpl::rpc::v1::SubmitTransactionResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::SubmitTransactionRequest, ::org::xrpl::rpc::v1::SubmitTransactionResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::SubmitTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::SubmitTransactionResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetTransactionRequest, ::org::xrpl::rpc::v1::GetTransactionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetTransactionRequest* request,
                 ::org::xrpl::rpc::v1::GetTransactionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTransaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetTransaction(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetTransactionRequest, ::org::xrpl::rpc::v1::GetTransactionResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetTransactionRequest, ::org::xrpl::rpc::v1::GetTransactionResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::GetTransactionResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAccountTransactionHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAccountTransactionHistory() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request,
                 ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAccountTransactionHistory(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetAccountTransactionHistory(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAccountTransactionHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLedger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLedger() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetLedgerRequest* request,
                 ::org::xrpl::rpc::v1::GetLedgerResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLedger(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetLedger(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLedger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedger(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedger(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLedgerEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLedgerEntry() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request,
                 ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLedgerEntry(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetLedgerEntry(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLedgerEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLedgerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLedgerData() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request,
                 ::org::xrpl::rpc::v1::GetLedgerDataResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLedgerData(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetLedgerData(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLedgerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerData(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedgerData(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDataResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLedgerDiff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLedgerDiff() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse>(
          [this](::grpc::ServerContext* context,
                 const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request,
                 ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLedgerDiff(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetLedgerDiff(
        ::grpc::experimental::MessageAllocator< ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLedgerDiff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetAccountInfo<ExperimentalWithCallbackMethod_GetFee<ExperimentalWithCallbackMethod_SubmitTransaction<ExperimentalWithCallbackMethod_GetTransaction<ExperimentalWithCallbackMethod_GetAccountTransactionHistory<ExperimentalWithCallbackMethod_GetLedger<ExperimentalWithCallbackMethod_GetLedgerEntry<ExperimentalWithCallbackMethod_GetLedgerData<ExperimentalWithCallbackMethod_GetLedgerDiff<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountInfo(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFee() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFee(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetFeeRequest* /*request*/, ::org::xrpl::rpc::v1::GetFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubmitTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::SubmitTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransaction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountTransactionHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountTransactionHistory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAccountTransactionHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLedger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLedger() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetLedger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedger(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLedgerEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLedgerEntry() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetLedgerEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLedgerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLedgerData() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetLedgerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerData(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLedgerDiff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLedgerDiff() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetLedgerDiff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountInfo(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFee() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFee(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetFeeRequest* /*request*/, ::org::xrpl::rpc::v1::GetFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitTransaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubmitTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::SubmitTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransaction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountTransactionHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountTransactionHistory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAccountTransactionHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountTransactionHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLedger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLedger() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetLedger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedger(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedger(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLedgerEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLedgerEntry() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetLedgerEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedgerEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLedgerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLedgerData() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetLedgerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerData(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedgerData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLedgerDiff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLedgerDiff() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetLedgerDiff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLedgerDiff(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAccountInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAccountInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountInfo(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAccountInfo(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFee() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetFee(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFee(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetFeeRequest* /*request*/, ::org::xrpl::rpc::v1::GetFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetFee(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SubmitTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::SubmitTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitTransaction(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTransaction(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAccountTransactionHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAccountTransactionHistory() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAccountTransactionHistory(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAccountTransactionHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLedger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLedger() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLedger(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLedger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedger(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedger(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLedgerEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLedgerEntry() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLedgerEntry(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLedgerEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLedgerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLedgerData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLedgerData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLedgerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerData(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedgerData(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLedgerDiff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLedgerDiff() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLedgerDiff(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLedgerDiff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetAccountInfoRequest, ::org::xrpl::rpc::v1::GetAccountInfoResponse>(std::bind(&WithStreamedUnaryMethod_GetAccountInfo<BaseClass>::StreamedGetAccountInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountInfo(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetAccountInfoRequest,::org::xrpl::rpc::v1::GetAccountInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFee() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetFeeRequest, ::org::xrpl::rpc::v1::GetFeeResponse>(std::bind(&WithStreamedUnaryMethod_GetFee<BaseClass>::StreamedGetFee, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFee(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetFeeRequest* /*request*/, ::org::xrpl::rpc::v1::GetFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetFeeRequest,::org::xrpl::rpc::v1::GetFeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::SubmitTransactionRequest, ::org::xrpl::rpc::v1::SubmitTransactionResponse>(std::bind(&WithStreamedUnaryMethod_SubmitTransaction<BaseClass>::StreamedSubmitTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubmitTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::SubmitTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::SubmitTransactionRequest,::org::xrpl::rpc::v1::SubmitTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransaction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetTransactionRequest, ::org::xrpl::rpc::v1::GetTransactionResponse>(std::bind(&WithStreamedUnaryMethod_GetTransaction<BaseClass>::StreamedGetTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransaction(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetTransactionRequest* /*request*/, ::org::xrpl::rpc::v1::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetTransactionRequest,::org::xrpl::rpc::v1::GetTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountTransactionHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountTransactionHistory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>(std::bind(&WithStreamedUnaryMethod_GetAccountTransactionHistory<BaseClass>::StreamedGetAccountTransactionHistory, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAccountTransactionHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountTransactionHistory(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* /*request*/, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountTransactionHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest,::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLedger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLedger() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse>(std::bind(&WithStreamedUnaryMethod_GetLedger<BaseClass>::StreamedGetLedger, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLedger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLedger(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLedger(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetLedgerRequest,::org::xrpl::rpc::v1::GetLedgerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLedgerEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLedgerEntry() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse>(std::bind(&WithStreamedUnaryMethod_GetLedgerEntry<BaseClass>::StreamedGetLedgerEntry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLedgerEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLedgerEntry(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLedgerEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetLedgerEntryRequest,::org::xrpl::rpc::v1::GetLedgerEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLedgerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLedgerData() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse>(std::bind(&WithStreamedUnaryMethod_GetLedgerData<BaseClass>::StreamedGetLedgerData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLedgerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLedgerData(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLedgerData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetLedgerDataRequest,::org::xrpl::rpc::v1::GetLedgerDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLedgerDiff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLedgerDiff() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse>(std::bind(&WithStreamedUnaryMethod_GetLedgerDiff<BaseClass>::StreamedGetLedgerDiff, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLedgerDiff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLedgerDiff(::grpc::ServerContext* /*context*/, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* /*request*/, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLedgerDiff(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::xrpl::rpc::v1::GetLedgerDiffRequest,::org::xrpl::rpc::v1::GetLedgerDiffResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAccountInfo<WithStreamedUnaryMethod_GetFee<WithStreamedUnaryMethod_SubmitTransaction<WithStreamedUnaryMethod_GetTransaction<WithStreamedUnaryMethod_GetAccountTransactionHistory<WithStreamedUnaryMethod_GetLedger<WithStreamedUnaryMethod_GetLedgerEntry<WithStreamedUnaryMethod_GetLedgerData<WithStreamedUnaryMethod_GetLedgerDiff<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAccountInfo<WithStreamedUnaryMethod_GetFee<WithStreamedUnaryMethod_SubmitTransaction<WithStreamedUnaryMethod_GetTransaction<WithStreamedUnaryMethod_GetAccountTransactionHistory<WithStreamedUnaryMethod_GetLedger<WithStreamedUnaryMethod_GetLedgerEntry<WithStreamedUnaryMethod_GetLedgerData<WithStreamedUnaryMethod_GetLedgerDiff<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org


#endif  // GRPC_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto__INCLUDED
