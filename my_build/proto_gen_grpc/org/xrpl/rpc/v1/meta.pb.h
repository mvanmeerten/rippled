// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/ledger_objects.pb.h"
#include "org/xrpl/rpc/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class AffectedNode;
class AffectedNodeDefaultTypeInternal;
extern AffectedNodeDefaultTypeInternal _AffectedNode_default_instance_;
class CreatedNode;
class CreatedNodeDefaultTypeInternal;
extern CreatedNodeDefaultTypeInternal _CreatedNode_default_instance_;
class DeletedNode;
class DeletedNodeDefaultTypeInternal;
extern DeletedNodeDefaultTypeInternal _DeletedNode_default_instance_;
class Meta;
class MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
class ModifiedNode;
class ModifiedNodeDefaultTypeInternal;
extern ModifiedNodeDefaultTypeInternal _ModifiedNode_default_instance_;
class PrepareLedgerRequest;
class PrepareLedgerRequestDefaultTypeInternal;
extern PrepareLedgerRequestDefaultTypeInternal _PrepareLedgerRequest_default_instance_;
class PrepareLedgerResponse;
class PrepareLedgerResponseDefaultTypeInternal;
extern PrepareLedgerResponseDefaultTypeInternal _PrepareLedgerResponse_default_instance_;
class SubmitMetadataRequest;
class SubmitMetadataRequestDefaultTypeInternal;
extern SubmitMetadataRequestDefaultTypeInternal _SubmitMetadataRequest_default_instance_;
class SubmitMetadataResponse;
class SubmitMetadataResponseDefaultTypeInternal;
extern SubmitMetadataResponseDefaultTypeInternal _SubmitMetadataResponse_default_instance_;
class TransactionResult;
class TransactionResultDefaultTypeInternal;
extern TransactionResultDefaultTypeInternal _TransactionResult_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::AffectedNode* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::AffectedNode>(Arena*);
template<> ::org::xrpl::rpc::v1::CreatedNode* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::CreatedNode>(Arena*);
template<> ::org::xrpl::rpc::v1::DeletedNode* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::DeletedNode>(Arena*);
template<> ::org::xrpl::rpc::v1::Meta* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Meta>(Arena*);
template<> ::org::xrpl::rpc::v1::ModifiedNode* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::ModifiedNode>(Arena*);
template<> ::org::xrpl::rpc::v1::PrepareLedgerRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::PrepareLedgerRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::PrepareLedgerResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::PrepareLedgerResponse>(Arena*);
template<> ::org::xrpl::rpc::v1::SubmitMetadataRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::SubmitMetadataRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::SubmitMetadataResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::SubmitMetadataResponse>(Arena*);
template<> ::org::xrpl::rpc::v1::TransactionResult* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

enum TransactionResult_ResultType : int {
  TransactionResult_ResultType_RESULT_TYPE_UNSPECIFIED = 0,
  TransactionResult_ResultType_RESULT_TYPE_TEC = 1,
  TransactionResult_ResultType_RESULT_TYPE_TEF = 2,
  TransactionResult_ResultType_RESULT_TYPE_TEL = 3,
  TransactionResult_ResultType_RESULT_TYPE_TEM = 4,
  TransactionResult_ResultType_RESULT_TYPE_TER = 5,
  TransactionResult_ResultType_RESULT_TYPE_TES = 6,
  TransactionResult_ResultType_TransactionResult_ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionResult_ResultType_TransactionResult_ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionResult_ResultType_IsValid(int value);
constexpr TransactionResult_ResultType TransactionResult_ResultType_ResultType_MIN = TransactionResult_ResultType_RESULT_TYPE_UNSPECIFIED;
constexpr TransactionResult_ResultType TransactionResult_ResultType_ResultType_MAX = TransactionResult_ResultType_RESULT_TYPE_TES;
constexpr int TransactionResult_ResultType_ResultType_ARRAYSIZE = TransactionResult_ResultType_ResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionResult_ResultType_descriptor();
template<typename T>
inline const std::string& TransactionResult_ResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionResult_ResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionResult_ResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionResult_ResultType_descriptor(), enum_t_value);
}
inline bool TransactionResult_ResultType_Parse(
    const std::string& name, TransactionResult_ResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionResult_ResultType>(
    TransactionResult_ResultType_descriptor(), name, value);
}
// ===================================================================

class SubmitMetadataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.SubmitMetadataRequest) */ {
 public:
  SubmitMetadataRequest();
  virtual ~SubmitMetadataRequest();

  SubmitMetadataRequest(const SubmitMetadataRequest& from);
  SubmitMetadataRequest(SubmitMetadataRequest&& from) noexcept
    : SubmitMetadataRequest() {
    *this = ::std::move(from);
  }

  inline SubmitMetadataRequest& operator=(const SubmitMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitMetadataRequest& operator=(SubmitMetadataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitMetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitMetadataRequest*>(
               &_SubmitMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SubmitMetadataRequest* other);
  friend void swap(SubmitMetadataRequest& a, SubmitMetadataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitMetadataRequest* New() const final {
    return CreateMaybeMessage<SubmitMetadataRequest>(nullptr);
  }

  SubmitMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitMetadataRequest& from);
  void MergeFrom(const SubmitMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.SubmitMetadataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 1;
  int affected_nodes_size() const;
  void clear_affected_nodes();
  static const int kAffectedNodesFieldNumber = 1;
  ::org::xrpl::rpc::v1::AffectedNode* mutable_affected_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >*
      mutable_affected_nodes();
  const ::org::xrpl::rpc::v1::AffectedNode& affected_nodes(int index) const;
  ::org::xrpl::rpc::v1::AffectedNode* add_affected_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >&
      affected_nodes() const;

  // uint32 ledger_sequence = 2;
  void clear_ledger_sequence();
  static const int kLedgerSequenceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_sequence() const;
  void set_ledger_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.SubmitMetadataRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode > affected_nodes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class SubmitMetadataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.SubmitMetadataResponse) */ {
 public:
  SubmitMetadataResponse();
  virtual ~SubmitMetadataResponse();

  SubmitMetadataResponse(const SubmitMetadataResponse& from);
  SubmitMetadataResponse(SubmitMetadataResponse&& from) noexcept
    : SubmitMetadataResponse() {
    *this = ::std::move(from);
  }

  inline SubmitMetadataResponse& operator=(const SubmitMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitMetadataResponse& operator=(SubmitMetadataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitMetadataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitMetadataResponse*>(
               &_SubmitMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubmitMetadataResponse* other);
  friend void swap(SubmitMetadataResponse& a, SubmitMetadataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitMetadataResponse* New() const final {
    return CreateMaybeMessage<SubmitMetadataResponse>(nullptr);
  }

  SubmitMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitMetadataResponse& from);
  void MergeFrom(const SubmitMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.SubmitMetadataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.SubmitMetadataResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class PrepareLedgerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.PrepareLedgerRequest) */ {
 public:
  PrepareLedgerRequest();
  virtual ~PrepareLedgerRequest();

  PrepareLedgerRequest(const PrepareLedgerRequest& from);
  PrepareLedgerRequest(PrepareLedgerRequest&& from) noexcept
    : PrepareLedgerRequest() {
    *this = ::std::move(from);
  }

  inline PrepareLedgerRequest& operator=(const PrepareLedgerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareLedgerRequest& operator=(PrepareLedgerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareLedgerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareLedgerRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareLedgerRequest*>(
               &_PrepareLedgerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PrepareLedgerRequest* other);
  friend void swap(PrepareLedgerRequest& a, PrepareLedgerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareLedgerRequest* New() const final {
    return CreateMaybeMessage<PrepareLedgerRequest>(nullptr);
  }

  PrepareLedgerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareLedgerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareLedgerRequest& from);
  void MergeFrom(const PrepareLedgerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareLedgerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.PrepareLedgerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ledger_index = 1;
  void clear_ledger_index();
  static const int kLedgerIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index() const;
  void set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.PrepareLedgerRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class PrepareLedgerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.PrepareLedgerResponse) */ {
 public:
  PrepareLedgerResponse();
  virtual ~PrepareLedgerResponse();

  PrepareLedgerResponse(const PrepareLedgerResponse& from);
  PrepareLedgerResponse(PrepareLedgerResponse&& from) noexcept
    : PrepareLedgerResponse() {
    *this = ::std::move(from);
  }

  inline PrepareLedgerResponse& operator=(const PrepareLedgerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareLedgerResponse& operator=(PrepareLedgerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareLedgerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareLedgerResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareLedgerResponse*>(
               &_PrepareLedgerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PrepareLedgerResponse* other);
  friend void swap(PrepareLedgerResponse& a, PrepareLedgerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareLedgerResponse* New() const final {
    return CreateMaybeMessage<PrepareLedgerResponse>(nullptr);
  }

  PrepareLedgerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareLedgerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareLedgerResponse& from);
  void MergeFrom(const PrepareLedgerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareLedgerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.PrepareLedgerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.PrepareLedgerResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class Meta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Meta) */ {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meta& operator=(Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Meta* other);
  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const final {
    return CreateMaybeMessage<Meta>(nullptr);
  }

  Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Meta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 3;
  int affected_nodes_size() const;
  void clear_affected_nodes();
  static const int kAffectedNodesFieldNumber = 3;
  ::org::xrpl::rpc::v1::AffectedNode* mutable_affected_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >*
      mutable_affected_nodes();
  const ::org::xrpl::rpc::v1::AffectedNode& affected_nodes(int index) const;
  ::org::xrpl::rpc::v1::AffectedNode* add_affected_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >&
      affected_nodes() const;

  // .org.xrpl.rpc.v1.TransactionResult transaction_result = 2;
  bool has_transaction_result() const;
  void clear_transaction_result();
  static const int kTransactionResultFieldNumber = 2;
  const ::org::xrpl::rpc::v1::TransactionResult& transaction_result() const;
  ::org::xrpl::rpc::v1::TransactionResult* release_transaction_result();
  ::org::xrpl::rpc::v1::TransactionResult* mutable_transaction_result();
  void set_allocated_transaction_result(::org::xrpl::rpc::v1::TransactionResult* transaction_result);

  // .org.xrpl.rpc.v1.DeliveredAmount delivered_amount = 4;
  bool has_delivered_amount() const;
  void clear_delivered_amount();
  static const int kDeliveredAmountFieldNumber = 4;
  const ::org::xrpl::rpc::v1::DeliveredAmount& delivered_amount() const;
  ::org::xrpl::rpc::v1::DeliveredAmount* release_delivered_amount();
  ::org::xrpl::rpc::v1::DeliveredAmount* mutable_delivered_amount();
  void set_allocated_delivered_amount(::org::xrpl::rpc::v1::DeliveredAmount* delivered_amount);

  // uint64 transaction_index = 1 [jstype = JS_STRING];
  void clear_transaction_index();
  static const int kTransactionIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_index() const;
  void set_transaction_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Meta)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode > affected_nodes_;
  ::org::xrpl::rpc::v1::TransactionResult* transaction_result_;
  ::org::xrpl::rpc::v1::DeliveredAmount* delivered_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class TransactionResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.TransactionResult) */ {
 public:
  TransactionResult();
  virtual ~TransactionResult();

  TransactionResult(const TransactionResult& from);
  TransactionResult(TransactionResult&& from) noexcept
    : TransactionResult() {
    *this = ::std::move(from);
  }

  inline TransactionResult& operator=(const TransactionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionResult& operator=(TransactionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionResult* internal_default_instance() {
    return reinterpret_cast<const TransactionResult*>(
               &_TransactionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TransactionResult* other);
  friend void swap(TransactionResult& a, TransactionResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionResult* New() const final {
    return CreateMaybeMessage<TransactionResult>(nullptr);
  }

  TransactionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionResult& from);
  void MergeFrom(const TransactionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.TransactionResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransactionResult_ResultType ResultType;
  static constexpr ResultType RESULT_TYPE_UNSPECIFIED =
    TransactionResult_ResultType_RESULT_TYPE_UNSPECIFIED;
  static constexpr ResultType RESULT_TYPE_TEC =
    TransactionResult_ResultType_RESULT_TYPE_TEC;
  static constexpr ResultType RESULT_TYPE_TEF =
    TransactionResult_ResultType_RESULT_TYPE_TEF;
  static constexpr ResultType RESULT_TYPE_TEL =
    TransactionResult_ResultType_RESULT_TYPE_TEL;
  static constexpr ResultType RESULT_TYPE_TEM =
    TransactionResult_ResultType_RESULT_TYPE_TEM;
  static constexpr ResultType RESULT_TYPE_TER =
    TransactionResult_ResultType_RESULT_TYPE_TER;
  static constexpr ResultType RESULT_TYPE_TES =
    TransactionResult_ResultType_RESULT_TYPE_TES;
  static inline bool ResultType_IsValid(int value) {
    return TransactionResult_ResultType_IsValid(value);
  }
  static constexpr ResultType ResultType_MIN =
    TransactionResult_ResultType_ResultType_MIN;
  static constexpr ResultType ResultType_MAX =
    TransactionResult_ResultType_ResultType_MAX;
  static constexpr int ResultType_ARRAYSIZE =
    TransactionResult_ResultType_ResultType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultType_descriptor() {
    return TransactionResult_ResultType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultType_Name.");
    return TransactionResult_ResultType_Name(enum_t_value);
  }
  static inline bool ResultType_Parse(const std::string& name,
      ResultType* value) {
    return TransactionResult_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // .org.xrpl.rpc.v1.TransactionResult.ResultType result_type = 1;
  void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  ::org::xrpl::rpc::v1::TransactionResult_ResultType result_type() const;
  void set_result_type(::org::xrpl::rpc::v1::TransactionResult_ResultType value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.TransactionResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  int result_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class AffectedNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.AffectedNode) */ {
 public:
  AffectedNode();
  virtual ~AffectedNode();

  AffectedNode(const AffectedNode& from);
  AffectedNode(AffectedNode&& from) noexcept
    : AffectedNode() {
    *this = ::std::move(from);
  }

  inline AffectedNode& operator=(const AffectedNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AffectedNode& operator=(AffectedNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AffectedNode& default_instance();

  enum NodeCase {
    kCreatedNode = 3,
    kDeletedNode = 4,
    kModifiedNode = 5,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AffectedNode* internal_default_instance() {
    return reinterpret_cast<const AffectedNode*>(
               &_AffectedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AffectedNode* other);
  friend void swap(AffectedNode& a, AffectedNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AffectedNode* New() const final {
    return CreateMaybeMessage<AffectedNode>(nullptr);
  }

  AffectedNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AffectedNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AffectedNode& from);
  void MergeFrom(const AffectedNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AffectedNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.AffectedNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ledger_index = 2;
  void clear_ledger_index();
  static const int kLedgerIndexFieldNumber = 2;
  const std::string& ledger_index() const;
  void set_ledger_index(const std::string& value);
  void set_ledger_index(std::string&& value);
  void set_ledger_index(const char* value);
  void set_ledger_index(const void* value, size_t size);
  std::string* mutable_ledger_index();
  std::string* release_ledger_index();
  void set_allocated_ledger_index(std::string* ledger_index);

  // .org.xrpl.rpc.v1.LedgerEntryType ledger_entry_type = 1;
  void clear_ledger_entry_type();
  static const int kLedgerEntryTypeFieldNumber = 1;
  ::org::xrpl::rpc::v1::LedgerEntryType ledger_entry_type() const;
  void set_ledger_entry_type(::org::xrpl::rpc::v1::LedgerEntryType value);

  // .org.xrpl.rpc.v1.CreatedNode created_node = 3;
  bool has_created_node() const;
  void clear_created_node();
  static const int kCreatedNodeFieldNumber = 3;
  const ::org::xrpl::rpc::v1::CreatedNode& created_node() const;
  ::org::xrpl::rpc::v1::CreatedNode* release_created_node();
  ::org::xrpl::rpc::v1::CreatedNode* mutable_created_node();
  void set_allocated_created_node(::org::xrpl::rpc::v1::CreatedNode* created_node);

  // .org.xrpl.rpc.v1.DeletedNode deleted_node = 4;
  bool has_deleted_node() const;
  void clear_deleted_node();
  static const int kDeletedNodeFieldNumber = 4;
  const ::org::xrpl::rpc::v1::DeletedNode& deleted_node() const;
  ::org::xrpl::rpc::v1::DeletedNode* release_deleted_node();
  ::org::xrpl::rpc::v1::DeletedNode* mutable_deleted_node();
  void set_allocated_deleted_node(::org::xrpl::rpc::v1::DeletedNode* deleted_node);

  // .org.xrpl.rpc.v1.ModifiedNode modified_node = 5;
  bool has_modified_node() const;
  void clear_modified_node();
  static const int kModifiedNodeFieldNumber = 5;
  const ::org::xrpl::rpc::v1::ModifiedNode& modified_node() const;
  ::org::xrpl::rpc::v1::ModifiedNode* release_modified_node();
  ::org::xrpl::rpc::v1::ModifiedNode* mutable_modified_node();
  void set_allocated_modified_node(::org::xrpl::rpc::v1::ModifiedNode* modified_node);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.AffectedNode)
 private:
  class HasBitSetters;
  void set_has_created_node();
  void set_has_deleted_node();
  void set_has_modified_node();

  inline bool has_node() const;
  inline void clear_has_node();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_index_;
  int ledger_entry_type_;
  union NodeUnion {
    NodeUnion() {}
    ::org::xrpl::rpc::v1::CreatedNode* created_node_;
    ::org::xrpl::rpc::v1::DeletedNode* deleted_node_;
    ::org::xrpl::rpc::v1::ModifiedNode* modified_node_;
  } node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class CreatedNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.CreatedNode) */ {
 public:
  CreatedNode();
  virtual ~CreatedNode();

  CreatedNode(const CreatedNode& from);
  CreatedNode(CreatedNode&& from) noexcept
    : CreatedNode() {
    *this = ::std::move(from);
  }

  inline CreatedNode& operator=(const CreatedNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatedNode& operator=(CreatedNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatedNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatedNode* internal_default_instance() {
    return reinterpret_cast<const CreatedNode*>(
               &_CreatedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CreatedNode* other);
  friend void swap(CreatedNode& a, CreatedNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreatedNode* New() const final {
    return CreateMaybeMessage<CreatedNode>(nullptr);
  }

  CreatedNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatedNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatedNode& from);
  void MergeFrom(const CreatedNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatedNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.CreatedNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.LedgerObject new_fields = 1;
  bool has_new_fields() const;
  void clear_new_fields();
  static const int kNewFieldsFieldNumber = 1;
  const ::org::xrpl::rpc::v1::LedgerObject& new_fields() const;
  ::org::xrpl::rpc::v1::LedgerObject* release_new_fields();
  ::org::xrpl::rpc::v1::LedgerObject* mutable_new_fields();
  void set_allocated_new_fields(::org::xrpl::rpc::v1::LedgerObject* new_fields);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.CreatedNode)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::LedgerObject* new_fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class DeletedNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.DeletedNode) */ {
 public:
  DeletedNode();
  virtual ~DeletedNode();

  DeletedNode(const DeletedNode& from);
  DeletedNode(DeletedNode&& from) noexcept
    : DeletedNode() {
    *this = ::std::move(from);
  }

  inline DeletedNode& operator=(const DeletedNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletedNode& operator=(DeletedNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletedNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletedNode* internal_default_instance() {
    return reinterpret_cast<const DeletedNode*>(
               &_DeletedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeletedNode* other);
  friend void swap(DeletedNode& a, DeletedNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletedNode* New() const final {
    return CreateMaybeMessage<DeletedNode>(nullptr);
  }

  DeletedNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletedNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletedNode& from);
  void MergeFrom(const DeletedNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletedNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.DeletedNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  bool has_final_fields() const;
  void clear_final_fields();
  static const int kFinalFieldsFieldNumber = 1;
  const ::org::xrpl::rpc::v1::LedgerObject& final_fields() const;
  ::org::xrpl::rpc::v1::LedgerObject* release_final_fields();
  ::org::xrpl::rpc::v1::LedgerObject* mutable_final_fields();
  void set_allocated_final_fields(::org::xrpl::rpc::v1::LedgerObject* final_fields);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.DeletedNode)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::LedgerObject* final_fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// -------------------------------------------------------------------

class ModifiedNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.ModifiedNode) */ {
 public:
  ModifiedNode();
  virtual ~ModifiedNode();

  ModifiedNode(const ModifiedNode& from);
  ModifiedNode(ModifiedNode&& from) noexcept
    : ModifiedNode() {
    *this = ::std::move(from);
  }

  inline ModifiedNode& operator=(const ModifiedNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifiedNode& operator=(ModifiedNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifiedNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifiedNode* internal_default_instance() {
    return reinterpret_cast<const ModifiedNode*>(
               &_ModifiedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ModifiedNode* other);
  friend void swap(ModifiedNode& a, ModifiedNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifiedNode* New() const final {
    return CreateMaybeMessage<ModifiedNode>(nullptr);
  }

  ModifiedNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifiedNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifiedNode& from);
  void MergeFrom(const ModifiedNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifiedNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.ModifiedNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  bool has_final_fields() const;
  void clear_final_fields();
  static const int kFinalFieldsFieldNumber = 1;
  const ::org::xrpl::rpc::v1::LedgerObject& final_fields() const;
  ::org::xrpl::rpc::v1::LedgerObject* release_final_fields();
  ::org::xrpl::rpc::v1::LedgerObject* mutable_final_fields();
  void set_allocated_final_fields(::org::xrpl::rpc::v1::LedgerObject* final_fields);

  // .org.xrpl.rpc.v1.LedgerObject previous_fields = 2;
  bool has_previous_fields() const;
  void clear_previous_fields();
  static const int kPreviousFieldsFieldNumber = 2;
  const ::org::xrpl::rpc::v1::LedgerObject& previous_fields() const;
  ::org::xrpl::rpc::v1::LedgerObject* release_previous_fields();
  ::org::xrpl::rpc::v1::LedgerObject* mutable_previous_fields();
  void set_allocated_previous_fields(::org::xrpl::rpc::v1::LedgerObject* previous_fields);

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 3;
  bool has_previous_transaction_id() const;
  void clear_previous_transaction_id();
  static const int kPreviousTransactionIdFieldNumber = 3;
  const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id() const;
  ::org::xrpl::rpc::v1::PreviousTransactionID* release_previous_transaction_id();
  ::org::xrpl::rpc::v1::PreviousTransactionID* mutable_previous_transaction_id();
  void set_allocated_previous_transaction_id(::org::xrpl::rpc::v1::PreviousTransactionID* previous_transaction_id);

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
  bool has_previous_transaction_ledger_sequence() const;
  void clear_previous_transaction_ledger_sequence();
  static const int kPreviousTransactionLedgerSequenceFieldNumber = 4;
  const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence() const;
  ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* release_previous_transaction_ledger_sequence();
  ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* mutable_previous_transaction_ledger_sequence();
  void set_allocated_previous_transaction_ledger_sequence(::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* previous_transaction_ledger_sequence);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.ModifiedNode)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::LedgerObject* final_fields_;
  ::org::xrpl::rpc::v1::LedgerObject* previous_fields_;
  ::org::xrpl::rpc::v1::PreviousTransactionID* previous_transaction_id_;
  ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* previous_transaction_ledger_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitMetadataRequest

// repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 1;
inline int SubmitMetadataRequest::affected_nodes_size() const {
  return affected_nodes_.size();
}
inline void SubmitMetadataRequest::clear_affected_nodes() {
  affected_nodes_.Clear();
}
inline ::org::xrpl::rpc::v1::AffectedNode* SubmitMetadataRequest::mutable_affected_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SubmitMetadataRequest.affected_nodes)
  return affected_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >*
SubmitMetadataRequest::mutable_affected_nodes() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.SubmitMetadataRequest.affected_nodes)
  return &affected_nodes_;
}
inline const ::org::xrpl::rpc::v1::AffectedNode& SubmitMetadataRequest::affected_nodes(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitMetadataRequest.affected_nodes)
  return affected_nodes_.Get(index);
}
inline ::org::xrpl::rpc::v1::AffectedNode* SubmitMetadataRequest::add_affected_nodes() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.SubmitMetadataRequest.affected_nodes)
  return affected_nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >&
SubmitMetadataRequest::affected_nodes() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.SubmitMetadataRequest.affected_nodes)
  return affected_nodes_;
}

// uint32 ledger_sequence = 2;
inline void SubmitMetadataRequest::clear_ledger_sequence() {
  ledger_sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubmitMetadataRequest::ledger_sequence() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitMetadataRequest.ledger_sequence)
  return ledger_sequence_;
}
inline void SubmitMetadataRequest::set_ledger_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_sequence_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitMetadataRequest.ledger_sequence)
}

// -------------------------------------------------------------------

// SubmitMetadataResponse

// bool success = 1;
inline void SubmitMetadataResponse::clear_success() {
  success_ = false;
}
inline bool SubmitMetadataResponse::success() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitMetadataResponse.success)
  return success_;
}
inline void SubmitMetadataResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitMetadataResponse.success)
}

// string msg = 2;
inline void SubmitMetadataResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubmitMetadataResponse::msg() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
  return msg_.GetNoArena();
}
inline void SubmitMetadataResponse::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
}
inline void SubmitMetadataResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
}
inline void SubmitMetadataResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
}
inline void SubmitMetadataResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
}
inline std::string* SubmitMetadataResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubmitMetadataResponse::release_msg() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitMetadataResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SubmitMetadataResponse.msg)
}

// -------------------------------------------------------------------

// PrepareLedgerRequest

// uint32 ledger_index = 1;
inline void PrepareLedgerRequest::clear_ledger_index() {
  ledger_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrepareLedgerRequest::ledger_index() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PrepareLedgerRequest.ledger_index)
  return ledger_index_;
}
inline void PrepareLedgerRequest::set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.PrepareLedgerRequest.ledger_index)
}

// -------------------------------------------------------------------

// PrepareLedgerResponse

// bool success = 1;
inline void PrepareLedgerResponse::clear_success() {
  success_ = false;
}
inline bool PrepareLedgerResponse::success() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PrepareLedgerResponse.success)
  return success_;
}
inline void PrepareLedgerResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.PrepareLedgerResponse.success)
}

// string msg = 2;
inline void PrepareLedgerResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PrepareLedgerResponse::msg() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
  return msg_.GetNoArena();
}
inline void PrepareLedgerResponse::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
}
inline void PrepareLedgerResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
}
inline void PrepareLedgerResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
}
inline void PrepareLedgerResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
}
inline std::string* PrepareLedgerResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrepareLedgerResponse::release_msg() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareLedgerResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PrepareLedgerResponse.msg)
}

// -------------------------------------------------------------------

// Meta

// uint64 transaction_index = 1 [jstype = JS_STRING];
inline void Meta::clear_transaction_index() {
  transaction_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Meta::transaction_index() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Meta.transaction_index)
  return transaction_index_;
}
inline void Meta::set_transaction_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transaction_index_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.Meta.transaction_index)
}

// .org.xrpl.rpc.v1.TransactionResult transaction_result = 2;
inline bool Meta::has_transaction_result() const {
  return this != internal_default_instance() && transaction_result_ != nullptr;
}
inline void Meta::clear_transaction_result() {
  if (GetArenaNoVirtual() == nullptr && transaction_result_ != nullptr) {
    delete transaction_result_;
  }
  transaction_result_ = nullptr;
}
inline const ::org::xrpl::rpc::v1::TransactionResult& Meta::transaction_result() const {
  const ::org::xrpl::rpc::v1::TransactionResult* p = transaction_result_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Meta.transaction_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TransactionResult*>(
      &::org::xrpl::rpc::v1::_TransactionResult_default_instance_);
}
inline ::org::xrpl::rpc::v1::TransactionResult* Meta::release_transaction_result() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Meta.transaction_result)
  
  ::org::xrpl::rpc::v1::TransactionResult* temp = transaction_result_;
  transaction_result_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TransactionResult* Meta::mutable_transaction_result() {
  
  if (transaction_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionResult>(GetArenaNoVirtual());
    transaction_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Meta.transaction_result)
  return transaction_result_;
}
inline void Meta::set_allocated_transaction_result(::org::xrpl::rpc::v1::TransactionResult* transaction_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_result_;
  }
  if (transaction_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_result, submessage_arena);
    }
    
  } else {
    
  }
  transaction_result_ = transaction_result;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Meta.transaction_result)
}

// repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 3;
inline int Meta::affected_nodes_size() const {
  return affected_nodes_.size();
}
inline void Meta::clear_affected_nodes() {
  affected_nodes_.Clear();
}
inline ::org::xrpl::rpc::v1::AffectedNode* Meta::mutable_affected_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Meta.affected_nodes)
  return affected_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >*
Meta::mutable_affected_nodes() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.Meta.affected_nodes)
  return &affected_nodes_;
}
inline const ::org::xrpl::rpc::v1::AffectedNode& Meta::affected_nodes(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Meta.affected_nodes)
  return affected_nodes_.Get(index);
}
inline ::org::xrpl::rpc::v1::AffectedNode* Meta::add_affected_nodes() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.Meta.affected_nodes)
  return affected_nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::AffectedNode >&
Meta::affected_nodes() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.Meta.affected_nodes)
  return affected_nodes_;
}

// .org.xrpl.rpc.v1.DeliveredAmount delivered_amount = 4;
inline bool Meta::has_delivered_amount() const {
  return this != internal_default_instance() && delivered_amount_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::DeliveredAmount& Meta::delivered_amount() const {
  const ::org::xrpl::rpc::v1::DeliveredAmount* p = delivered_amount_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Meta.delivered_amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::DeliveredAmount*>(
      &::org::xrpl::rpc::v1::_DeliveredAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::DeliveredAmount* Meta::release_delivered_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Meta.delivered_amount)
  
  ::org::xrpl::rpc::v1::DeliveredAmount* temp = delivered_amount_;
  delivered_amount_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::DeliveredAmount* Meta::mutable_delivered_amount() {
  
  if (delivered_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::DeliveredAmount>(GetArenaNoVirtual());
    delivered_amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Meta.delivered_amount)
  return delivered_amount_;
}
inline void Meta::set_allocated_delivered_amount(::org::xrpl::rpc::v1::DeliveredAmount* delivered_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(delivered_amount_);
  }
  if (delivered_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delivered_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delivered_amount, submessage_arena);
    }
    
  } else {
    
  }
  delivered_amount_ = delivered_amount;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Meta.delivered_amount)
}

// -------------------------------------------------------------------

// TransactionResult

// .org.xrpl.rpc.v1.TransactionResult.ResultType result_type = 1;
inline void TransactionResult::clear_result_type() {
  result_type_ = 0;
}
inline ::org::xrpl::rpc::v1::TransactionResult_ResultType TransactionResult::result_type() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TransactionResult.result_type)
  return static_cast< ::org::xrpl::rpc::v1::TransactionResult_ResultType >(result_type_);
}
inline void TransactionResult::set_result_type(::org::xrpl::rpc::v1::TransactionResult_ResultType value) {
  
  result_type_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.TransactionResult.result_type)
}

// string result = 2;
inline void TransactionResult::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionResult::result() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TransactionResult.result)
  return result_.GetNoArena();
}
inline void TransactionResult::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.TransactionResult.result)
}
inline void TransactionResult::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.TransactionResult.result)
}
inline void TransactionResult::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.TransactionResult.result)
}
inline void TransactionResult::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.TransactionResult.result)
}
inline std::string* TransactionResult::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TransactionResult.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionResult::release_result() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.TransactionResult.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionResult::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.TransactionResult.result)
}

// -------------------------------------------------------------------

// AffectedNode

// .org.xrpl.rpc.v1.LedgerEntryType ledger_entry_type = 1;
inline void AffectedNode::clear_ledger_entry_type() {
  ledger_entry_type_ = 0;
}
inline ::org::xrpl::rpc::v1::LedgerEntryType AffectedNode::ledger_entry_type() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AffectedNode.ledger_entry_type)
  return static_cast< ::org::xrpl::rpc::v1::LedgerEntryType >(ledger_entry_type_);
}
inline void AffectedNode::set_ledger_entry_type(::org::xrpl::rpc::v1::LedgerEntryType value) {
  
  ledger_entry_type_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.AffectedNode.ledger_entry_type)
}

// bytes ledger_index = 2;
inline void AffectedNode::clear_ledger_index() {
  ledger_index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AffectedNode::ledger_index() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AffectedNode.ledger_index)
  return ledger_index_.GetNoArena();
}
inline void AffectedNode::set_ledger_index(const std::string& value) {
  
  ledger_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.AffectedNode.ledger_index)
}
inline void AffectedNode::set_ledger_index(std::string&& value) {
  
  ledger_index_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.AffectedNode.ledger_index)
}
inline void AffectedNode::set_ledger_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ledger_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.AffectedNode.ledger_index)
}
inline void AffectedNode::set_ledger_index(const void* value, size_t size) {
  
  ledger_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.AffectedNode.ledger_index)
}
inline std::string* AffectedNode::mutable_ledger_index() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AffectedNode.ledger_index)
  return ledger_index_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AffectedNode::release_ledger_index() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AffectedNode.ledger_index)
  
  return ledger_index_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AffectedNode::set_allocated_ledger_index(std::string* ledger_index) {
  if (ledger_index != nullptr) {
    
  } else {
    
  }
  ledger_index_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledger_index);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AffectedNode.ledger_index)
}

// .org.xrpl.rpc.v1.CreatedNode created_node = 3;
inline bool AffectedNode::has_created_node() const {
  return node_case() == kCreatedNode;
}
inline void AffectedNode::set_has_created_node() {
  _oneof_case_[0] = kCreatedNode;
}
inline void AffectedNode::clear_created_node() {
  if (has_created_node()) {
    delete node_.created_node_;
    clear_has_node();
  }
}
inline ::org::xrpl::rpc::v1::CreatedNode* AffectedNode::release_created_node() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AffectedNode.created_node)
  if (has_created_node()) {
    clear_has_node();
      ::org::xrpl::rpc::v1::CreatedNode* temp = node_.created_node_;
    node_.created_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::CreatedNode& AffectedNode::created_node() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AffectedNode.created_node)
  return has_created_node()
      ? *node_.created_node_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::CreatedNode*>(&::org::xrpl::rpc::v1::_CreatedNode_default_instance_);
}
inline ::org::xrpl::rpc::v1::CreatedNode* AffectedNode::mutable_created_node() {
  if (!has_created_node()) {
    clear_node();
    set_has_created_node();
    node_.created_node_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::CreatedNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AffectedNode.created_node)
  return node_.created_node_;
}

// .org.xrpl.rpc.v1.DeletedNode deleted_node = 4;
inline bool AffectedNode::has_deleted_node() const {
  return node_case() == kDeletedNode;
}
inline void AffectedNode::set_has_deleted_node() {
  _oneof_case_[0] = kDeletedNode;
}
inline void AffectedNode::clear_deleted_node() {
  if (has_deleted_node()) {
    delete node_.deleted_node_;
    clear_has_node();
  }
}
inline ::org::xrpl::rpc::v1::DeletedNode* AffectedNode::release_deleted_node() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AffectedNode.deleted_node)
  if (has_deleted_node()) {
    clear_has_node();
      ::org::xrpl::rpc::v1::DeletedNode* temp = node_.deleted_node_;
    node_.deleted_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::DeletedNode& AffectedNode::deleted_node() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AffectedNode.deleted_node)
  return has_deleted_node()
      ? *node_.deleted_node_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::DeletedNode*>(&::org::xrpl::rpc::v1::_DeletedNode_default_instance_);
}
inline ::org::xrpl::rpc::v1::DeletedNode* AffectedNode::mutable_deleted_node() {
  if (!has_deleted_node()) {
    clear_node();
    set_has_deleted_node();
    node_.deleted_node_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::DeletedNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AffectedNode.deleted_node)
  return node_.deleted_node_;
}

// .org.xrpl.rpc.v1.ModifiedNode modified_node = 5;
inline bool AffectedNode::has_modified_node() const {
  return node_case() == kModifiedNode;
}
inline void AffectedNode::set_has_modified_node() {
  _oneof_case_[0] = kModifiedNode;
}
inline void AffectedNode::clear_modified_node() {
  if (has_modified_node()) {
    delete node_.modified_node_;
    clear_has_node();
  }
}
inline ::org::xrpl::rpc::v1::ModifiedNode* AffectedNode::release_modified_node() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AffectedNode.modified_node)
  if (has_modified_node()) {
    clear_has_node();
      ::org::xrpl::rpc::v1::ModifiedNode* temp = node_.modified_node_;
    node_.modified_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::ModifiedNode& AffectedNode::modified_node() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AffectedNode.modified_node)
  return has_modified_node()
      ? *node_.modified_node_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::ModifiedNode*>(&::org::xrpl::rpc::v1::_ModifiedNode_default_instance_);
}
inline ::org::xrpl::rpc::v1::ModifiedNode* AffectedNode::mutable_modified_node() {
  if (!has_modified_node()) {
    clear_node();
    set_has_modified_node();
    node_.modified_node_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::ModifiedNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AffectedNode.modified_node)
  return node_.modified_node_;
}

inline bool AffectedNode::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void AffectedNode::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline AffectedNode::NodeCase AffectedNode::node_case() const {
  return AffectedNode::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreatedNode

// .org.xrpl.rpc.v1.LedgerObject new_fields = 1;
inline bool CreatedNode::has_new_fields() const {
  return this != internal_default_instance() && new_fields_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerObject& CreatedNode::new_fields() const {
  const ::org::xrpl::rpc::v1::LedgerObject* p = new_fields_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CreatedNode.new_fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerObject*>(
      &::org::xrpl::rpc::v1::_LedgerObject_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerObject* CreatedNode::release_new_fields() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CreatedNode.new_fields)
  
  ::org::xrpl::rpc::v1::LedgerObject* temp = new_fields_;
  new_fields_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerObject* CreatedNode::mutable_new_fields() {
  
  if (new_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerObject>(GetArenaNoVirtual());
    new_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CreatedNode.new_fields)
  return new_fields_;
}
inline void CreatedNode::set_allocated_new_fields(::org::xrpl::rpc::v1::LedgerObject* new_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_fields_);
  }
  if (new_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_fields, submessage_arena);
    }
    
  } else {
    
  }
  new_fields_ = new_fields;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CreatedNode.new_fields)
}

// -------------------------------------------------------------------

// DeletedNode

// .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
inline bool DeletedNode::has_final_fields() const {
  return this != internal_default_instance() && final_fields_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerObject& DeletedNode::final_fields() const {
  const ::org::xrpl::rpc::v1::LedgerObject* p = final_fields_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.DeletedNode.final_fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerObject*>(
      &::org::xrpl::rpc::v1::_LedgerObject_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerObject* DeletedNode::release_final_fields() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.DeletedNode.final_fields)
  
  ::org::xrpl::rpc::v1::LedgerObject* temp = final_fields_;
  final_fields_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerObject* DeletedNode::mutable_final_fields() {
  
  if (final_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerObject>(GetArenaNoVirtual());
    final_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.DeletedNode.final_fields)
  return final_fields_;
}
inline void DeletedNode::set_allocated_final_fields(::org::xrpl::rpc::v1::LedgerObject* final_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_fields_);
  }
  if (final_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      final_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_fields, submessage_arena);
    }
    
  } else {
    
  }
  final_fields_ = final_fields;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.DeletedNode.final_fields)
}

// -------------------------------------------------------------------

// ModifiedNode

// .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
inline bool ModifiedNode::has_final_fields() const {
  return this != internal_default_instance() && final_fields_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerObject& ModifiedNode::final_fields() const {
  const ::org::xrpl::rpc::v1::LedgerObject* p = final_fields_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.ModifiedNode.final_fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerObject*>(
      &::org::xrpl::rpc::v1::_LedgerObject_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerObject* ModifiedNode::release_final_fields() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.ModifiedNode.final_fields)
  
  ::org::xrpl::rpc::v1::LedgerObject* temp = final_fields_;
  final_fields_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerObject* ModifiedNode::mutable_final_fields() {
  
  if (final_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerObject>(GetArenaNoVirtual());
    final_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.ModifiedNode.final_fields)
  return final_fields_;
}
inline void ModifiedNode::set_allocated_final_fields(::org::xrpl::rpc::v1::LedgerObject* final_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_fields_);
  }
  if (final_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      final_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_fields, submessage_arena);
    }
    
  } else {
    
  }
  final_fields_ = final_fields;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.ModifiedNode.final_fields)
}

// .org.xrpl.rpc.v1.LedgerObject previous_fields = 2;
inline bool ModifiedNode::has_previous_fields() const {
  return this != internal_default_instance() && previous_fields_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerObject& ModifiedNode::previous_fields() const {
  const ::org::xrpl::rpc::v1::LedgerObject* p = previous_fields_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.ModifiedNode.previous_fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerObject*>(
      &::org::xrpl::rpc::v1::_LedgerObject_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerObject* ModifiedNode::release_previous_fields() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.ModifiedNode.previous_fields)
  
  ::org::xrpl::rpc::v1::LedgerObject* temp = previous_fields_;
  previous_fields_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerObject* ModifiedNode::mutable_previous_fields() {
  
  if (previous_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerObject>(GetArenaNoVirtual());
    previous_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.ModifiedNode.previous_fields)
  return previous_fields_;
}
inline void ModifiedNode::set_allocated_previous_fields(::org::xrpl::rpc::v1::LedgerObject* previous_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_fields_);
  }
  if (previous_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      previous_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_fields, submessage_arena);
    }
    
  } else {
    
  }
  previous_fields_ = previous_fields;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.ModifiedNode.previous_fields)
}

// .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 3;
inline bool ModifiedNode::has_previous_transaction_id() const {
  return this != internal_default_instance() && previous_transaction_id_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::PreviousTransactionID& ModifiedNode::previous_transaction_id() const {
  const ::org::xrpl::rpc::v1::PreviousTransactionID* p = previous_transaction_id_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      &::org::xrpl::rpc::v1::_PreviousTransactionID_default_instance_);
}
inline ::org::xrpl::rpc::v1::PreviousTransactionID* ModifiedNode::release_previous_transaction_id() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_id)
  
  ::org::xrpl::rpc::v1::PreviousTransactionID* temp = previous_transaction_id_;
  previous_transaction_id_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::PreviousTransactionID* ModifiedNode::mutable_previous_transaction_id() {
  
  if (previous_transaction_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::PreviousTransactionID>(GetArenaNoVirtual());
    previous_transaction_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_id)
  return previous_transaction_id_;
}
inline void ModifiedNode::set_allocated_previous_transaction_id(::org::xrpl::rpc::v1::PreviousTransactionID* previous_transaction_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_transaction_id_);
  }
  if (previous_transaction_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      previous_transaction_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_transaction_id, submessage_arena);
    }
    
  } else {
    
  }
  previous_transaction_id_ = previous_transaction_id;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_id)
}

// .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
inline bool ModifiedNode::has_previous_transaction_ledger_sequence() const {
  return this != internal_default_instance() && previous_transaction_ledger_sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& ModifiedNode::previous_transaction_ledger_sequence() const {
  const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* p = previous_transaction_ledger_sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_ledger_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      &::org::xrpl::rpc::v1::_PreviousTransactionLedgerSequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* ModifiedNode::release_previous_transaction_ledger_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_ledger_sequence)
  
  ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* temp = previous_transaction_ledger_sequence_;
  previous_transaction_ledger_sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* ModifiedNode::mutable_previous_transaction_ledger_sequence() {
  
  if (previous_transaction_ledger_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence>(GetArenaNoVirtual());
    previous_transaction_ledger_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_ledger_sequence)
  return previous_transaction_ledger_sequence_;
}
inline void ModifiedNode::set_allocated_previous_transaction_ledger_sequence(::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence* previous_transaction_ledger_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_transaction_ledger_sequence_);
  }
  if (previous_transaction_ledger_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      previous_transaction_ledger_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_transaction_ledger_sequence, submessage_arena);
    }
    
  } else {
    
  }
  previous_transaction_ledger_sequence_ = previous_transaction_ledger_sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.ModifiedNode.previous_transaction_ledger_sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::org::xrpl::rpc::v1::TransactionResult_ResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::xrpl::rpc::v1::TransactionResult_ResultType>() {
  return ::org::xrpl::rpc::v1::TransactionResult_ResultType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto
