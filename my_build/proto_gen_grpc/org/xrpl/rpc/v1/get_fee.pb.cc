// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_fee.proto

#include "org/xrpl/rpc/v1/get_fee.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeLevels_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetFeeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeRequest> _instance;
} _GetFeeRequest_default_instance_;
class GetFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeResponse> _instance;
} _GetFeeResponse_default_instance_;
class FeeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fee> _instance;
} _Fee_default_instance_;
class FeeLevelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeLevels> _instance;
} _FeeLevels_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Fee_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Fee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Fee::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto}, {
      &scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,}};

static void InitDefaultsscc_info_FeeLevels_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_FeeLevels_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::FeeLevels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::FeeLevels::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeLevels_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FeeLevels_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto}, {}};

static void InitDefaultsscc_info_GetFeeRequest_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetFeeRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetFeeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetFeeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFeeRequest_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetFeeRequest_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto}, {}};

static void InitDefaultsscc_info_GetFeeResponse_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetFeeResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetFeeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetFeeResponse_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetFeeResponse_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto}, {
      &scc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base,
      &scc_info_FeeLevels_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeRequest, client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, current_ledger_size_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, current_queue_size_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, fee_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, expected_ledger_size_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, ledger_current_index_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, levels_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetFeeResponse, max_queue_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Fee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Fee, base_fee_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Fee, median_fee_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Fee, minimum_fee_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Fee, open_ledger_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeLevels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeLevels, median_level_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeLevels, minimum_level_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeLevels, open_ledger_level_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeLevels, reference_level_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::GetFeeRequest)},
  { 6, -1, sizeof(::org::xrpl::rpc::v1::GetFeeResponse)},
  { 18, -1, sizeof(::org::xrpl::rpc::v1::Fee)},
  { 27, -1, sizeof(::org::xrpl::rpc::v1::FeeLevels)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetFeeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Fee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_FeeLevels_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto[] =
  "\n\035org/xrpl/rpc/v1/get_fee.proto\022\017org.xrp"
  "l.rpc.v1\032\034org/xrpl/rpc/v1/amount.proto\"\""
  "\n\rGetFeeRequest\022\021\n\tclient_ip\030\001 \001(\t\"\374\001\n\016G"
  "etFeeResponse\022\037\n\023current_ledger_size\030\001 \001"
  "(\004B\0020\001\022\036\n\022current_queue_size\030\002 \001(\004B\0020\001\022!"
  "\n\003fee\030\003 \001(\0132\024.org.xrpl.rpc.v1.Fee\022 \n\024exp"
  "ected_ledger_size\030\004 \001(\004B\0020\001\022\034\n\024ledger_cu"
  "rrent_index\030\005 \001(\r\022*\n\006levels\030\006 \001(\0132\032.org."
  "xrpl.rpc.v1.FeeLevels\022\032\n\016max_queue_size\030"
  "\007 \001(\004B\0020\001\"\335\001\n\003Fee\0221\n\010base_fee\030\001 \001(\0132\037.or"
  "g.xrpl.rpc.v1.XRPDropsAmount\0223\n\nmedian_f"
  "ee\030\002 \001(\0132\037.org.xrpl.rpc.v1.XRPDropsAmoun"
  "t\0224\n\013minimum_fee\030\003 \001(\0132\037.org.xrpl.rpc.v1"
  ".XRPDropsAmount\0228\n\017open_ledger_fee\030\004 \001(\013"
  "2\037.org.xrpl.rpc.v1.XRPDropsAmount\"|\n\tFee"
  "Levels\022\030\n\014median_level\030\001 \001(\004B\0020\001\022\031\n\rmini"
  "mum_level\030\002 \001(\004B\0020\001\022\035\n\021open_ledger_level"
  "\030\003 \001(\004B\0020\001\022\033\n\017reference_level\030\004 \001(\004B\0020\001B"
  "\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_sccs[4] = {
  &scc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base,
  &scc_info_FeeLevels_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base,
  &scc_info_GetFeeRequest_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base,
  &scc_info_GetFeeResponse_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto, "org/xrpl/rpc/v1/get_fee.proto", 748,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto, 4, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void GetFeeRequest::InitAsDefaultInstance() {
}
class GetFeeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFeeRequest::kClientIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFeeRequest::GetFeeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetFeeRequest)
}
GetFeeRequest::GetFeeRequest(const GetFeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetFeeRequest)
}

void GetFeeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeRequest_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base);
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFeeRequest::~GetFeeRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetFeeRequest)
  SharedDtor();
}

void GetFeeRequest::SharedDtor() {
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFeeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeRequest& GetFeeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeRequest_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base);
  return *internal_default_instance();
}


void GetFeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFeeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_ip(), ptr, ctx, "org.xrpl.rpc.v1.GetFeeRequest.client_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFeeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetFeeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_ip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), static_cast<int>(this->client_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetFeeRequest.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetFeeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetFeeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFeeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_ip = 1;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetFeeRequest.client_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetFeeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_ip = 1;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetFeeRequest.client_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetFeeRequest)
  return target;
}

size_t GetFeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetFeeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_ip = 1;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetFeeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetFeeRequest)
    MergeFrom(*source);
  }
}

void GetFeeRequest::MergeFrom(const GetFeeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
}

void GetFeeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeRequest::CopyFrom(const GetFeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeRequest::IsInitialized() const {
  return true;
}

void GetFeeRequest::Swap(GetFeeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFeeRequest::InternalSwap(GetFeeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeeResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetFeeResponse_default_instance_._instance.get_mutable()->fee_ = const_cast< ::org::xrpl::rpc::v1::Fee*>(
      ::org::xrpl::rpc::v1::Fee::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetFeeResponse_default_instance_._instance.get_mutable()->levels_ = const_cast< ::org::xrpl::rpc::v1::FeeLevels*>(
      ::org::xrpl::rpc::v1::FeeLevels::internal_default_instance());
}
class GetFeeResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Fee& fee(const GetFeeResponse* msg);
  static const ::org::xrpl::rpc::v1::FeeLevels& levels(const GetFeeResponse* msg);
};

const ::org::xrpl::rpc::v1::Fee&
GetFeeResponse::HasBitSetters::fee(const GetFeeResponse* msg) {
  return *msg->fee_;
}
const ::org::xrpl::rpc::v1::FeeLevels&
GetFeeResponse::HasBitSetters::levels(const GetFeeResponse* msg) {
  return *msg->levels_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFeeResponse::kCurrentLedgerSizeFieldNumber;
const int GetFeeResponse::kCurrentQueueSizeFieldNumber;
const int GetFeeResponse::kFeeFieldNumber;
const int GetFeeResponse::kExpectedLedgerSizeFieldNumber;
const int GetFeeResponse::kLedgerCurrentIndexFieldNumber;
const int GetFeeResponse::kLevelsFieldNumber;
const int GetFeeResponse::kMaxQueueSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFeeResponse::GetFeeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetFeeResponse)
}
GetFeeResponse::GetFeeResponse(const GetFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fee()) {
    fee_ = new ::org::xrpl::rpc::v1::Fee(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  if (from.has_levels()) {
    levels_ = new ::org::xrpl::rpc::v1::FeeLevels(*from.levels_);
  } else {
    levels_ = nullptr;
  }
  ::memcpy(&current_ledger_size_, &from.current_ledger_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ledger_current_index_) -
    reinterpret_cast<char*>(&current_ledger_size_)) + sizeof(ledger_current_index_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetFeeResponse)
}

void GetFeeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeResponse_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base);
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ledger_current_index_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(ledger_current_index_));
}

GetFeeResponse::~GetFeeResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetFeeResponse)
  SharedDtor();
}

void GetFeeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete fee_;
  if (this != internal_default_instance()) delete levels_;
}

void GetFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeResponse& GetFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeResponse_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base);
  return *internal_default_instance();
}


void GetFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && levels_ != nullptr) {
    delete levels_;
  }
  levels_ = nullptr;
  ::memset(&current_ledger_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ledger_current_index_) -
      reinterpret_cast<char*>(&current_ledger_size_)) + sizeof(ledger_current_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 current_ledger_size = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_ledger_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_queue_size = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Fee fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 expected_ledger_size = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expected_ledger_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ledger_current_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ledger_current_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.FeeLevels levels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_levels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_queue_size = 7 [jstype = JS_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFeeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetFeeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 current_ledger_size = 1 [jstype = JS_STRING];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_ledger_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 current_queue_size = 2 [jstype = JS_STRING];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Fee fee = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expected_ledger_size = 4 [jstype = JS_STRING];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_ledger_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ledger_current_index = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_current_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.FeeLevels levels = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_levels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_queue_size = 7 [jstype = JS_STRING];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetFeeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetFeeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFeeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_ledger_size = 1 [jstype = JS_STRING];
  if (this->current_ledger_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->current_ledger_size(), output);
  }

  // uint64 current_queue_size = 2 [jstype = JS_STRING];
  if (this->current_queue_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->current_queue_size(), output);
  }

  // .org.xrpl.rpc.v1.Fee fee = 3;
  if (this->has_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::fee(this), output);
  }

  // uint64 expected_ledger_size = 4 [jstype = JS_STRING];
  if (this->expected_ledger_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->expected_ledger_size(), output);
  }

  // uint32 ledger_current_index = 5;
  if (this->ledger_current_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->ledger_current_index(), output);
  }

  // .org.xrpl.rpc.v1.FeeLevels levels = 6;
  if (this->has_levels()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::levels(this), output);
  }

  // uint64 max_queue_size = 7 [jstype = JS_STRING];
  if (this->max_queue_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->max_queue_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetFeeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_ledger_size = 1 [jstype = JS_STRING];
  if (this->current_ledger_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->current_ledger_size(), target);
  }

  // uint64 current_queue_size = 2 [jstype = JS_STRING];
  if (this->current_queue_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->current_queue_size(), target);
  }

  // .org.xrpl.rpc.v1.Fee fee = 3;
  if (this->has_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::fee(this), target);
  }

  // uint64 expected_ledger_size = 4 [jstype = JS_STRING];
  if (this->expected_ledger_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->expected_ledger_size(), target);
  }

  // uint32 ledger_current_index = 5;
  if (this->ledger_current_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->ledger_current_index(), target);
  }

  // .org.xrpl.rpc.v1.FeeLevels levels = 6;
  if (this->has_levels()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::levels(this), target);
  }

  // uint64 max_queue_size = 7 [jstype = JS_STRING];
  if (this->max_queue_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->max_queue_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetFeeResponse)
  return target;
}

size_t GetFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetFeeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Fee fee = 3;
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // .org.xrpl.rpc.v1.FeeLevels levels = 6;
  if (this->has_levels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *levels_);
  }

  // uint64 current_ledger_size = 1 [jstype = JS_STRING];
  if (this->current_ledger_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->current_ledger_size());
  }

  // uint64 current_queue_size = 2 [jstype = JS_STRING];
  if (this->current_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->current_queue_size());
  }

  // uint64 expected_ledger_size = 4 [jstype = JS_STRING];
  if (this->expected_ledger_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->expected_ledger_size());
  }

  // uint64 max_queue_size = 7 [jstype = JS_STRING];
  if (this->max_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_queue_size());
  }

  // uint32 ledger_current_index = 5;
  if (this->ledger_current_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_current_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetFeeResponse)
    MergeFrom(*source);
  }
}

void GetFeeResponse::MergeFrom(const GetFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fee()) {
    mutable_fee()->::org::xrpl::rpc::v1::Fee::MergeFrom(from.fee());
  }
  if (from.has_levels()) {
    mutable_levels()->::org::xrpl::rpc::v1::FeeLevels::MergeFrom(from.levels());
  }
  if (from.current_ledger_size() != 0) {
    set_current_ledger_size(from.current_ledger_size());
  }
  if (from.current_queue_size() != 0) {
    set_current_queue_size(from.current_queue_size());
  }
  if (from.expected_ledger_size() != 0) {
    set_expected_ledger_size(from.expected_ledger_size());
  }
  if (from.max_queue_size() != 0) {
    set_max_queue_size(from.max_queue_size());
  }
  if (from.ledger_current_index() != 0) {
    set_ledger_current_index(from.ledger_current_index());
  }
}

void GetFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeResponse::CopyFrom(const GetFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeResponse::IsInitialized() const {
  return true;
}

void GetFeeResponse::Swap(GetFeeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFeeResponse::InternalSwap(GetFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fee_, other->fee_);
  swap(levels_, other->levels_);
  swap(current_ledger_size_, other->current_ledger_size_);
  swap(current_queue_size_, other->current_queue_size_);
  swap(expected_ledger_size_, other->expected_ledger_size_);
  swap(max_queue_size_, other->max_queue_size_);
  swap(ledger_current_index_, other->ledger_current_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fee::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Fee_default_instance_._instance.get_mutable()->base_fee_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_Fee_default_instance_._instance.get_mutable()->median_fee_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_Fee_default_instance_._instance.get_mutable()->minimum_fee_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_Fee_default_instance_._instance.get_mutable()->open_ledger_fee_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
}
class Fee::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& base_fee(const Fee* msg);
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& median_fee(const Fee* msg);
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& minimum_fee(const Fee* msg);
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& open_ledger_fee(const Fee* msg);
};

const ::org::xrpl::rpc::v1::XRPDropsAmount&
Fee::HasBitSetters::base_fee(const Fee* msg) {
  return *msg->base_fee_;
}
const ::org::xrpl::rpc::v1::XRPDropsAmount&
Fee::HasBitSetters::median_fee(const Fee* msg) {
  return *msg->median_fee_;
}
const ::org::xrpl::rpc::v1::XRPDropsAmount&
Fee::HasBitSetters::minimum_fee(const Fee* msg) {
  return *msg->minimum_fee_;
}
const ::org::xrpl::rpc::v1::XRPDropsAmount&
Fee::HasBitSetters::open_ledger_fee(const Fee* msg) {
  return *msg->open_ledger_fee_;
}
void Fee::clear_base_fee() {
  if (GetArenaNoVirtual() == nullptr && base_fee_ != nullptr) {
    delete base_fee_;
  }
  base_fee_ = nullptr;
}
void Fee::clear_median_fee() {
  if (GetArenaNoVirtual() == nullptr && median_fee_ != nullptr) {
    delete median_fee_;
  }
  median_fee_ = nullptr;
}
void Fee::clear_minimum_fee() {
  if (GetArenaNoVirtual() == nullptr && minimum_fee_ != nullptr) {
    delete minimum_fee_;
  }
  minimum_fee_ = nullptr;
}
void Fee::clear_open_ledger_fee() {
  if (GetArenaNoVirtual() == nullptr && open_ledger_fee_ != nullptr) {
    delete open_ledger_fee_;
  }
  open_ledger_fee_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fee::kBaseFeeFieldNumber;
const int Fee::kMedianFeeFieldNumber;
const int Fee::kMinimumFeeFieldNumber;
const int Fee::kOpenLedgerFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fee::Fee()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Fee)
}
Fee::Fee(const Fee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base_fee()) {
    base_fee_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.base_fee_);
  } else {
    base_fee_ = nullptr;
  }
  if (from.has_median_fee()) {
    median_fee_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.median_fee_);
  } else {
    median_fee_ = nullptr;
  }
  if (from.has_minimum_fee()) {
    minimum_fee_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.minimum_fee_);
  } else {
    minimum_fee_ = nullptr;
  }
  if (from.has_open_ledger_fee()) {
    open_ledger_fee_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.open_ledger_fee_);
  } else {
    open_ledger_fee_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Fee)
}

void Fee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base);
  ::memset(&base_fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_ledger_fee_) -
      reinterpret_cast<char*>(&base_fee_)) + sizeof(open_ledger_fee_));
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Fee)
  SharedDtor();
}

void Fee::SharedDtor() {
  if (this != internal_default_instance()) delete base_fee_;
  if (this != internal_default_instance()) delete median_fee_;
  if (this != internal_default_instance()) delete minimum_fee_;
  if (this != internal_default_instance()) delete open_ledger_fee_;
}

void Fee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fee& Fee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fee_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base);
  return *internal_default_instance();
}


void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Fee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && base_fee_ != nullptr) {
    delete base_fee_;
  }
  base_fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && median_fee_ != nullptr) {
    delete median_fee_;
  }
  median_fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && minimum_fee_ != nullptr) {
    delete minimum_fee_;
  }
  minimum_fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && open_ledger_fee_ != nullptr) {
    delete open_ledger_fee_;
  }
  open_ledger_fee_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.XRPDropsAmount base_fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.XRPDropsAmount median_fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_median_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.XRPDropsAmount minimum_fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_minimum_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.XRPDropsAmount open_ledger_fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_open_ledger_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fee::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Fee)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.XRPDropsAmount base_fee = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.XRPDropsAmount median_fee = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_median_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.XRPDropsAmount minimum_fee = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_minimum_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.XRPDropsAmount open_ledger_fee = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_open_ledger_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Fee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Fee)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fee::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Fee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.XRPDropsAmount base_fee = 1;
  if (this->has_base_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::base_fee(this), output);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount median_fee = 2;
  if (this->has_median_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::median_fee(this), output);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount minimum_fee = 3;
  if (this->has_minimum_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::minimum_fee(this), output);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount open_ledger_fee = 4;
  if (this->has_open_ledger_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::open_ledger_fee(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Fee)
}

::PROTOBUF_NAMESPACE_ID::uint8* Fee::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Fee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.XRPDropsAmount base_fee = 1;
  if (this->has_base_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::base_fee(this), target);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount median_fee = 2;
  if (this->has_median_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::median_fee(this), target);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount minimum_fee = 3;
  if (this->has_minimum_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::minimum_fee(this), target);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount open_ledger_fee = 4;
  if (this->has_open_ledger_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::open_ledger_fee(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Fee)
  return target;
}

size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Fee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.XRPDropsAmount base_fee = 1;
  if (this->has_base_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_fee_);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount median_fee = 2;
  if (this->has_median_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *median_fee_);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount minimum_fee = 3;
  if (this->has_minimum_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimum_fee_);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount open_ledger_fee = 4;
  if (this->has_open_ledger_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_ledger_fee_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  const Fee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Fee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Fee)
    MergeFrom(*source);
  }
}

void Fee::MergeFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_fee()) {
    mutable_base_fee()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.base_fee());
  }
  if (from.has_median_fee()) {
    mutable_median_fee()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.median_fee());
  }
  if (from.has_minimum_fee()) {
    mutable_minimum_fee()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.minimum_fee());
  }
  if (from.has_open_ledger_fee()) {
    mutable_open_ledger_fee()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.open_ledger_fee());
  }
}

void Fee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  return true;
}

void Fee::Swap(Fee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fee::InternalSwap(Fee* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_fee_, other->base_fee_);
  swap(median_fee_, other->median_fee_);
  swap(minimum_fee_, other->minimum_fee_);
  swap(open_ledger_fee_, other->open_ledger_fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeeLevels::InitAsDefaultInstance() {
}
class FeeLevels::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeeLevels::kMedianLevelFieldNumber;
const int FeeLevels::kMinimumLevelFieldNumber;
const int FeeLevels::kOpenLedgerLevelFieldNumber;
const int FeeLevels::kReferenceLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeeLevels::FeeLevels()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.FeeLevels)
}
FeeLevels::FeeLevels(const FeeLevels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&median_level_, &from.median_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_level_) -
    reinterpret_cast<char*>(&median_level_)) + sizeof(reference_level_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.FeeLevels)
}

void FeeLevels::SharedCtor() {
  ::memset(&median_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_level_) -
      reinterpret_cast<char*>(&median_level_)) + sizeof(reference_level_));
}

FeeLevels::~FeeLevels() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.FeeLevels)
  SharedDtor();
}

void FeeLevels::SharedDtor() {
}

void FeeLevels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeLevels& FeeLevels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeLevels_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.base);
  return *internal_default_instance();
}


void FeeLevels::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.FeeLevels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&median_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_level_) -
      reinterpret_cast<char*>(&median_level_)) + sizeof(reference_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeeLevels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 median_level = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          median_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 minimum_level = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minimum_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open_ledger_level = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ledger_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reference_level = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reference_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeeLevels::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.FeeLevels)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 median_level = 1 [jstype = JS_STRING];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &median_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 minimum_level = 2 [jstype = JS_STRING];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 open_ledger_level = 3 [jstype = JS_STRING];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_ledger_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reference_level = 4 [jstype = JS_STRING];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reference_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.FeeLevels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.FeeLevels)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeeLevels::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.FeeLevels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 median_level = 1 [jstype = JS_STRING];
  if (this->median_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->median_level(), output);
  }

  // uint64 minimum_level = 2 [jstype = JS_STRING];
  if (this->minimum_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->minimum_level(), output);
  }

  // uint64 open_ledger_level = 3 [jstype = JS_STRING];
  if (this->open_ledger_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->open_ledger_level(), output);
  }

  // uint64 reference_level = 4 [jstype = JS_STRING];
  if (this->reference_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->reference_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.FeeLevels)
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeLevels::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.FeeLevels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 median_level = 1 [jstype = JS_STRING];
  if (this->median_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->median_level(), target);
  }

  // uint64 minimum_level = 2 [jstype = JS_STRING];
  if (this->minimum_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->minimum_level(), target);
  }

  // uint64 open_ledger_level = 3 [jstype = JS_STRING];
  if (this->open_ledger_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->open_ledger_level(), target);
  }

  // uint64 reference_level = 4 [jstype = JS_STRING];
  if (this->reference_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->reference_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.FeeLevels)
  return target;
}

size_t FeeLevels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.FeeLevels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 median_level = 1 [jstype = JS_STRING];
  if (this->median_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->median_level());
  }

  // uint64 minimum_level = 2 [jstype = JS_STRING];
  if (this->minimum_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->minimum_level());
  }

  // uint64 open_ledger_level = 3 [jstype = JS_STRING];
  if (this->open_ledger_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->open_ledger_level());
  }

  // uint64 reference_level = 4 [jstype = JS_STRING];
  if (this->reference_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->reference_level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeLevels::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.FeeLevels)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeLevels* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeLevels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.FeeLevels)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.FeeLevels)
    MergeFrom(*source);
  }
}

void FeeLevels::MergeFrom(const FeeLevels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.FeeLevels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.median_level() != 0) {
    set_median_level(from.median_level());
  }
  if (from.minimum_level() != 0) {
    set_minimum_level(from.minimum_level());
  }
  if (from.open_ledger_level() != 0) {
    set_open_ledger_level(from.open_ledger_level());
  }
  if (from.reference_level() != 0) {
    set_reference_level(from.reference_level());
  }
}

void FeeLevels::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.FeeLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeLevels::CopyFrom(const FeeLevels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.FeeLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeLevels::IsInitialized() const {
  return true;
}

void FeeLevels::Swap(FeeLevels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeeLevels::InternalSwap(FeeLevels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(median_level_, other->median_level_);
  swap(minimum_level_, other->minimum_level_);
  swap(open_ledger_level_, other->open_ledger_level_);
  swap(reference_level_, other->reference_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeLevels::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetFeeRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetFeeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetFeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetFeeResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetFeeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Fee* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Fee >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Fee >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::FeeLevels* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::FeeLevels >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::FeeLevels >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
