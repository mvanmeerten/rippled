// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger_entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/ledger.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetLedgerEntryRequest;
class GetLedgerEntryRequestDefaultTypeInternal;
extern GetLedgerEntryRequestDefaultTypeInternal _GetLedgerEntryRequest_default_instance_;
class GetLedgerEntryResponse;
class GetLedgerEntryResponseDefaultTypeInternal;
extern GetLedgerEntryResponseDefaultTypeInternal _GetLedgerEntryResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::GetLedgerEntryRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetLedgerEntryRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::GetLedgerEntryResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetLedgerEntryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetLedgerEntryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetLedgerEntryRequest) */ {
 public:
  GetLedgerEntryRequest();
  virtual ~GetLedgerEntryRequest();

  GetLedgerEntryRequest(const GetLedgerEntryRequest& from);
  GetLedgerEntryRequest(GetLedgerEntryRequest&& from) noexcept
    : GetLedgerEntryRequest() {
    *this = ::std::move(from);
  }

  inline GetLedgerEntryRequest& operator=(const GetLedgerEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLedgerEntryRequest& operator=(GetLedgerEntryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLedgerEntryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLedgerEntryRequest* internal_default_instance() {
    return reinterpret_cast<const GetLedgerEntryRequest*>(
               &_GetLedgerEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetLedgerEntryRequest* other);
  friend void swap(GetLedgerEntryRequest& a, GetLedgerEntryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLedgerEntryRequest* New() const final {
    return CreateMaybeMessage<GetLedgerEntryRequest>(nullptr);
  }

  GetLedgerEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLedgerEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLedgerEntryRequest& from);
  void MergeFrom(const GetLedgerEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLedgerEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetLedgerEntryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string client_ip = 3;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 3;
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  bool has_ledger() const;
  void clear_ledger();
  static const int kLedgerFieldNumber = 2;
  const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger() const;
  ::org::xrpl::rpc::v1::LedgerSpecifier* release_ledger();
  ::org::xrpl::rpc::v1::LedgerSpecifier* mutable_ledger();
  void set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetLedgerEntryRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::org::xrpl::rpc::v1::LedgerSpecifier* ledger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto;
};
// -------------------------------------------------------------------

class GetLedgerEntryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetLedgerEntryResponse) */ {
 public:
  GetLedgerEntryResponse();
  virtual ~GetLedgerEntryResponse();

  GetLedgerEntryResponse(const GetLedgerEntryResponse& from);
  GetLedgerEntryResponse(GetLedgerEntryResponse&& from) noexcept
    : GetLedgerEntryResponse() {
    *this = ::std::move(from);
  }

  inline GetLedgerEntryResponse& operator=(const GetLedgerEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLedgerEntryResponse& operator=(GetLedgerEntryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLedgerEntryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLedgerEntryResponse* internal_default_instance() {
    return reinterpret_cast<const GetLedgerEntryResponse*>(
               &_GetLedgerEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetLedgerEntryResponse* other);
  friend void swap(GetLedgerEntryResponse& a, GetLedgerEntryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLedgerEntryResponse* New() const final {
    return CreateMaybeMessage<GetLedgerEntryResponse>(nullptr);
  }

  GetLedgerEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLedgerEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLedgerEntryResponse& from);
  void MergeFrom(const GetLedgerEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLedgerEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetLedgerEntryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
  bool has_ledger_object() const;
  void clear_ledger_object();
  static const int kLedgerObjectFieldNumber = 1;
  const ::org::xrpl::rpc::v1::RawLedgerObject& ledger_object() const;
  ::org::xrpl::rpc::v1::RawLedgerObject* release_ledger_object();
  ::org::xrpl::rpc::v1::RawLedgerObject* mutable_ledger_object();
  void set_allocated_ledger_object(::org::xrpl::rpc::v1::RawLedgerObject* ledger_object);

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  bool has_ledger() const;
  void clear_ledger();
  static const int kLedgerFieldNumber = 2;
  const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger() const;
  ::org::xrpl::rpc::v1::LedgerSpecifier* release_ledger();
  ::org::xrpl::rpc::v1::LedgerSpecifier* mutable_ledger();
  void set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetLedgerEntryResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::RawLedgerObject* ledger_object_;
  ::org::xrpl::rpc::v1::LedgerSpecifier* ledger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetLedgerEntryRequest

// bytes key = 1;
inline void GetLedgerEntryRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerEntryRequest::key() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
  return key_.GetNoArena();
}
inline void GetLedgerEntryRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
}
inline void GetLedgerEntryRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
}
inline void GetLedgerEntryRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
}
inline void GetLedgerEntryRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
}
inline std::string* GetLedgerEntryRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerEntryRequest::release_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerEntryRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerEntryRequest.key)
}

// .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
inline bool GetLedgerEntryRequest::has_ledger() const {
  return this != internal_default_instance() && ledger_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerSpecifier& GetLedgerEntryRequest::ledger() const {
  const ::org::xrpl::rpc::v1::LedgerSpecifier* p = ledger_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerEntryRequest.ledger)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      &::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerEntryRequest::release_ledger() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerEntryRequest.ledger)
  
  ::org::xrpl::rpc::v1::LedgerSpecifier* temp = ledger_;
  ledger_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerEntryRequest::mutable_ledger() {
  
  if (ledger_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerSpecifier>(GetArenaNoVirtual());
    ledger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerEntryRequest.ledger)
  return ledger_;
}
inline void GetLedgerEntryRequest::set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_);
  }
  if (ledger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger, submessage_arena);
    }
    
  } else {
    
  }
  ledger_ = ledger;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerEntryRequest.ledger)
}

// string client_ip = 3;
inline void GetLedgerEntryRequest::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerEntryRequest::client_ip() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
  return client_ip_.GetNoArena();
}
inline void GetLedgerEntryRequest::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
}
inline void GetLedgerEntryRequest::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
}
inline void GetLedgerEntryRequest::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
}
inline void GetLedgerEntryRequest::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
}
inline std::string* GetLedgerEntryRequest::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerEntryRequest::release_client_ip() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerEntryRequest::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip)
}

// -------------------------------------------------------------------

// GetLedgerEntryResponse

// .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
inline bool GetLedgerEntryResponse::has_ledger_object() const {
  return this != internal_default_instance() && ledger_object_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::RawLedgerObject& GetLedgerEntryResponse::ledger_object() const {
  const ::org::xrpl::rpc::v1::RawLedgerObject* p = ledger_object_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger_object)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::RawLedgerObject*>(
      &::org::xrpl::rpc::v1::_RawLedgerObject_default_instance_);
}
inline ::org::xrpl::rpc::v1::RawLedgerObject* GetLedgerEntryResponse::release_ledger_object() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger_object)
  
  ::org::xrpl::rpc::v1::RawLedgerObject* temp = ledger_object_;
  ledger_object_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::RawLedgerObject* GetLedgerEntryResponse::mutable_ledger_object() {
  
  if (ledger_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::RawLedgerObject>(GetArenaNoVirtual());
    ledger_object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger_object)
  return ledger_object_;
}
inline void GetLedgerEntryResponse::set_allocated_ledger_object(::org::xrpl::rpc::v1::RawLedgerObject* ledger_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_object_);
  }
  if (ledger_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger_object, submessage_arena);
    }
    
  } else {
    
  }
  ledger_object_ = ledger_object;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger_object)
}

// .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
inline bool GetLedgerEntryResponse::has_ledger() const {
  return this != internal_default_instance() && ledger_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerSpecifier& GetLedgerEntryResponse::ledger() const {
  const ::org::xrpl::rpc::v1::LedgerSpecifier* p = ledger_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      &::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerEntryResponse::release_ledger() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger)
  
  ::org::xrpl::rpc::v1::LedgerSpecifier* temp = ledger_;
  ledger_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerEntryResponse::mutable_ledger() {
  
  if (ledger_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerSpecifier>(GetArenaNoVirtual());
    ledger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger)
  return ledger_;
}
inline void GetLedgerEntryResponse::set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_);
  }
  if (ledger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger, submessage_arena);
    }
    
  } else {
    
  }
  ledger_ = ledger;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerEntryResponse.ledger)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto
