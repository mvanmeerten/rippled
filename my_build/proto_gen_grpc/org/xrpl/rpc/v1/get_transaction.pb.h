// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/meta.pb.h"
#include "org/xrpl/rpc/v1/ledger.pb.h"
#include "org/xrpl/rpc/v1/transaction.pb.h"
#include "org/xrpl/rpc/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetTransactionRequest;
class GetTransactionRequestDefaultTypeInternal;
extern GetTransactionRequestDefaultTypeInternal _GetTransactionRequest_default_instance_;
class GetTransactionResponse;
class GetTransactionResponseDefaultTypeInternal;
extern GetTransactionResponseDefaultTypeInternal _GetTransactionResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::GetTransactionRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetTransactionRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::GetTransactionResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetTransactionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetTransactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetTransactionRequest) */ {
 public:
  GetTransactionRequest();
  virtual ~GetTransactionRequest();

  GetTransactionRequest(const GetTransactionRequest& from);
  GetTransactionRequest(GetTransactionRequest&& from) noexcept
    : GetTransactionRequest() {
    *this = ::std::move(from);
  }

  inline GetTransactionRequest& operator=(const GetTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionRequest& operator=(GetTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransactionRequest*>(
               &_GetTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetTransactionRequest* other);
  friend void swap(GetTransactionRequest& a, GetTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionRequest* New() const final {
    return CreateMaybeMessage<GetTransactionRequest>(nullptr);
  }

  GetTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionRequest& from);
  void MergeFrom(const GetTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetTransactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // string client_ip = 4;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 4;
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
  bool has_ledger_range() const;
  void clear_ledger_range();
  static const int kLedgerRangeFieldNumber = 3;
  const ::org::xrpl::rpc::v1::LedgerRange& ledger_range() const;
  ::org::xrpl::rpc::v1::LedgerRange* release_ledger_range();
  ::org::xrpl::rpc::v1::LedgerRange* mutable_ledger_range();
  void set_allocated_ledger_range(::org::xrpl::rpc::v1::LedgerRange* ledger_range);

  // bool binary = 2;
  void clear_binary();
  static const int kBinaryFieldNumber = 2;
  bool binary() const;
  void set_binary(bool value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetTransactionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::org::xrpl::rpc::v1::LedgerRange* ledger_range_;
  bool binary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetTransactionResponse) */ {
 public:
  GetTransactionResponse();
  virtual ~GetTransactionResponse();

  GetTransactionResponse(const GetTransactionResponse& from);
  GetTransactionResponse(GetTransactionResponse&& from) noexcept
    : GetTransactionResponse() {
    *this = ::std::move(from);
  }

  inline GetTransactionResponse& operator=(const GetTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionResponse& operator=(GetTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionResponse& default_instance();

  enum SerializedTransactionCase {
    kTransaction = 1,
    kTransactionBinary = 2,
    SERIALIZED_TRANSACTION_NOT_SET = 0,
  };

  enum SerializedMetaCase {
    kMeta = 6,
    kMetaBinary = 7,
    SERIALIZED_META_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const GetTransactionResponse*>(
               &_GetTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetTransactionResponse* other);
  friend void swap(GetTransactionResponse& a, GetTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionResponse* New() const final {
    return CreateMaybeMessage<GetTransactionResponse>(nullptr);
  }

  GetTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionResponse& from);
  void MergeFrom(const GetTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetTransactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 4;
  void clear_hash();
  static const int kHashFieldNumber = 4;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // .org.xrpl.rpc.v1.Date date = 8;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 8;
  const ::org::xrpl::rpc::v1::Date& date() const;
  ::org::xrpl::rpc::v1::Date* release_date();
  ::org::xrpl::rpc::v1::Date* mutable_date();
  void set_allocated_date(::org::xrpl::rpc::v1::Date* date);

  // uint32 ledger_index = 3;
  void clear_ledger_index();
  static const int kLedgerIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index() const;
  void set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool validated = 5;
  void clear_validated();
  static const int kValidatedFieldNumber = 5;
  bool validated() const;
  void set_validated(bool value);

  // .org.xrpl.rpc.v1.Transaction transaction = 1;
  bool has_transaction() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Transaction& transaction() const;
  ::org::xrpl::rpc::v1::Transaction* release_transaction();
  ::org::xrpl::rpc::v1::Transaction* mutable_transaction();
  void set_allocated_transaction(::org::xrpl::rpc::v1::Transaction* transaction);

  // bytes transaction_binary = 2;
  private:
  bool has_transaction_binary() const;
  public:
  void clear_transaction_binary();
  static const int kTransactionBinaryFieldNumber = 2;
  const std::string& transaction_binary() const;
  void set_transaction_binary(const std::string& value);
  void set_transaction_binary(std::string&& value);
  void set_transaction_binary(const char* value);
  void set_transaction_binary(const void* value, size_t size);
  std::string* mutable_transaction_binary();
  std::string* release_transaction_binary();
  void set_allocated_transaction_binary(std::string* transaction_binary);

  // .org.xrpl.rpc.v1.Meta meta = 6;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 6;
  const ::org::xrpl::rpc::v1::Meta& meta() const;
  ::org::xrpl::rpc::v1::Meta* release_meta();
  ::org::xrpl::rpc::v1::Meta* mutable_meta();
  void set_allocated_meta(::org::xrpl::rpc::v1::Meta* meta);

  // bytes meta_binary = 7;
  private:
  bool has_meta_binary() const;
  public:
  void clear_meta_binary();
  static const int kMetaBinaryFieldNumber = 7;
  const std::string& meta_binary() const;
  void set_meta_binary(const std::string& value);
  void set_meta_binary(std::string&& value);
  void set_meta_binary(const char* value);
  void set_meta_binary(const void* value, size_t size);
  std::string* mutable_meta_binary();
  std::string* release_meta_binary();
  void set_allocated_meta_binary(std::string* meta_binary);

  void clear_serialized_transaction();
  SerializedTransactionCase serialized_transaction_case() const;
  void clear_serialized_meta();
  SerializedMetaCase serialized_meta_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetTransactionResponse)
 private:
  class HasBitSetters;
  void set_has_transaction();
  void set_has_transaction_binary();
  void set_has_meta();
  void set_has_meta_binary();

  inline bool has_serialized_transaction() const;
  inline void clear_has_serialized_transaction();

  inline bool has_serialized_meta() const;
  inline void clear_has_serialized_meta();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::org::xrpl::rpc::v1::Date* date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_;
  bool validated_;
  union SerializedTransactionUnion {
    SerializedTransactionUnion() {}
    ::org::xrpl::rpc::v1::Transaction* transaction_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_binary_;
  } serialized_transaction_;
  union SerializedMetaUnion {
    SerializedMetaUnion() {}
    ::org::xrpl::rpc::v1::Meta* meta_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_binary_;
  } serialized_meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTransactionRequest

// bytes hash = 1;
inline void GetTransactionRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionRequest::hash() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionRequest.hash)
  return hash_.GetNoArena();
}
inline void GetTransactionRequest::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionRequest.hash)
}
inline void GetTransactionRequest::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetTransactionRequest.hash)
}
inline void GetTransactionRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetTransactionRequest.hash)
}
inline void GetTransactionRequest::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetTransactionRequest.hash)
}
inline std::string* GetTransactionRequest::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionRequest.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionRequest::release_hash() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionRequest.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionRequest.hash)
}

// bool binary = 2;
inline void GetTransactionRequest::clear_binary() {
  binary_ = false;
}
inline bool GetTransactionRequest::binary() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionRequest.binary)
  return binary_;
}
inline void GetTransactionRequest::set_binary(bool value) {
  
  binary_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionRequest.binary)
}

// .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
inline bool GetTransactionRequest::has_ledger_range() const {
  return this != internal_default_instance() && ledger_range_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerRange& GetTransactionRequest::ledger_range() const {
  const ::org::xrpl::rpc::v1::LedgerRange* p = ledger_range_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionRequest.ledger_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerRange*>(
      &::org::xrpl::rpc::v1::_LedgerRange_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerRange* GetTransactionRequest::release_ledger_range() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionRequest.ledger_range)
  
  ::org::xrpl::rpc::v1::LedgerRange* temp = ledger_range_;
  ledger_range_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerRange* GetTransactionRequest::mutable_ledger_range() {
  
  if (ledger_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerRange>(GetArenaNoVirtual());
    ledger_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionRequest.ledger_range)
  return ledger_range_;
}
inline void GetTransactionRequest::set_allocated_ledger_range(::org::xrpl::rpc::v1::LedgerRange* ledger_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_range_);
  }
  if (ledger_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger_range, submessage_arena);
    }
    
  } else {
    
  }
  ledger_range_ = ledger_range;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionRequest.ledger_range)
}

// string client_ip = 4;
inline void GetTransactionRequest::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionRequest::client_ip() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
  return client_ip_.GetNoArena();
}
inline void GetTransactionRequest::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
}
inline void GetTransactionRequest::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
}
inline void GetTransactionRequest::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
}
inline void GetTransactionRequest::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
}
inline std::string* GetTransactionRequest::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionRequest::release_client_ip() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionRequest::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionRequest.client_ip)
}

// -------------------------------------------------------------------

// GetTransactionResponse

// .org.xrpl.rpc.v1.Transaction transaction = 1;
inline bool GetTransactionResponse::has_transaction() const {
  return serialized_transaction_case() == kTransaction;
}
inline void GetTransactionResponse::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline ::org::xrpl::rpc::v1::Transaction* GetTransactionResponse::release_transaction() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionResponse.transaction)
  if (has_transaction()) {
    clear_has_serialized_transaction();
      ::org::xrpl::rpc::v1::Transaction* temp = serialized_transaction_.transaction_;
    serialized_transaction_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::Transaction& GetTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.transaction)
  return has_transaction()
      ? *serialized_transaction_.transaction_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::Transaction*>(&::org::xrpl::rpc::v1::_Transaction_default_instance_);
}
inline ::org::xrpl::rpc::v1::Transaction* GetTransactionResponse::mutable_transaction() {
  if (!has_transaction()) {
    clear_serialized_transaction();
    set_has_transaction();
    serialized_transaction_.transaction_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::Transaction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionResponse.transaction)
  return serialized_transaction_.transaction_;
}

// bytes transaction_binary = 2;
inline bool GetTransactionResponse::has_transaction_binary() const {
  return serialized_transaction_case() == kTransactionBinary;
}
inline void GetTransactionResponse::set_has_transaction_binary() {
  _oneof_case_[0] = kTransactionBinary;
}
inline void GetTransactionResponse::clear_transaction_binary() {
  if (has_transaction_binary()) {
    serialized_transaction_.transaction_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_serialized_transaction();
  }
}
inline const std::string& GetTransactionResponse::transaction_binary() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
  if (has_transaction_binary()) {
    return serialized_transaction_.transaction_binary_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetTransactionResponse::set_transaction_binary(const std::string& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
  if (!has_transaction_binary()) {
    clear_serialized_transaction();
    set_has_transaction_binary();
    serialized_transaction_.transaction_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_transaction_.transaction_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
}
inline void GetTransactionResponse::set_transaction_binary(std::string&& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
  if (!has_transaction_binary()) {
    clear_serialized_transaction();
    set_has_transaction_binary();
    serialized_transaction_.transaction_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_transaction_.transaction_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
}
inline void GetTransactionResponse::set_transaction_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_transaction_binary()) {
    clear_serialized_transaction();
    set_has_transaction_binary();
    serialized_transaction_.transaction_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_transaction_.transaction_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
}
inline void GetTransactionResponse::set_transaction_binary(const void* value, size_t size) {
  if (!has_transaction_binary()) {
    clear_serialized_transaction();
    set_has_transaction_binary();
    serialized_transaction_.transaction_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_transaction_.transaction_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
}
inline std::string* GetTransactionResponse::mutable_transaction_binary() {
  if (!has_transaction_binary()) {
    clear_serialized_transaction();
    set_has_transaction_binary();
    serialized_transaction_.transaction_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
  return serialized_transaction_.transaction_binary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionResponse::release_transaction_binary() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
  if (has_transaction_binary()) {
    clear_has_serialized_transaction();
    return serialized_transaction_.transaction_binary_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void GetTransactionResponse::set_allocated_transaction_binary(std::string* transaction_binary) {
  if (has_serialized_transaction()) {
    clear_serialized_transaction();
  }
  if (transaction_binary != nullptr) {
    set_has_transaction_binary();
    serialized_transaction_.transaction_binary_.UnsafeSetDefault(transaction_binary);
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionResponse.transaction_binary)
}

// uint32 ledger_index = 3;
inline void GetTransactionResponse::clear_ledger_index() {
  ledger_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTransactionResponse::ledger_index() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.ledger_index)
  return ledger_index_;
}
inline void GetTransactionResponse::set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.ledger_index)
}

// bytes hash = 4;
inline void GetTransactionResponse::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionResponse::hash() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.hash)
  return hash_.GetNoArena();
}
inline void GetTransactionResponse::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.hash)
}
inline void GetTransactionResponse::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetTransactionResponse.hash)
}
inline void GetTransactionResponse::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetTransactionResponse.hash)
}
inline void GetTransactionResponse::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetTransactionResponse.hash)
}
inline std::string* GetTransactionResponse::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionResponse.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionResponse::release_hash() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionResponse.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionResponse.hash)
}

// bool validated = 5;
inline void GetTransactionResponse::clear_validated() {
  validated_ = false;
}
inline bool GetTransactionResponse::validated() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.validated)
  return validated_;
}
inline void GetTransactionResponse::set_validated(bool value) {
  
  validated_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.validated)
}

// .org.xrpl.rpc.v1.Meta meta = 6;
inline bool GetTransactionResponse::has_meta() const {
  return serialized_meta_case() == kMeta;
}
inline void GetTransactionResponse::set_has_meta() {
  _oneof_case_[1] = kMeta;
}
inline ::org::xrpl::rpc::v1::Meta* GetTransactionResponse::release_meta() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionResponse.meta)
  if (has_meta()) {
    clear_has_serialized_meta();
      ::org::xrpl::rpc::v1::Meta* temp = serialized_meta_.meta_;
    serialized_meta_.meta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::Meta& GetTransactionResponse::meta() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.meta)
  return has_meta()
      ? *serialized_meta_.meta_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::Meta*>(&::org::xrpl::rpc::v1::_Meta_default_instance_);
}
inline ::org::xrpl::rpc::v1::Meta* GetTransactionResponse::mutable_meta() {
  if (!has_meta()) {
    clear_serialized_meta();
    set_has_meta();
    serialized_meta_.meta_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::Meta >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionResponse.meta)
  return serialized_meta_.meta_;
}

// bytes meta_binary = 7;
inline bool GetTransactionResponse::has_meta_binary() const {
  return serialized_meta_case() == kMetaBinary;
}
inline void GetTransactionResponse::set_has_meta_binary() {
  _oneof_case_[1] = kMetaBinary;
}
inline void GetTransactionResponse::clear_meta_binary() {
  if (has_meta_binary()) {
    serialized_meta_.meta_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_serialized_meta();
  }
}
inline const std::string& GetTransactionResponse::meta_binary() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
  if (has_meta_binary()) {
    return serialized_meta_.meta_binary_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetTransactionResponse::set_meta_binary(const std::string& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
  if (!has_meta_binary()) {
    clear_serialized_meta();
    set_has_meta_binary();
    serialized_meta_.meta_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_meta_.meta_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
}
inline void GetTransactionResponse::set_meta_binary(std::string&& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
  if (!has_meta_binary()) {
    clear_serialized_meta();
    set_has_meta_binary();
    serialized_meta_.meta_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_meta_.meta_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
}
inline void GetTransactionResponse::set_meta_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_meta_binary()) {
    clear_serialized_meta();
    set_has_meta_binary();
    serialized_meta_.meta_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_meta_.meta_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
}
inline void GetTransactionResponse::set_meta_binary(const void* value, size_t size) {
  if (!has_meta_binary()) {
    clear_serialized_meta();
    set_has_meta_binary();
    serialized_meta_.meta_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  serialized_meta_.meta_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
}
inline std::string* GetTransactionResponse::mutable_meta_binary() {
  if (!has_meta_binary()) {
    clear_serialized_meta();
    set_has_meta_binary();
    serialized_meta_.meta_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
  return serialized_meta_.meta_binary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionResponse::release_meta_binary() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
  if (has_meta_binary()) {
    clear_has_serialized_meta();
    return serialized_meta_.meta_binary_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void GetTransactionResponse::set_allocated_meta_binary(std::string* meta_binary) {
  if (has_serialized_meta()) {
    clear_serialized_meta();
  }
  if (meta_binary != nullptr) {
    set_has_meta_binary();
    serialized_meta_.meta_binary_.UnsafeSetDefault(meta_binary);
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionResponse.meta_binary)
}

// .org.xrpl.rpc.v1.Date date = 8;
inline bool GetTransactionResponse::has_date() const {
  return this != internal_default_instance() && date_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Date& GetTransactionResponse::date() const {
  const ::org::xrpl::rpc::v1::Date* p = date_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetTransactionResponse.date)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Date*>(
      &::org::xrpl::rpc::v1::_Date_default_instance_);
}
inline ::org::xrpl::rpc::v1::Date* GetTransactionResponse::release_date() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetTransactionResponse.date)
  
  ::org::xrpl::rpc::v1::Date* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Date* GetTransactionResponse::mutable_date() {
  
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Date>(GetArenaNoVirtual());
    date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetTransactionResponse.date)
  return date_;
}
inline void GetTransactionResponse::set_allocated_date(::org::xrpl::rpc::v1::Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetTransactionResponse.date)
}

inline bool GetTransactionResponse::has_serialized_transaction() const {
  return serialized_transaction_case() != SERIALIZED_TRANSACTION_NOT_SET;
}
inline void GetTransactionResponse::clear_has_serialized_transaction() {
  _oneof_case_[0] = SERIALIZED_TRANSACTION_NOT_SET;
}
inline bool GetTransactionResponse::has_serialized_meta() const {
  return serialized_meta_case() != SERIALIZED_META_NOT_SET;
}
inline void GetTransactionResponse::clear_has_serialized_meta() {
  _oneof_case_[1] = SERIALIZED_META_NOT_SET;
}
inline GetTransactionResponse::SerializedTransactionCase GetTransactionResponse::serialized_transaction_case() const {
  return GetTransactionResponse::SerializedTransactionCase(_oneof_case_[0]);
}
inline GetTransactionResponse::SerializedMetaCase GetTransactionResponse::serialized_meta_case() const {
  return GetTransactionResponse::SerializedMetaCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto
