// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/common.pb.h"
#include "org/xrpl/rpc/v1/amount.pb.h"
#include "org/xrpl/rpc/v1/account.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class AccountDelete;
class AccountDeleteDefaultTypeInternal;
extern AccountDeleteDefaultTypeInternal _AccountDelete_default_instance_;
class AccountSet;
class AccountSetDefaultTypeInternal;
extern AccountSetDefaultTypeInternal _AccountSet_default_instance_;
class CheckCancel;
class CheckCancelDefaultTypeInternal;
extern CheckCancelDefaultTypeInternal _CheckCancel_default_instance_;
class CheckCash;
class CheckCashDefaultTypeInternal;
extern CheckCashDefaultTypeInternal _CheckCash_default_instance_;
class CheckCreate;
class CheckCreateDefaultTypeInternal;
extern CheckCreateDefaultTypeInternal _CheckCreate_default_instance_;
class DepositPreauth;
class DepositPreauthDefaultTypeInternal;
extern DepositPreauthDefaultTypeInternal _DepositPreauth_default_instance_;
class EscrowCancel;
class EscrowCancelDefaultTypeInternal;
extern EscrowCancelDefaultTypeInternal _EscrowCancel_default_instance_;
class EscrowCreate;
class EscrowCreateDefaultTypeInternal;
extern EscrowCreateDefaultTypeInternal _EscrowCreate_default_instance_;
class EscrowFinish;
class EscrowFinishDefaultTypeInternal;
extern EscrowFinishDefaultTypeInternal _EscrowFinish_default_instance_;
class Memo;
class MemoDefaultTypeInternal;
extern MemoDefaultTypeInternal _Memo_default_instance_;
class OfferCancel;
class OfferCancelDefaultTypeInternal;
extern OfferCancelDefaultTypeInternal _OfferCancel_default_instance_;
class OfferCreate;
class OfferCreateDefaultTypeInternal;
extern OfferCreateDefaultTypeInternal _OfferCreate_default_instance_;
class Payment;
class PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;
class PaymentChannelClaim;
class PaymentChannelClaimDefaultTypeInternal;
extern PaymentChannelClaimDefaultTypeInternal _PaymentChannelClaim_default_instance_;
class PaymentChannelCreate;
class PaymentChannelCreateDefaultTypeInternal;
extern PaymentChannelCreateDefaultTypeInternal _PaymentChannelCreate_default_instance_;
class PaymentChannelFund;
class PaymentChannelFundDefaultTypeInternal;
extern PaymentChannelFundDefaultTypeInternal _PaymentChannelFund_default_instance_;
class Payment_Path;
class Payment_PathDefaultTypeInternal;
extern Payment_PathDefaultTypeInternal _Payment_Path_default_instance_;
class Payment_PathElement;
class Payment_PathElementDefaultTypeInternal;
extern Payment_PathElementDefaultTypeInternal _Payment_PathElement_default_instance_;
class SetRegularKey;
class SetRegularKeyDefaultTypeInternal;
extern SetRegularKeyDefaultTypeInternal _SetRegularKey_default_instance_;
class Signer;
class SignerDefaultTypeInternal;
extern SignerDefaultTypeInternal _Signer_default_instance_;
class SignerListSet;
class SignerListSetDefaultTypeInternal;
extern SignerListSetDefaultTypeInternal _SignerListSet_default_instance_;
class TicketCreate;
class TicketCreateDefaultTypeInternal;
extern TicketCreateDefaultTypeInternal _TicketCreate_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TrustSet;
class TrustSetDefaultTypeInternal;
extern TrustSetDefaultTypeInternal _TrustSet_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::AccountDelete* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::AccountDelete>(Arena*);
template<> ::org::xrpl::rpc::v1::AccountSet* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::AccountSet>(Arena*);
template<> ::org::xrpl::rpc::v1::CheckCancel* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::CheckCancel>(Arena*);
template<> ::org::xrpl::rpc::v1::CheckCash* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::CheckCash>(Arena*);
template<> ::org::xrpl::rpc::v1::CheckCreate* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::CheckCreate>(Arena*);
template<> ::org::xrpl::rpc::v1::DepositPreauth* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::DepositPreauth>(Arena*);
template<> ::org::xrpl::rpc::v1::EscrowCancel* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::EscrowCancel>(Arena*);
template<> ::org::xrpl::rpc::v1::EscrowCreate* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::EscrowCreate>(Arena*);
template<> ::org::xrpl::rpc::v1::EscrowFinish* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::EscrowFinish>(Arena*);
template<> ::org::xrpl::rpc::v1::Memo* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Memo>(Arena*);
template<> ::org::xrpl::rpc::v1::OfferCancel* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::OfferCancel>(Arena*);
template<> ::org::xrpl::rpc::v1::OfferCreate* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::OfferCreate>(Arena*);
template<> ::org::xrpl::rpc::v1::Payment* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Payment>(Arena*);
template<> ::org::xrpl::rpc::v1::PaymentChannelClaim* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::PaymentChannelClaim>(Arena*);
template<> ::org::xrpl::rpc::v1::PaymentChannelCreate* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::PaymentChannelCreate>(Arena*);
template<> ::org::xrpl::rpc::v1::PaymentChannelFund* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::PaymentChannelFund>(Arena*);
template<> ::org::xrpl::rpc::v1::Payment_Path* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Payment_Path>(Arena*);
template<> ::org::xrpl::rpc::v1::Payment_PathElement* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Payment_PathElement>(Arena*);
template<> ::org::xrpl::rpc::v1::SetRegularKey* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::SetRegularKey>(Arena*);
template<> ::org::xrpl::rpc::v1::Signer* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Signer>(Arena*);
template<> ::org::xrpl::rpc::v1::SignerListSet* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::SignerListSet>(Arena*);
template<> ::org::xrpl::rpc::v1::TicketCreate* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::TicketCreate>(Arena*);
template<> ::org::xrpl::rpc::v1::Transaction* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Transaction>(Arena*);
template<> ::org::xrpl::rpc::v1::TrustSet* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::TrustSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  enum TransactionDataCase {
    kPayment = 4,
    kAccountSet = 13,
    kAccountDelete = 14,
    kCheckCancel = 15,
    kCheckCash = 16,
    kCheckCreate = 17,
    kDepositPreauth = 18,
    kEscrowCancel = 19,
    kEscrowCreate = 20,
    kEscrowFinish = 21,
    kOfferCancel = 22,
    kOfferCreate = 23,
    kPaymentChannelClaim = 24,
    kPaymentChannelCreate = 25,
    kPaymentChannelFund = 26,
    kSetRegularKey = 27,
    kSignerListSet = 28,
    kTicketCreate = 30,
    kTrustSet = 29,
    TRANSACTION_DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.Memo memos = 10;
  int memos_size() const;
  void clear_memos();
  static const int kMemosFieldNumber = 10;
  ::org::xrpl::rpc::v1::Memo* mutable_memos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Memo >*
      mutable_memos();
  const ::org::xrpl::rpc::v1::Memo& memos(int index) const;
  ::org::xrpl::rpc::v1::Memo* add_memos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Memo >&
      memos() const;

  // repeated .org.xrpl.rpc.v1.Signer signers = 11;
  int signers_size() const;
  void clear_signers();
  static const int kSignersFieldNumber = 11;
  ::org::xrpl::rpc::v1::Signer* mutable_signers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Signer >*
      mutable_signers();
  const ::org::xrpl::rpc::v1::Signer& signers(int index) const;
  ::org::xrpl::rpc::v1::Signer* add_signers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Signer >&
      signers() const;

  // .org.xrpl.rpc.v1.Account account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Account& account() const;
  ::org::xrpl::rpc::v1::Account* release_account();
  ::org::xrpl::rpc::v1::Account* mutable_account();
  void set_allocated_account(::org::xrpl::rpc::v1::Account* account);

  // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 2;
  const ::org::xrpl::rpc::v1::XRPDropsAmount& fee() const;
  ::org::xrpl::rpc::v1::XRPDropsAmount* release_fee();
  ::org::xrpl::rpc::v1::XRPDropsAmount* mutable_fee();
  void set_allocated_fee(::org::xrpl::rpc::v1::XRPDropsAmount* fee);

  // .org.xrpl.rpc.v1.Sequence sequence = 3;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 3;
  const ::org::xrpl::rpc::v1::Sequence& sequence() const;
  ::org::xrpl::rpc::v1::Sequence* release_sequence();
  ::org::xrpl::rpc::v1::Sequence* mutable_sequence();
  void set_allocated_sequence(::org::xrpl::rpc::v1::Sequence* sequence);

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 5;
  bool has_signing_public_key() const;
  void clear_signing_public_key();
  static const int kSigningPublicKeyFieldNumber = 5;
  const ::org::xrpl::rpc::v1::SigningPublicKey& signing_public_key() const;
  ::org::xrpl::rpc::v1::SigningPublicKey* release_signing_public_key();
  ::org::xrpl::rpc::v1::SigningPublicKey* mutable_signing_public_key();
  void set_allocated_signing_public_key(::org::xrpl::rpc::v1::SigningPublicKey* signing_public_key);

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 6;
  bool has_transaction_signature() const;
  void clear_transaction_signature();
  static const int kTransactionSignatureFieldNumber = 6;
  const ::org::xrpl::rpc::v1::TransactionSignature& transaction_signature() const;
  ::org::xrpl::rpc::v1::TransactionSignature* release_transaction_signature();
  ::org::xrpl::rpc::v1::TransactionSignature* mutable_transaction_signature();
  void set_allocated_transaction_signature(::org::xrpl::rpc::v1::TransactionSignature* transaction_signature);

  // .org.xrpl.rpc.v1.Flags flags = 7;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 7;
  const ::org::xrpl::rpc::v1::Flags& flags() const;
  ::org::xrpl::rpc::v1::Flags* release_flags();
  ::org::xrpl::rpc::v1::Flags* mutable_flags();
  void set_allocated_flags(::org::xrpl::rpc::v1::Flags* flags);

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 8;
  bool has_last_ledger_sequence() const;
  void clear_last_ledger_sequence();
  static const int kLastLedgerSequenceFieldNumber = 8;
  const ::org::xrpl::rpc::v1::LastLedgerSequence& last_ledger_sequence() const;
  ::org::xrpl::rpc::v1::LastLedgerSequence* release_last_ledger_sequence();
  ::org::xrpl::rpc::v1::LastLedgerSequence* mutable_last_ledger_sequence();
  void set_allocated_last_ledger_sequence(::org::xrpl::rpc::v1::LastLedgerSequence* last_ledger_sequence);

  // .org.xrpl.rpc.v1.SourceTag source_tag = 9;
  bool has_source_tag() const;
  void clear_source_tag();
  static const int kSourceTagFieldNumber = 9;
  const ::org::xrpl::rpc::v1::SourceTag& source_tag() const;
  ::org::xrpl::rpc::v1::SourceTag* release_source_tag();
  ::org::xrpl::rpc::v1::SourceTag* mutable_source_tag();
  void set_allocated_source_tag(::org::xrpl::rpc::v1::SourceTag* source_tag);

  // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 12;
  bool has_account_transaction_id() const;
  void clear_account_transaction_id();
  static const int kAccountTransactionIdFieldNumber = 12;
  const ::org::xrpl::rpc::v1::AccountTransactionID& account_transaction_id() const;
  ::org::xrpl::rpc::v1::AccountTransactionID* release_account_transaction_id();
  ::org::xrpl::rpc::v1::AccountTransactionID* mutable_account_transaction_id();
  void set_allocated_account_transaction_id(::org::xrpl::rpc::v1::AccountTransactionID* account_transaction_id);

  // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 31;
  bool has_ticket_sequence() const;
  void clear_ticket_sequence();
  static const int kTicketSequenceFieldNumber = 31;
  const ::org::xrpl::rpc::v1::TicketSequence& ticket_sequence() const;
  ::org::xrpl::rpc::v1::TicketSequence* release_ticket_sequence();
  ::org::xrpl::rpc::v1::TicketSequence* mutable_ticket_sequence();
  void set_allocated_ticket_sequence(::org::xrpl::rpc::v1::TicketSequence* ticket_sequence);

  // .org.xrpl.rpc.v1.Payment payment = 4;
  bool has_payment() const;
  void clear_payment();
  static const int kPaymentFieldNumber = 4;
  const ::org::xrpl::rpc::v1::Payment& payment() const;
  ::org::xrpl::rpc::v1::Payment* release_payment();
  ::org::xrpl::rpc::v1::Payment* mutable_payment();
  void set_allocated_payment(::org::xrpl::rpc::v1::Payment* payment);

  // .org.xrpl.rpc.v1.AccountSet account_set = 13;
  bool has_account_set() const;
  void clear_account_set();
  static const int kAccountSetFieldNumber = 13;
  const ::org::xrpl::rpc::v1::AccountSet& account_set() const;
  ::org::xrpl::rpc::v1::AccountSet* release_account_set();
  ::org::xrpl::rpc::v1::AccountSet* mutable_account_set();
  void set_allocated_account_set(::org::xrpl::rpc::v1::AccountSet* account_set);

  // .org.xrpl.rpc.v1.AccountDelete account_delete = 14;
  bool has_account_delete() const;
  void clear_account_delete();
  static const int kAccountDeleteFieldNumber = 14;
  const ::org::xrpl::rpc::v1::AccountDelete& account_delete() const;
  ::org::xrpl::rpc::v1::AccountDelete* release_account_delete();
  ::org::xrpl::rpc::v1::AccountDelete* mutable_account_delete();
  void set_allocated_account_delete(::org::xrpl::rpc::v1::AccountDelete* account_delete);

  // .org.xrpl.rpc.v1.CheckCancel check_cancel = 15;
  bool has_check_cancel() const;
  void clear_check_cancel();
  static const int kCheckCancelFieldNumber = 15;
  const ::org::xrpl::rpc::v1::CheckCancel& check_cancel() const;
  ::org::xrpl::rpc::v1::CheckCancel* release_check_cancel();
  ::org::xrpl::rpc::v1::CheckCancel* mutable_check_cancel();
  void set_allocated_check_cancel(::org::xrpl::rpc::v1::CheckCancel* check_cancel);

  // .org.xrpl.rpc.v1.CheckCash check_cash = 16;
  bool has_check_cash() const;
  void clear_check_cash();
  static const int kCheckCashFieldNumber = 16;
  const ::org::xrpl::rpc::v1::CheckCash& check_cash() const;
  ::org::xrpl::rpc::v1::CheckCash* release_check_cash();
  ::org::xrpl::rpc::v1::CheckCash* mutable_check_cash();
  void set_allocated_check_cash(::org::xrpl::rpc::v1::CheckCash* check_cash);

  // .org.xrpl.rpc.v1.CheckCreate check_create = 17;
  bool has_check_create() const;
  void clear_check_create();
  static const int kCheckCreateFieldNumber = 17;
  const ::org::xrpl::rpc::v1::CheckCreate& check_create() const;
  ::org::xrpl::rpc::v1::CheckCreate* release_check_create();
  ::org::xrpl::rpc::v1::CheckCreate* mutable_check_create();
  void set_allocated_check_create(::org::xrpl::rpc::v1::CheckCreate* check_create);

  // .org.xrpl.rpc.v1.DepositPreauth deposit_preauth = 18;
  bool has_deposit_preauth() const;
  void clear_deposit_preauth();
  static const int kDepositPreauthFieldNumber = 18;
  const ::org::xrpl::rpc::v1::DepositPreauth& deposit_preauth() const;
  ::org::xrpl::rpc::v1::DepositPreauth* release_deposit_preauth();
  ::org::xrpl::rpc::v1::DepositPreauth* mutable_deposit_preauth();
  void set_allocated_deposit_preauth(::org::xrpl::rpc::v1::DepositPreauth* deposit_preauth);

  // .org.xrpl.rpc.v1.EscrowCancel escrow_cancel = 19;
  bool has_escrow_cancel() const;
  void clear_escrow_cancel();
  static const int kEscrowCancelFieldNumber = 19;
  const ::org::xrpl::rpc::v1::EscrowCancel& escrow_cancel() const;
  ::org::xrpl::rpc::v1::EscrowCancel* release_escrow_cancel();
  ::org::xrpl::rpc::v1::EscrowCancel* mutable_escrow_cancel();
  void set_allocated_escrow_cancel(::org::xrpl::rpc::v1::EscrowCancel* escrow_cancel);

  // .org.xrpl.rpc.v1.EscrowCreate escrow_create = 20;
  bool has_escrow_create() const;
  void clear_escrow_create();
  static const int kEscrowCreateFieldNumber = 20;
  const ::org::xrpl::rpc::v1::EscrowCreate& escrow_create() const;
  ::org::xrpl::rpc::v1::EscrowCreate* release_escrow_create();
  ::org::xrpl::rpc::v1::EscrowCreate* mutable_escrow_create();
  void set_allocated_escrow_create(::org::xrpl::rpc::v1::EscrowCreate* escrow_create);

  // .org.xrpl.rpc.v1.EscrowFinish escrow_finish = 21;
  bool has_escrow_finish() const;
  void clear_escrow_finish();
  static const int kEscrowFinishFieldNumber = 21;
  const ::org::xrpl::rpc::v1::EscrowFinish& escrow_finish() const;
  ::org::xrpl::rpc::v1::EscrowFinish* release_escrow_finish();
  ::org::xrpl::rpc::v1::EscrowFinish* mutable_escrow_finish();
  void set_allocated_escrow_finish(::org::xrpl::rpc::v1::EscrowFinish* escrow_finish);

  // .org.xrpl.rpc.v1.OfferCancel offer_cancel = 22;
  bool has_offer_cancel() const;
  void clear_offer_cancel();
  static const int kOfferCancelFieldNumber = 22;
  const ::org::xrpl::rpc::v1::OfferCancel& offer_cancel() const;
  ::org::xrpl::rpc::v1::OfferCancel* release_offer_cancel();
  ::org::xrpl::rpc::v1::OfferCancel* mutable_offer_cancel();
  void set_allocated_offer_cancel(::org::xrpl::rpc::v1::OfferCancel* offer_cancel);

  // .org.xrpl.rpc.v1.OfferCreate offer_create = 23;
  bool has_offer_create() const;
  void clear_offer_create();
  static const int kOfferCreateFieldNumber = 23;
  const ::org::xrpl::rpc::v1::OfferCreate& offer_create() const;
  ::org::xrpl::rpc::v1::OfferCreate* release_offer_create();
  ::org::xrpl::rpc::v1::OfferCreate* mutable_offer_create();
  void set_allocated_offer_create(::org::xrpl::rpc::v1::OfferCreate* offer_create);

  // .org.xrpl.rpc.v1.PaymentChannelClaim payment_channel_claim = 24;
  bool has_payment_channel_claim() const;
  void clear_payment_channel_claim();
  static const int kPaymentChannelClaimFieldNumber = 24;
  const ::org::xrpl::rpc::v1::PaymentChannelClaim& payment_channel_claim() const;
  ::org::xrpl::rpc::v1::PaymentChannelClaim* release_payment_channel_claim();
  ::org::xrpl::rpc::v1::PaymentChannelClaim* mutable_payment_channel_claim();
  void set_allocated_payment_channel_claim(::org::xrpl::rpc::v1::PaymentChannelClaim* payment_channel_claim);

  // .org.xrpl.rpc.v1.PaymentChannelCreate payment_channel_create = 25;
  bool has_payment_channel_create() const;
  void clear_payment_channel_create();
  static const int kPaymentChannelCreateFieldNumber = 25;
  const ::org::xrpl::rpc::v1::PaymentChannelCreate& payment_channel_create() const;
  ::org::xrpl::rpc::v1::PaymentChannelCreate* release_payment_channel_create();
  ::org::xrpl::rpc::v1::PaymentChannelCreate* mutable_payment_channel_create();
  void set_allocated_payment_channel_create(::org::xrpl::rpc::v1::PaymentChannelCreate* payment_channel_create);

  // .org.xrpl.rpc.v1.PaymentChannelFund payment_channel_fund = 26;
  bool has_payment_channel_fund() const;
  void clear_payment_channel_fund();
  static const int kPaymentChannelFundFieldNumber = 26;
  const ::org::xrpl::rpc::v1::PaymentChannelFund& payment_channel_fund() const;
  ::org::xrpl::rpc::v1::PaymentChannelFund* release_payment_channel_fund();
  ::org::xrpl::rpc::v1::PaymentChannelFund* mutable_payment_channel_fund();
  void set_allocated_payment_channel_fund(::org::xrpl::rpc::v1::PaymentChannelFund* payment_channel_fund);

  // .org.xrpl.rpc.v1.SetRegularKey set_regular_key = 27;
  bool has_set_regular_key() const;
  void clear_set_regular_key();
  static const int kSetRegularKeyFieldNumber = 27;
  const ::org::xrpl::rpc::v1::SetRegularKey& set_regular_key() const;
  ::org::xrpl::rpc::v1::SetRegularKey* release_set_regular_key();
  ::org::xrpl::rpc::v1::SetRegularKey* mutable_set_regular_key();
  void set_allocated_set_regular_key(::org::xrpl::rpc::v1::SetRegularKey* set_regular_key);

  // .org.xrpl.rpc.v1.SignerListSet signer_list_set = 28;
  bool has_signer_list_set() const;
  void clear_signer_list_set();
  static const int kSignerListSetFieldNumber = 28;
  const ::org::xrpl::rpc::v1::SignerListSet& signer_list_set() const;
  ::org::xrpl::rpc::v1::SignerListSet* release_signer_list_set();
  ::org::xrpl::rpc::v1::SignerListSet* mutable_signer_list_set();
  void set_allocated_signer_list_set(::org::xrpl::rpc::v1::SignerListSet* signer_list_set);

  // .org.xrpl.rpc.v1.TicketCreate ticket_create = 30;
  bool has_ticket_create() const;
  void clear_ticket_create();
  static const int kTicketCreateFieldNumber = 30;
  const ::org::xrpl::rpc::v1::TicketCreate& ticket_create() const;
  ::org::xrpl::rpc::v1::TicketCreate* release_ticket_create();
  ::org::xrpl::rpc::v1::TicketCreate* mutable_ticket_create();
  void set_allocated_ticket_create(::org::xrpl::rpc::v1::TicketCreate* ticket_create);

  // .org.xrpl.rpc.v1.TrustSet trust_set = 29;
  bool has_trust_set() const;
  void clear_trust_set();
  static const int kTrustSetFieldNumber = 29;
  const ::org::xrpl::rpc::v1::TrustSet& trust_set() const;
  ::org::xrpl::rpc::v1::TrustSet* release_trust_set();
  ::org::xrpl::rpc::v1::TrustSet* mutable_trust_set();
  void set_allocated_trust_set(::org::xrpl::rpc::v1::TrustSet* trust_set);

  void clear_transaction_data();
  TransactionDataCase transaction_data_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Transaction)
 private:
  class HasBitSetters;
  void set_has_payment();
  void set_has_account_set();
  void set_has_account_delete();
  void set_has_check_cancel();
  void set_has_check_cash();
  void set_has_check_create();
  void set_has_deposit_preauth();
  void set_has_escrow_cancel();
  void set_has_escrow_create();
  void set_has_escrow_finish();
  void set_has_offer_cancel();
  void set_has_offer_create();
  void set_has_payment_channel_claim();
  void set_has_payment_channel_create();
  void set_has_payment_channel_fund();
  void set_has_set_regular_key();
  void set_has_signer_list_set();
  void set_has_ticket_create();
  void set_has_trust_set();

  inline bool has_transaction_data() const;
  inline void clear_has_transaction_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Memo > memos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Signer > signers_;
  ::org::xrpl::rpc::v1::Account* account_;
  ::org::xrpl::rpc::v1::XRPDropsAmount* fee_;
  ::org::xrpl::rpc::v1::Sequence* sequence_;
  ::org::xrpl::rpc::v1::SigningPublicKey* signing_public_key_;
  ::org::xrpl::rpc::v1::TransactionSignature* transaction_signature_;
  ::org::xrpl::rpc::v1::Flags* flags_;
  ::org::xrpl::rpc::v1::LastLedgerSequence* last_ledger_sequence_;
  ::org::xrpl::rpc::v1::SourceTag* source_tag_;
  ::org::xrpl::rpc::v1::AccountTransactionID* account_transaction_id_;
  ::org::xrpl::rpc::v1::TicketSequence* ticket_sequence_;
  union TransactionDataUnion {
    TransactionDataUnion() {}
    ::org::xrpl::rpc::v1::Payment* payment_;
    ::org::xrpl::rpc::v1::AccountSet* account_set_;
    ::org::xrpl::rpc::v1::AccountDelete* account_delete_;
    ::org::xrpl::rpc::v1::CheckCancel* check_cancel_;
    ::org::xrpl::rpc::v1::CheckCash* check_cash_;
    ::org::xrpl::rpc::v1::CheckCreate* check_create_;
    ::org::xrpl::rpc::v1::DepositPreauth* deposit_preauth_;
    ::org::xrpl::rpc::v1::EscrowCancel* escrow_cancel_;
    ::org::xrpl::rpc::v1::EscrowCreate* escrow_create_;
    ::org::xrpl::rpc::v1::EscrowFinish* escrow_finish_;
    ::org::xrpl::rpc::v1::OfferCancel* offer_cancel_;
    ::org::xrpl::rpc::v1::OfferCreate* offer_create_;
    ::org::xrpl::rpc::v1::PaymentChannelClaim* payment_channel_claim_;
    ::org::xrpl::rpc::v1::PaymentChannelCreate* payment_channel_create_;
    ::org::xrpl::rpc::v1::PaymentChannelFund* payment_channel_fund_;
    ::org::xrpl::rpc::v1::SetRegularKey* set_regular_key_;
    ::org::xrpl::rpc::v1::SignerListSet* signer_list_set_;
    ::org::xrpl::rpc::v1::TicketCreate* ticket_create_;
    ::org::xrpl::rpc::v1::TrustSet* trust_set_;
  } transaction_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Memo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Memo) */ {
 public:
  Memo();
  virtual ~Memo();

  Memo(const Memo& from);
  Memo(Memo&& from) noexcept
    : Memo() {
    *this = ::std::move(from);
  }

  inline Memo& operator=(const Memo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Memo& operator=(Memo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Memo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Memo* internal_default_instance() {
    return reinterpret_cast<const Memo*>(
               &_Memo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Memo* other);
  friend void swap(Memo& a, Memo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Memo* New() const final {
    return CreateMaybeMessage<Memo>(nullptr);
  }

  Memo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Memo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Memo& from);
  void MergeFrom(const Memo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Memo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.MemoData memo_data = 1;
  bool has_memo_data() const;
  void clear_memo_data();
  static const int kMemoDataFieldNumber = 1;
  const ::org::xrpl::rpc::v1::MemoData& memo_data() const;
  ::org::xrpl::rpc::v1::MemoData* release_memo_data();
  ::org::xrpl::rpc::v1::MemoData* mutable_memo_data();
  void set_allocated_memo_data(::org::xrpl::rpc::v1::MemoData* memo_data);

  // .org.xrpl.rpc.v1.MemoFormat memo_format = 2;
  bool has_memo_format() const;
  void clear_memo_format();
  static const int kMemoFormatFieldNumber = 2;
  const ::org::xrpl::rpc::v1::MemoFormat& memo_format() const;
  ::org::xrpl::rpc::v1::MemoFormat* release_memo_format();
  ::org::xrpl::rpc::v1::MemoFormat* mutable_memo_format();
  void set_allocated_memo_format(::org::xrpl::rpc::v1::MemoFormat* memo_format);

  // .org.xrpl.rpc.v1.MemoType memo_type = 3;
  bool has_memo_type() const;
  void clear_memo_type();
  static const int kMemoTypeFieldNumber = 3;
  const ::org::xrpl::rpc::v1::MemoType& memo_type() const;
  ::org::xrpl::rpc::v1::MemoType* release_memo_type();
  ::org::xrpl::rpc::v1::MemoType* mutable_memo_type();
  void set_allocated_memo_type(::org::xrpl::rpc::v1::MemoType* memo_type);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Memo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::MemoData* memo_data_;
  ::org::xrpl::rpc::v1::MemoFormat* memo_format_;
  ::org::xrpl::rpc::v1::MemoType* memo_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Signer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Signer) */ {
 public:
  Signer();
  virtual ~Signer();

  Signer(const Signer& from);
  Signer(Signer&& from) noexcept
    : Signer() {
    *this = ::std::move(from);
  }

  inline Signer& operator=(const Signer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signer& operator=(Signer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signer* internal_default_instance() {
    return reinterpret_cast<const Signer*>(
               &_Signer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Signer* other);
  friend void swap(Signer& a, Signer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signer* New() const final {
    return CreateMaybeMessage<Signer>(nullptr);
  }

  Signer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signer& from);
  void MergeFrom(const Signer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Signer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Account account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Account& account() const;
  ::org::xrpl::rpc::v1::Account* release_account();
  ::org::xrpl::rpc::v1::Account* mutable_account();
  void set_allocated_account(::org::xrpl::rpc::v1::Account* account);

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 2;
  bool has_transaction_signature() const;
  void clear_transaction_signature();
  static const int kTransactionSignatureFieldNumber = 2;
  const ::org::xrpl::rpc::v1::TransactionSignature& transaction_signature() const;
  ::org::xrpl::rpc::v1::TransactionSignature* release_transaction_signature();
  ::org::xrpl::rpc::v1::TransactionSignature* mutable_transaction_signature();
  void set_allocated_transaction_signature(::org::xrpl::rpc::v1::TransactionSignature* transaction_signature);

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 3;
  bool has_signing_public_key() const;
  void clear_signing_public_key();
  static const int kSigningPublicKeyFieldNumber = 3;
  const ::org::xrpl::rpc::v1::SigningPublicKey& signing_public_key() const;
  ::org::xrpl::rpc::v1::SigningPublicKey* release_signing_public_key();
  ::org::xrpl::rpc::v1::SigningPublicKey* mutable_signing_public_key();
  void set_allocated_signing_public_key(::org::xrpl::rpc::v1::SigningPublicKey* signing_public_key);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Signer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Account* account_;
  ::org::xrpl::rpc::v1::TransactionSignature* transaction_signature_;
  ::org::xrpl::rpc::v1::SigningPublicKey* signing_public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class AccountSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.AccountSet) */ {
 public:
  AccountSet();
  virtual ~AccountSet();

  AccountSet(const AccountSet& from);
  AccountSet(AccountSet&& from) noexcept
    : AccountSet() {
    *this = ::std::move(from);
  }

  inline AccountSet& operator=(const AccountSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSet& operator=(AccountSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountSet* internal_default_instance() {
    return reinterpret_cast<const AccountSet*>(
               &_AccountSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AccountSet* other);
  friend void swap(AccountSet& a, AccountSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountSet* New() const final {
    return CreateMaybeMessage<AccountSet>(nullptr);
  }

  AccountSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountSet& from);
  void MergeFrom(const AccountSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.AccountSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.ClearFlag clear_flag = 1;
  bool has_clear_flag() const;
  void clear_clear_flag();
  static const int kClearFlagFieldNumber = 1;
  const ::org::xrpl::rpc::v1::ClearFlag& clear_flag() const;
  ::org::xrpl::rpc::v1::ClearFlag* release_clear_flag();
  ::org::xrpl::rpc::v1::ClearFlag* mutable_clear_flag();
  void set_allocated_clear_flag(::org::xrpl::rpc::v1::ClearFlag* clear_flag);

  // .org.xrpl.rpc.v1.Domain domain = 2;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Domain& domain() const;
  ::org::xrpl::rpc::v1::Domain* release_domain();
  ::org::xrpl::rpc::v1::Domain* mutable_domain();
  void set_allocated_domain(::org::xrpl::rpc::v1::Domain* domain);

  // .org.xrpl.rpc.v1.EmailHash email_hash = 3;
  bool has_email_hash() const;
  void clear_email_hash();
  static const int kEmailHashFieldNumber = 3;
  const ::org::xrpl::rpc::v1::EmailHash& email_hash() const;
  ::org::xrpl::rpc::v1::EmailHash* release_email_hash();
  ::org::xrpl::rpc::v1::EmailHash* mutable_email_hash();
  void set_allocated_email_hash(::org::xrpl::rpc::v1::EmailHash* email_hash);

  // .org.xrpl.rpc.v1.MessageKey message_key = 4;
  bool has_message_key() const;
  void clear_message_key();
  static const int kMessageKeyFieldNumber = 4;
  const ::org::xrpl::rpc::v1::MessageKey& message_key() const;
  ::org::xrpl::rpc::v1::MessageKey* release_message_key();
  ::org::xrpl::rpc::v1::MessageKey* mutable_message_key();
  void set_allocated_message_key(::org::xrpl::rpc::v1::MessageKey* message_key);

  // .org.xrpl.rpc.v1.SetFlag set_flag = 5;
  bool has_set_flag() const;
  void clear_set_flag();
  static const int kSetFlagFieldNumber = 5;
  const ::org::xrpl::rpc::v1::SetFlag& set_flag() const;
  ::org::xrpl::rpc::v1::SetFlag* release_set_flag();
  ::org::xrpl::rpc::v1::SetFlag* mutable_set_flag();
  void set_allocated_set_flag(::org::xrpl::rpc::v1::SetFlag* set_flag);

  // .org.xrpl.rpc.v1.TransferRate transfer_rate = 6;
  bool has_transfer_rate() const;
  void clear_transfer_rate();
  static const int kTransferRateFieldNumber = 6;
  const ::org::xrpl::rpc::v1::TransferRate& transfer_rate() const;
  ::org::xrpl::rpc::v1::TransferRate* release_transfer_rate();
  ::org::xrpl::rpc::v1::TransferRate* mutable_transfer_rate();
  void set_allocated_transfer_rate(::org::xrpl::rpc::v1::TransferRate* transfer_rate);

  // .org.xrpl.rpc.v1.TickSize tick_size = 7;
  bool has_tick_size() const;
  void clear_tick_size();
  static const int kTickSizeFieldNumber = 7;
  const ::org::xrpl::rpc::v1::TickSize& tick_size() const;
  ::org::xrpl::rpc::v1::TickSize* release_tick_size();
  ::org::xrpl::rpc::v1::TickSize* mutable_tick_size();
  void set_allocated_tick_size(::org::xrpl::rpc::v1::TickSize* tick_size);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.AccountSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::ClearFlag* clear_flag_;
  ::org::xrpl::rpc::v1::Domain* domain_;
  ::org::xrpl::rpc::v1::EmailHash* email_hash_;
  ::org::xrpl::rpc::v1::MessageKey* message_key_;
  ::org::xrpl::rpc::v1::SetFlag* set_flag_;
  ::org::xrpl::rpc::v1::TransferRate* transfer_rate_;
  ::org::xrpl::rpc::v1::TickSize* tick_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class AccountDelete :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.AccountDelete) */ {
 public:
  AccountDelete();
  virtual ~AccountDelete();

  AccountDelete(const AccountDelete& from);
  AccountDelete(AccountDelete&& from) noexcept
    : AccountDelete() {
    *this = ::std::move(from);
  }

  inline AccountDelete& operator=(const AccountDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountDelete& operator=(AccountDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountDelete* internal_default_instance() {
    return reinterpret_cast<const AccountDelete*>(
               &_AccountDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AccountDelete* other);
  friend void swap(AccountDelete& a, AccountDelete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountDelete* New() const final {
    return CreateMaybeMessage<AccountDelete>(nullptr);
  }

  AccountDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountDelete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountDelete& from);
  void MergeFrom(const AccountDelete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountDelete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.AccountDelete";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Destination destination = 1;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Destination& destination() const;
  ::org::xrpl::rpc::v1::Destination* release_destination();
  ::org::xrpl::rpc::v1::Destination* mutable_destination();
  void set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination);

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 2;
  bool has_destination_tag() const;
  void clear_destination_tag();
  static const int kDestinationTagFieldNumber = 2;
  const ::org::xrpl::rpc::v1::DestinationTag& destination_tag() const;
  ::org::xrpl::rpc::v1::DestinationTag* release_destination_tag();
  ::org::xrpl::rpc::v1::DestinationTag* mutable_destination_tag();
  void set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.AccountDelete)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Destination* destination_;
  ::org::xrpl::rpc::v1::DestinationTag* destination_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class CheckCancel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.CheckCancel) */ {
 public:
  CheckCancel();
  virtual ~CheckCancel();

  CheckCancel(const CheckCancel& from);
  CheckCancel(CheckCancel&& from) noexcept
    : CheckCancel() {
    *this = ::std::move(from);
  }

  inline CheckCancel& operator=(const CheckCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckCancel& operator=(CheckCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckCancel* internal_default_instance() {
    return reinterpret_cast<const CheckCancel*>(
               &_CheckCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CheckCancel* other);
  friend void swap(CheckCancel& a, CheckCancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckCancel* New() const final {
    return CreateMaybeMessage<CheckCancel>(nullptr);
  }

  CheckCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckCancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckCancel& from);
  void MergeFrom(const CheckCancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckCancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.CheckCancel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  bool has_check_id() const;
  void clear_check_id();
  static const int kCheckIdFieldNumber = 1;
  const ::org::xrpl::rpc::v1::CheckID& check_id() const;
  ::org::xrpl::rpc::v1::CheckID* release_check_id();
  ::org::xrpl::rpc::v1::CheckID* mutable_check_id();
  void set_allocated_check_id(::org::xrpl::rpc::v1::CheckID* check_id);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.CheckCancel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::CheckID* check_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class CheckCash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.CheckCash) */ {
 public:
  CheckCash();
  virtual ~CheckCash();

  CheckCash(const CheckCash& from);
  CheckCash(CheckCash&& from) noexcept
    : CheckCash() {
    *this = ::std::move(from);
  }

  inline CheckCash& operator=(const CheckCash& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckCash& operator=(CheckCash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckCash& default_instance();

  enum AmountOneofCase {
    kAmount = 2,
    kDeliverMin = 3,
    AMOUNT_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckCash* internal_default_instance() {
    return reinterpret_cast<const CheckCash*>(
               &_CheckCash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CheckCash* other);
  friend void swap(CheckCash& a, CheckCash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckCash* New() const final {
    return CreateMaybeMessage<CheckCash>(nullptr);
  }

  CheckCash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckCash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckCash& from);
  void MergeFrom(const CheckCash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckCash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.CheckCash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  bool has_check_id() const;
  void clear_check_id();
  static const int kCheckIdFieldNumber = 1;
  const ::org::xrpl::rpc::v1::CheckID& check_id() const;
  ::org::xrpl::rpc::v1::CheckID* release_check_id();
  ::org::xrpl::rpc::v1::CheckID* mutable_check_id();
  void set_allocated_check_id(::org::xrpl::rpc::v1::CheckID* check_id);

  // .org.xrpl.rpc.v1.Amount amount = 2;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Amount& amount() const;
  ::org::xrpl::rpc::v1::Amount* release_amount();
  ::org::xrpl::rpc::v1::Amount* mutable_amount();
  void set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount);

  // .org.xrpl.rpc.v1.DeliverMin deliver_min = 3;
  bool has_deliver_min() const;
  void clear_deliver_min();
  static const int kDeliverMinFieldNumber = 3;
  const ::org::xrpl::rpc::v1::DeliverMin& deliver_min() const;
  ::org::xrpl::rpc::v1::DeliverMin* release_deliver_min();
  ::org::xrpl::rpc::v1::DeliverMin* mutable_deliver_min();
  void set_allocated_deliver_min(::org::xrpl::rpc::v1::DeliverMin* deliver_min);

  void clear_amount_oneof();
  AmountOneofCase amount_oneof_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.CheckCash)
 private:
  class HasBitSetters;
  void set_has_amount();
  void set_has_deliver_min();

  inline bool has_amount_oneof() const;
  inline void clear_has_amount_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::CheckID* check_id_;
  union AmountOneofUnion {
    AmountOneofUnion() {}
    ::org::xrpl::rpc::v1::Amount* amount_;
    ::org::xrpl::rpc::v1::DeliverMin* deliver_min_;
  } amount_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class CheckCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.CheckCreate) */ {
 public:
  CheckCreate();
  virtual ~CheckCreate();

  CheckCreate(const CheckCreate& from);
  CheckCreate(CheckCreate&& from) noexcept
    : CheckCreate() {
    *this = ::std::move(from);
  }

  inline CheckCreate& operator=(const CheckCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckCreate& operator=(CheckCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckCreate* internal_default_instance() {
    return reinterpret_cast<const CheckCreate*>(
               &_CheckCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CheckCreate* other);
  friend void swap(CheckCreate& a, CheckCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckCreate* New() const final {
    return CreateMaybeMessage<CheckCreate>(nullptr);
  }

  CheckCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckCreate& from);
  void MergeFrom(const CheckCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.CheckCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Destination destination = 1;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Destination& destination() const;
  ::org::xrpl::rpc::v1::Destination* release_destination();
  ::org::xrpl::rpc::v1::Destination* mutable_destination();
  void set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination);

  // .org.xrpl.rpc.v1.SendMax send_max = 2;
  bool has_send_max() const;
  void clear_send_max();
  static const int kSendMaxFieldNumber = 2;
  const ::org::xrpl::rpc::v1::SendMax& send_max() const;
  ::org::xrpl::rpc::v1::SendMax* release_send_max();
  ::org::xrpl::rpc::v1::SendMax* mutable_send_max();
  void set_allocated_send_max(::org::xrpl::rpc::v1::SendMax* send_max);

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  bool has_destination_tag() const;
  void clear_destination_tag();
  static const int kDestinationTagFieldNumber = 3;
  const ::org::xrpl::rpc::v1::DestinationTag& destination_tag() const;
  ::org::xrpl::rpc::v1::DestinationTag* release_destination_tag();
  ::org::xrpl::rpc::v1::DestinationTag* mutable_destination_tag();
  void set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag);

  // .org.xrpl.rpc.v1.Expiration expiration = 4;
  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 4;
  const ::org::xrpl::rpc::v1::Expiration& expiration() const;
  ::org::xrpl::rpc::v1::Expiration* release_expiration();
  ::org::xrpl::rpc::v1::Expiration* mutable_expiration();
  void set_allocated_expiration(::org::xrpl::rpc::v1::Expiration* expiration);

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 5;
  bool has_invoice_id() const;
  void clear_invoice_id();
  static const int kInvoiceIdFieldNumber = 5;
  const ::org::xrpl::rpc::v1::InvoiceID& invoice_id() const;
  ::org::xrpl::rpc::v1::InvoiceID* release_invoice_id();
  ::org::xrpl::rpc::v1::InvoiceID* mutable_invoice_id();
  void set_allocated_invoice_id(::org::xrpl::rpc::v1::InvoiceID* invoice_id);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.CheckCreate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Destination* destination_;
  ::org::xrpl::rpc::v1::SendMax* send_max_;
  ::org::xrpl::rpc::v1::DestinationTag* destination_tag_;
  ::org::xrpl::rpc::v1::Expiration* expiration_;
  ::org::xrpl::rpc::v1::InvoiceID* invoice_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class DepositPreauth :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.DepositPreauth) */ {
 public:
  DepositPreauth();
  virtual ~DepositPreauth();

  DepositPreauth(const DepositPreauth& from);
  DepositPreauth(DepositPreauth&& from) noexcept
    : DepositPreauth() {
    *this = ::std::move(from);
  }

  inline DepositPreauth& operator=(const DepositPreauth& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositPreauth& operator=(DepositPreauth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositPreauth& default_instance();

  enum AuthorizationOneofCase {
    kAuthorize = 1,
    kUnauthorize = 2,
    AUTHORIZATION_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepositPreauth* internal_default_instance() {
    return reinterpret_cast<const DepositPreauth*>(
               &_DepositPreauth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DepositPreauth* other);
  friend void swap(DepositPreauth& a, DepositPreauth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepositPreauth* New() const final {
    return CreateMaybeMessage<DepositPreauth>(nullptr);
  }

  DepositPreauth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositPreauth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositPreauth& from);
  void MergeFrom(const DepositPreauth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositPreauth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.DepositPreauth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Authorize authorize = 1;
  bool has_authorize() const;
  void clear_authorize();
  static const int kAuthorizeFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Authorize& authorize() const;
  ::org::xrpl::rpc::v1::Authorize* release_authorize();
  ::org::xrpl::rpc::v1::Authorize* mutable_authorize();
  void set_allocated_authorize(::org::xrpl::rpc::v1::Authorize* authorize);

  // .org.xrpl.rpc.v1.Unauthorize unauthorize = 2;
  bool has_unauthorize() const;
  void clear_unauthorize();
  static const int kUnauthorizeFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Unauthorize& unauthorize() const;
  ::org::xrpl::rpc::v1::Unauthorize* release_unauthorize();
  ::org::xrpl::rpc::v1::Unauthorize* mutable_unauthorize();
  void set_allocated_unauthorize(::org::xrpl::rpc::v1::Unauthorize* unauthorize);

  void clear_authorization_oneof();
  AuthorizationOneofCase authorization_oneof_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.DepositPreauth)
 private:
  class HasBitSetters;
  void set_has_authorize();
  void set_has_unauthorize();

  inline bool has_authorization_oneof() const;
  inline void clear_has_authorization_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union AuthorizationOneofUnion {
    AuthorizationOneofUnion() {}
    ::org::xrpl::rpc::v1::Authorize* authorize_;
    ::org::xrpl::rpc::v1::Unauthorize* unauthorize_;
  } authorization_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class EscrowCancel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.EscrowCancel) */ {
 public:
  EscrowCancel();
  virtual ~EscrowCancel();

  EscrowCancel(const EscrowCancel& from);
  EscrowCancel(EscrowCancel&& from) noexcept
    : EscrowCancel() {
    *this = ::std::move(from);
  }

  inline EscrowCancel& operator=(const EscrowCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline EscrowCancel& operator=(EscrowCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EscrowCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EscrowCancel* internal_default_instance() {
    return reinterpret_cast<const EscrowCancel*>(
               &_EscrowCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(EscrowCancel* other);
  friend void swap(EscrowCancel& a, EscrowCancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EscrowCancel* New() const final {
    return CreateMaybeMessage<EscrowCancel>(nullptr);
  }

  EscrowCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EscrowCancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EscrowCancel& from);
  void MergeFrom(const EscrowCancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EscrowCancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.EscrowCancel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Owner owner = 1;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Owner& owner() const;
  ::org::xrpl::rpc::v1::Owner* release_owner();
  ::org::xrpl::rpc::v1::Owner* mutable_owner();
  void set_allocated_owner(::org::xrpl::rpc::v1::Owner* owner);

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  bool has_offer_sequence() const;
  void clear_offer_sequence();
  static const int kOfferSequenceFieldNumber = 2;
  const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence() const;
  ::org::xrpl::rpc::v1::OfferSequence* release_offer_sequence();
  ::org::xrpl::rpc::v1::OfferSequence* mutable_offer_sequence();
  void set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.EscrowCancel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Owner* owner_;
  ::org::xrpl::rpc::v1::OfferSequence* offer_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class EscrowCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.EscrowCreate) */ {
 public:
  EscrowCreate();
  virtual ~EscrowCreate();

  EscrowCreate(const EscrowCreate& from);
  EscrowCreate(EscrowCreate&& from) noexcept
    : EscrowCreate() {
    *this = ::std::move(from);
  }

  inline EscrowCreate& operator=(const EscrowCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline EscrowCreate& operator=(EscrowCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EscrowCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EscrowCreate* internal_default_instance() {
    return reinterpret_cast<const EscrowCreate*>(
               &_EscrowCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(EscrowCreate* other);
  friend void swap(EscrowCreate& a, EscrowCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EscrowCreate* New() const final {
    return CreateMaybeMessage<EscrowCreate>(nullptr);
  }

  EscrowCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EscrowCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EscrowCreate& from);
  void MergeFrom(const EscrowCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EscrowCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.EscrowCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Amount amount = 1;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Amount& amount() const;
  ::org::xrpl::rpc::v1::Amount* release_amount();
  ::org::xrpl::rpc::v1::Amount* mutable_amount();
  void set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount);

  // .org.xrpl.rpc.v1.Destination destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Destination& destination() const;
  ::org::xrpl::rpc::v1::Destination* release_destination();
  ::org::xrpl::rpc::v1::Destination* mutable_destination();
  void set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination);

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 3;
  bool has_cancel_after() const;
  void clear_cancel_after();
  static const int kCancelAfterFieldNumber = 3;
  const ::org::xrpl::rpc::v1::CancelAfter& cancel_after() const;
  ::org::xrpl::rpc::v1::CancelAfter* release_cancel_after();
  ::org::xrpl::rpc::v1::CancelAfter* mutable_cancel_after();
  void set_allocated_cancel_after(::org::xrpl::rpc::v1::CancelAfter* cancel_after);

  // .org.xrpl.rpc.v1.FinishAfter finish_after = 4;
  bool has_finish_after() const;
  void clear_finish_after();
  static const int kFinishAfterFieldNumber = 4;
  const ::org::xrpl::rpc::v1::FinishAfter& finish_after() const;
  ::org::xrpl::rpc::v1::FinishAfter* release_finish_after();
  ::org::xrpl::rpc::v1::FinishAfter* mutable_finish_after();
  void set_allocated_finish_after(::org::xrpl::rpc::v1::FinishAfter* finish_after);

  // .org.xrpl.rpc.v1.Condition condition = 5;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 5;
  const ::org::xrpl::rpc::v1::Condition& condition() const;
  ::org::xrpl::rpc::v1::Condition* release_condition();
  ::org::xrpl::rpc::v1::Condition* mutable_condition();
  void set_allocated_condition(::org::xrpl::rpc::v1::Condition* condition);

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  bool has_destination_tag() const;
  void clear_destination_tag();
  static const int kDestinationTagFieldNumber = 6;
  const ::org::xrpl::rpc::v1::DestinationTag& destination_tag() const;
  ::org::xrpl::rpc::v1::DestinationTag* release_destination_tag();
  ::org::xrpl::rpc::v1::DestinationTag* mutable_destination_tag();
  void set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.EscrowCreate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Amount* amount_;
  ::org::xrpl::rpc::v1::Destination* destination_;
  ::org::xrpl::rpc::v1::CancelAfter* cancel_after_;
  ::org::xrpl::rpc::v1::FinishAfter* finish_after_;
  ::org::xrpl::rpc::v1::Condition* condition_;
  ::org::xrpl::rpc::v1::DestinationTag* destination_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class EscrowFinish :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.EscrowFinish) */ {
 public:
  EscrowFinish();
  virtual ~EscrowFinish();

  EscrowFinish(const EscrowFinish& from);
  EscrowFinish(EscrowFinish&& from) noexcept
    : EscrowFinish() {
    *this = ::std::move(from);
  }

  inline EscrowFinish& operator=(const EscrowFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline EscrowFinish& operator=(EscrowFinish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EscrowFinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EscrowFinish* internal_default_instance() {
    return reinterpret_cast<const EscrowFinish*>(
               &_EscrowFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(EscrowFinish* other);
  friend void swap(EscrowFinish& a, EscrowFinish& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EscrowFinish* New() const final {
    return CreateMaybeMessage<EscrowFinish>(nullptr);
  }

  EscrowFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EscrowFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EscrowFinish& from);
  void MergeFrom(const EscrowFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EscrowFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.EscrowFinish";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Owner owner = 1;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Owner& owner() const;
  ::org::xrpl::rpc::v1::Owner* release_owner();
  ::org::xrpl::rpc::v1::Owner* mutable_owner();
  void set_allocated_owner(::org::xrpl::rpc::v1::Owner* owner);

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  bool has_offer_sequence() const;
  void clear_offer_sequence();
  static const int kOfferSequenceFieldNumber = 2;
  const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence() const;
  ::org::xrpl::rpc::v1::OfferSequence* release_offer_sequence();
  ::org::xrpl::rpc::v1::OfferSequence* mutable_offer_sequence();
  void set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence);

  // .org.xrpl.rpc.v1.Condition condition = 3;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 3;
  const ::org::xrpl::rpc::v1::Condition& condition() const;
  ::org::xrpl::rpc::v1::Condition* release_condition();
  ::org::xrpl::rpc::v1::Condition* mutable_condition();
  void set_allocated_condition(::org::xrpl::rpc::v1::Condition* condition);

  // .org.xrpl.rpc.v1.Fulfillment fulfillment = 4;
  bool has_fulfillment() const;
  void clear_fulfillment();
  static const int kFulfillmentFieldNumber = 4;
  const ::org::xrpl::rpc::v1::Fulfillment& fulfillment() const;
  ::org::xrpl::rpc::v1::Fulfillment* release_fulfillment();
  ::org::xrpl::rpc::v1::Fulfillment* mutable_fulfillment();
  void set_allocated_fulfillment(::org::xrpl::rpc::v1::Fulfillment* fulfillment);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.EscrowFinish)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Owner* owner_;
  ::org::xrpl::rpc::v1::OfferSequence* offer_sequence_;
  ::org::xrpl::rpc::v1::Condition* condition_;
  ::org::xrpl::rpc::v1::Fulfillment* fulfillment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class OfferCancel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.OfferCancel) */ {
 public:
  OfferCancel();
  virtual ~OfferCancel();

  OfferCancel(const OfferCancel& from);
  OfferCancel(OfferCancel&& from) noexcept
    : OfferCancel() {
    *this = ::std::move(from);
  }

  inline OfferCancel& operator=(const OfferCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfferCancel& operator=(OfferCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfferCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfferCancel* internal_default_instance() {
    return reinterpret_cast<const OfferCancel*>(
               &_OfferCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(OfferCancel* other);
  friend void swap(OfferCancel& a, OfferCancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfferCancel* New() const final {
    return CreateMaybeMessage<OfferCancel>(nullptr);
  }

  OfferCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfferCancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfferCancel& from);
  void MergeFrom(const OfferCancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfferCancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.OfferCancel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 1;
  bool has_offer_sequence() const;
  void clear_offer_sequence();
  static const int kOfferSequenceFieldNumber = 1;
  const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence() const;
  ::org::xrpl::rpc::v1::OfferSequence* release_offer_sequence();
  ::org::xrpl::rpc::v1::OfferSequence* mutable_offer_sequence();
  void set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.OfferCancel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::OfferSequence* offer_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class OfferCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.OfferCreate) */ {
 public:
  OfferCreate();
  virtual ~OfferCreate();

  OfferCreate(const OfferCreate& from);
  OfferCreate(OfferCreate&& from) noexcept
    : OfferCreate() {
    *this = ::std::move(from);
  }

  inline OfferCreate& operator=(const OfferCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfferCreate& operator=(OfferCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfferCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfferCreate* internal_default_instance() {
    return reinterpret_cast<const OfferCreate*>(
               &_OfferCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(OfferCreate* other);
  friend void swap(OfferCreate& a, OfferCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfferCreate* New() const final {
    return CreateMaybeMessage<OfferCreate>(nullptr);
  }

  OfferCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfferCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfferCreate& from);
  void MergeFrom(const OfferCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfferCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.OfferCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Expiration expiration = 1;
  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Expiration& expiration() const;
  ::org::xrpl::rpc::v1::Expiration* release_expiration();
  ::org::xrpl::rpc::v1::Expiration* mutable_expiration();
  void set_allocated_expiration(::org::xrpl::rpc::v1::Expiration* expiration);

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  bool has_offer_sequence() const;
  void clear_offer_sequence();
  static const int kOfferSequenceFieldNumber = 2;
  const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence() const;
  ::org::xrpl::rpc::v1::OfferSequence* release_offer_sequence();
  ::org::xrpl::rpc::v1::OfferSequence* mutable_offer_sequence();
  void set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence);

  // .org.xrpl.rpc.v1.TakerGets taker_gets = 3;
  bool has_taker_gets() const;
  void clear_taker_gets();
  static const int kTakerGetsFieldNumber = 3;
  const ::org::xrpl::rpc::v1::TakerGets& taker_gets() const;
  ::org::xrpl::rpc::v1::TakerGets* release_taker_gets();
  ::org::xrpl::rpc::v1::TakerGets* mutable_taker_gets();
  void set_allocated_taker_gets(::org::xrpl::rpc::v1::TakerGets* taker_gets);

  // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
  bool has_taker_pays() const;
  void clear_taker_pays();
  static const int kTakerPaysFieldNumber = 4;
  const ::org::xrpl::rpc::v1::TakerPays& taker_pays() const;
  ::org::xrpl::rpc::v1::TakerPays* release_taker_pays();
  ::org::xrpl::rpc::v1::TakerPays* mutable_taker_pays();
  void set_allocated_taker_pays(::org::xrpl::rpc::v1::TakerPays* taker_pays);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.OfferCreate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Expiration* expiration_;
  ::org::xrpl::rpc::v1::OfferSequence* offer_sequence_;
  ::org::xrpl::rpc::v1::TakerGets* taker_gets_;
  ::org::xrpl::rpc::v1::TakerPays* taker_pays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Payment_PathElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Payment.PathElement) */ {
 public:
  Payment_PathElement();
  virtual ~Payment_PathElement();

  Payment_PathElement(const Payment_PathElement& from);
  Payment_PathElement(Payment_PathElement&& from) noexcept
    : Payment_PathElement() {
    *this = ::std::move(from);
  }

  inline Payment_PathElement& operator=(const Payment_PathElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment_PathElement& operator=(Payment_PathElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payment_PathElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payment_PathElement* internal_default_instance() {
    return reinterpret_cast<const Payment_PathElement*>(
               &_Payment_PathElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Payment_PathElement* other);
  friend void swap(Payment_PathElement& a, Payment_PathElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Payment_PathElement* New() const final {
    return CreateMaybeMessage<Payment_PathElement>(nullptr);
  }

  Payment_PathElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment_PathElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payment_PathElement& from);
  void MergeFrom(const Payment_PathElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment_PathElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Payment.PathElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::AccountAddress& account() const;
  ::org::xrpl::rpc::v1::AccountAddress* release_account();
  ::org::xrpl::rpc::v1::AccountAddress* mutable_account();
  void set_allocated_account(::org::xrpl::rpc::v1::AccountAddress* account);

  // .org.xrpl.rpc.v1.Currency currency = 2;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Currency& currency() const;
  ::org::xrpl::rpc::v1::Currency* release_currency();
  ::org::xrpl::rpc::v1::Currency* mutable_currency();
  void set_allocated_currency(::org::xrpl::rpc::v1::Currency* currency);

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  bool has_issuer() const;
  void clear_issuer();
  static const int kIssuerFieldNumber = 3;
  const ::org::xrpl::rpc::v1::AccountAddress& issuer() const;
  ::org::xrpl::rpc::v1::AccountAddress* release_issuer();
  ::org::xrpl::rpc::v1::AccountAddress* mutable_issuer();
  void set_allocated_issuer(::org::xrpl::rpc::v1::AccountAddress* issuer);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Payment.PathElement)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::AccountAddress* account_;
  ::org::xrpl::rpc::v1::Currency* currency_;
  ::org::xrpl::rpc::v1::AccountAddress* issuer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Payment_Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Payment.Path) */ {
 public:
  Payment_Path();
  virtual ~Payment_Path();

  Payment_Path(const Payment_Path& from);
  Payment_Path(Payment_Path&& from) noexcept
    : Payment_Path() {
    *this = ::std::move(from);
  }

  inline Payment_Path& operator=(const Payment_Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment_Path& operator=(Payment_Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payment_Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payment_Path* internal_default_instance() {
    return reinterpret_cast<const Payment_Path*>(
               &_Payment_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Payment_Path* other);
  friend void swap(Payment_Path& a, Payment_Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Payment_Path* New() const final {
    return CreateMaybeMessage<Payment_Path>(nullptr);
  }

  Payment_Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment_Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payment_Path& from);
  void MergeFrom(const Payment_Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment_Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Payment.Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.Payment.PathElement elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::org::xrpl::rpc::v1::Payment_PathElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_PathElement >*
      mutable_elements();
  const ::org::xrpl::rpc::v1::Payment_PathElement& elements(int index) const;
  ::org::xrpl::rpc::v1::Payment_PathElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_PathElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Payment.Path)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_PathElement > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Payment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Payment) */ {
 public:
  Payment();
  virtual ~Payment();

  Payment(const Payment& from);
  Payment(Payment&& from) noexcept
    : Payment() {
    *this = ::std::move(from);
  }

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment& operator=(Payment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Payment* other);
  friend void swap(Payment& a, Payment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Payment* New() const final {
    return CreateMaybeMessage<Payment>(nullptr);
  }

  Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payment& from);
  void MergeFrom(const Payment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Payment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Payment_PathElement PathElement;
  typedef Payment_Path Path;

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.Payment.Path paths = 5;
  int paths_size() const;
  void clear_paths();
  static const int kPathsFieldNumber = 5;
  ::org::xrpl::rpc::v1::Payment_Path* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_Path >*
      mutable_paths();
  const ::org::xrpl::rpc::v1::Payment_Path& paths(int index) const;
  ::org::xrpl::rpc::v1::Payment_Path* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_Path >&
      paths() const;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Amount& amount() const;
  ::org::xrpl::rpc::v1::Amount* release_amount();
  ::org::xrpl::rpc::v1::Amount* mutable_amount();
  void set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount);

  // .org.xrpl.rpc.v1.Destination destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Destination& destination() const;
  ::org::xrpl::rpc::v1::Destination* release_destination();
  ::org::xrpl::rpc::v1::Destination* mutable_destination();
  void set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination);

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  bool has_destination_tag() const;
  void clear_destination_tag();
  static const int kDestinationTagFieldNumber = 3;
  const ::org::xrpl::rpc::v1::DestinationTag& destination_tag() const;
  ::org::xrpl::rpc::v1::DestinationTag* release_destination_tag();
  ::org::xrpl::rpc::v1::DestinationTag* mutable_destination_tag();
  void set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag);

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 4;
  bool has_invoice_id() const;
  void clear_invoice_id();
  static const int kInvoiceIdFieldNumber = 4;
  const ::org::xrpl::rpc::v1::InvoiceID& invoice_id() const;
  ::org::xrpl::rpc::v1::InvoiceID* release_invoice_id();
  ::org::xrpl::rpc::v1::InvoiceID* mutable_invoice_id();
  void set_allocated_invoice_id(::org::xrpl::rpc::v1::InvoiceID* invoice_id);

  // .org.xrpl.rpc.v1.SendMax send_max = 6;
  bool has_send_max() const;
  void clear_send_max();
  static const int kSendMaxFieldNumber = 6;
  const ::org::xrpl::rpc::v1::SendMax& send_max() const;
  ::org::xrpl::rpc::v1::SendMax* release_send_max();
  ::org::xrpl::rpc::v1::SendMax* mutable_send_max();
  void set_allocated_send_max(::org::xrpl::rpc::v1::SendMax* send_max);

  // .org.xrpl.rpc.v1.DeliverMin deliver_min = 7;
  bool has_deliver_min() const;
  void clear_deliver_min();
  static const int kDeliverMinFieldNumber = 7;
  const ::org::xrpl::rpc::v1::DeliverMin& deliver_min() const;
  ::org::xrpl::rpc::v1::DeliverMin* release_deliver_min();
  ::org::xrpl::rpc::v1::DeliverMin* mutable_deliver_min();
  void set_allocated_deliver_min(::org::xrpl::rpc::v1::DeliverMin* deliver_min);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Payment)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_Path > paths_;
  ::org::xrpl::rpc::v1::Amount* amount_;
  ::org::xrpl::rpc::v1::Destination* destination_;
  ::org::xrpl::rpc::v1::DestinationTag* destination_tag_;
  ::org::xrpl::rpc::v1::InvoiceID* invoice_id_;
  ::org::xrpl::rpc::v1::SendMax* send_max_;
  ::org::xrpl::rpc::v1::DeliverMin* deliver_min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PaymentChannelClaim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.PaymentChannelClaim) */ {
 public:
  PaymentChannelClaim();
  virtual ~PaymentChannelClaim();

  PaymentChannelClaim(const PaymentChannelClaim& from);
  PaymentChannelClaim(PaymentChannelClaim&& from) noexcept
    : PaymentChannelClaim() {
    *this = ::std::move(from);
  }

  inline PaymentChannelClaim& operator=(const PaymentChannelClaim& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentChannelClaim& operator=(PaymentChannelClaim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentChannelClaim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymentChannelClaim* internal_default_instance() {
    return reinterpret_cast<const PaymentChannelClaim*>(
               &_PaymentChannelClaim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(PaymentChannelClaim* other);
  friend void swap(PaymentChannelClaim& a, PaymentChannelClaim& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PaymentChannelClaim* New() const final {
    return CreateMaybeMessage<PaymentChannelClaim>(nullptr);
  }

  PaymentChannelClaim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentChannelClaim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentChannelClaim& from);
  void MergeFrom(const PaymentChannelClaim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentChannelClaim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.PaymentChannelClaim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Channel channel = 1;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Channel& channel() const;
  ::org::xrpl::rpc::v1::Channel* release_channel();
  ::org::xrpl::rpc::v1::Channel* mutable_channel();
  void set_allocated_channel(::org::xrpl::rpc::v1::Channel* channel);

  // .org.xrpl.rpc.v1.Balance balance = 2;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Balance& balance() const;
  ::org::xrpl::rpc::v1::Balance* release_balance();
  ::org::xrpl::rpc::v1::Balance* mutable_balance();
  void set_allocated_balance(::org::xrpl::rpc::v1::Balance* balance);

  // .org.xrpl.rpc.v1.Amount amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  const ::org::xrpl::rpc::v1::Amount& amount() const;
  ::org::xrpl::rpc::v1::Amount* release_amount();
  ::org::xrpl::rpc::v1::Amount* mutable_amount();
  void set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount);

  // .org.xrpl.rpc.v1.PaymentChannelSignature payment_channel_signature = 4;
  bool has_payment_channel_signature() const;
  void clear_payment_channel_signature();
  static const int kPaymentChannelSignatureFieldNumber = 4;
  const ::org::xrpl::rpc::v1::PaymentChannelSignature& payment_channel_signature() const;
  ::org::xrpl::rpc::v1::PaymentChannelSignature* release_payment_channel_signature();
  ::org::xrpl::rpc::v1::PaymentChannelSignature* mutable_payment_channel_signature();
  void set_allocated_payment_channel_signature(::org::xrpl::rpc::v1::PaymentChannelSignature* payment_channel_signature);

  // .org.xrpl.rpc.v1.PublicKey public_key = 5;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 5;
  const ::org::xrpl::rpc::v1::PublicKey& public_key() const;
  ::org::xrpl::rpc::v1::PublicKey* release_public_key();
  ::org::xrpl::rpc::v1::PublicKey* mutable_public_key();
  void set_allocated_public_key(::org::xrpl::rpc::v1::PublicKey* public_key);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.PaymentChannelClaim)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Channel* channel_;
  ::org::xrpl::rpc::v1::Balance* balance_;
  ::org::xrpl::rpc::v1::Amount* amount_;
  ::org::xrpl::rpc::v1::PaymentChannelSignature* payment_channel_signature_;
  ::org::xrpl::rpc::v1::PublicKey* public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PaymentChannelCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.PaymentChannelCreate) */ {
 public:
  PaymentChannelCreate();
  virtual ~PaymentChannelCreate();

  PaymentChannelCreate(const PaymentChannelCreate& from);
  PaymentChannelCreate(PaymentChannelCreate&& from) noexcept
    : PaymentChannelCreate() {
    *this = ::std::move(from);
  }

  inline PaymentChannelCreate& operator=(const PaymentChannelCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentChannelCreate& operator=(PaymentChannelCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentChannelCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymentChannelCreate* internal_default_instance() {
    return reinterpret_cast<const PaymentChannelCreate*>(
               &_PaymentChannelCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(PaymentChannelCreate* other);
  friend void swap(PaymentChannelCreate& a, PaymentChannelCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PaymentChannelCreate* New() const final {
    return CreateMaybeMessage<PaymentChannelCreate>(nullptr);
  }

  PaymentChannelCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentChannelCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentChannelCreate& from);
  void MergeFrom(const PaymentChannelCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentChannelCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.PaymentChannelCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Amount amount = 1;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Amount& amount() const;
  ::org::xrpl::rpc::v1::Amount* release_amount();
  ::org::xrpl::rpc::v1::Amount* mutable_amount();
  void set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount);

  // .org.xrpl.rpc.v1.Destination destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Destination& destination() const;
  ::org::xrpl::rpc::v1::Destination* release_destination();
  ::org::xrpl::rpc::v1::Destination* mutable_destination();
  void set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination);

  // .org.xrpl.rpc.v1.SettleDelay settle_delay = 3;
  bool has_settle_delay() const;
  void clear_settle_delay();
  static const int kSettleDelayFieldNumber = 3;
  const ::org::xrpl::rpc::v1::SettleDelay& settle_delay() const;
  ::org::xrpl::rpc::v1::SettleDelay* release_settle_delay();
  ::org::xrpl::rpc::v1::SettleDelay* mutable_settle_delay();
  void set_allocated_settle_delay(::org::xrpl::rpc::v1::SettleDelay* settle_delay);

  // .org.xrpl.rpc.v1.PublicKey public_key = 4;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 4;
  const ::org::xrpl::rpc::v1::PublicKey& public_key() const;
  ::org::xrpl::rpc::v1::PublicKey* release_public_key();
  ::org::xrpl::rpc::v1::PublicKey* mutable_public_key();
  void set_allocated_public_key(::org::xrpl::rpc::v1::PublicKey* public_key);

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
  bool has_cancel_after() const;
  void clear_cancel_after();
  static const int kCancelAfterFieldNumber = 5;
  const ::org::xrpl::rpc::v1::CancelAfter& cancel_after() const;
  ::org::xrpl::rpc::v1::CancelAfter* release_cancel_after();
  ::org::xrpl::rpc::v1::CancelAfter* mutable_cancel_after();
  void set_allocated_cancel_after(::org::xrpl::rpc::v1::CancelAfter* cancel_after);

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  bool has_destination_tag() const;
  void clear_destination_tag();
  static const int kDestinationTagFieldNumber = 6;
  const ::org::xrpl::rpc::v1::DestinationTag& destination_tag() const;
  ::org::xrpl::rpc::v1::DestinationTag* release_destination_tag();
  ::org::xrpl::rpc::v1::DestinationTag* mutable_destination_tag();
  void set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.PaymentChannelCreate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Amount* amount_;
  ::org::xrpl::rpc::v1::Destination* destination_;
  ::org::xrpl::rpc::v1::SettleDelay* settle_delay_;
  ::org::xrpl::rpc::v1::PublicKey* public_key_;
  ::org::xrpl::rpc::v1::CancelAfter* cancel_after_;
  ::org::xrpl::rpc::v1::DestinationTag* destination_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PaymentChannelFund :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.PaymentChannelFund) */ {
 public:
  PaymentChannelFund();
  virtual ~PaymentChannelFund();

  PaymentChannelFund(const PaymentChannelFund& from);
  PaymentChannelFund(PaymentChannelFund&& from) noexcept
    : PaymentChannelFund() {
    *this = ::std::move(from);
  }

  inline PaymentChannelFund& operator=(const PaymentChannelFund& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentChannelFund& operator=(PaymentChannelFund&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentChannelFund& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymentChannelFund* internal_default_instance() {
    return reinterpret_cast<const PaymentChannelFund*>(
               &_PaymentChannelFund_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(PaymentChannelFund* other);
  friend void swap(PaymentChannelFund& a, PaymentChannelFund& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PaymentChannelFund* New() const final {
    return CreateMaybeMessage<PaymentChannelFund>(nullptr);
  }

  PaymentChannelFund* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentChannelFund>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentChannelFund& from);
  void MergeFrom(const PaymentChannelFund& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentChannelFund* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.PaymentChannelFund";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Channel channel = 1;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::org::xrpl::rpc::v1::Channel& channel() const;
  ::org::xrpl::rpc::v1::Channel* release_channel();
  ::org::xrpl::rpc::v1::Channel* mutable_channel();
  void set_allocated_channel(::org::xrpl::rpc::v1::Channel* channel);

  // .org.xrpl.rpc.v1.Amount amount = 2;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::org::xrpl::rpc::v1::Amount& amount() const;
  ::org::xrpl::rpc::v1::Amount* release_amount();
  ::org::xrpl::rpc::v1::Amount* mutable_amount();
  void set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount);

  // .org.xrpl.rpc.v1.Expiration expiration = 3;
  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 3;
  const ::org::xrpl::rpc::v1::Expiration& expiration() const;
  ::org::xrpl::rpc::v1::Expiration* release_expiration();
  ::org::xrpl::rpc::v1::Expiration* mutable_expiration();
  void set_allocated_expiration(::org::xrpl::rpc::v1::Expiration* expiration);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.PaymentChannelFund)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Channel* channel_;
  ::org::xrpl::rpc::v1::Amount* amount_;
  ::org::xrpl::rpc::v1::Expiration* expiration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SetRegularKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.SetRegularKey) */ {
 public:
  SetRegularKey();
  virtual ~SetRegularKey();

  SetRegularKey(const SetRegularKey& from);
  SetRegularKey(SetRegularKey&& from) noexcept
    : SetRegularKey() {
    *this = ::std::move(from);
  }

  inline SetRegularKey& operator=(const SetRegularKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRegularKey& operator=(SetRegularKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRegularKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRegularKey* internal_default_instance() {
    return reinterpret_cast<const SetRegularKey*>(
               &_SetRegularKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SetRegularKey* other);
  friend void swap(SetRegularKey& a, SetRegularKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRegularKey* New() const final {
    return CreateMaybeMessage<SetRegularKey>(nullptr);
  }

  SetRegularKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRegularKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRegularKey& from);
  void MergeFrom(const SetRegularKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRegularKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.SetRegularKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.RegularKey regular_key = 1;
  bool has_regular_key() const;
  void clear_regular_key();
  static const int kRegularKeyFieldNumber = 1;
  const ::org::xrpl::rpc::v1::RegularKey& regular_key() const;
  ::org::xrpl::rpc::v1::RegularKey* release_regular_key();
  ::org::xrpl::rpc::v1::RegularKey* mutable_regular_key();
  void set_allocated_regular_key(::org::xrpl::rpc::v1::RegularKey* regular_key);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.SetRegularKey)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::RegularKey* regular_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SignerListSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.SignerListSet) */ {
 public:
  SignerListSet();
  virtual ~SignerListSet();

  SignerListSet(const SignerListSet& from);
  SignerListSet(SignerListSet&& from) noexcept
    : SignerListSet() {
    *this = ::std::move(from);
  }

  inline SignerListSet& operator=(const SignerListSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignerListSet& operator=(SignerListSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignerListSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignerListSet* internal_default_instance() {
    return reinterpret_cast<const SignerListSet*>(
               &_SignerListSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(SignerListSet* other);
  friend void swap(SignerListSet& a, SignerListSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignerListSet* New() const final {
    return CreateMaybeMessage<SignerListSet>(nullptr);
  }

  SignerListSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignerListSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignerListSet& from);
  void MergeFrom(const SignerListSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignerListSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.SignerListSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 2;
  int signer_entries_size() const;
  void clear_signer_entries();
  static const int kSignerEntriesFieldNumber = 2;
  ::org::xrpl::rpc::v1::SignerEntry* mutable_signer_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::SignerEntry >*
      mutable_signer_entries();
  const ::org::xrpl::rpc::v1::SignerEntry& signer_entries(int index) const;
  ::org::xrpl::rpc::v1::SignerEntry* add_signer_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::SignerEntry >&
      signer_entries() const;

  // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 1;
  bool has_signer_quorum() const;
  void clear_signer_quorum();
  static const int kSignerQuorumFieldNumber = 1;
  const ::org::xrpl::rpc::v1::SignerQuorum& signer_quorum() const;
  ::org::xrpl::rpc::v1::SignerQuorum* release_signer_quorum();
  ::org::xrpl::rpc::v1::SignerQuorum* mutable_signer_quorum();
  void set_allocated_signer_quorum(::org::xrpl::rpc::v1::SignerQuorum* signer_quorum);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.SignerListSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::SignerEntry > signer_entries_;
  ::org::xrpl::rpc::v1::SignerQuorum* signer_quorum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TicketCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.TicketCreate) */ {
 public:
  TicketCreate();
  virtual ~TicketCreate();

  TicketCreate(const TicketCreate& from);
  TicketCreate(TicketCreate&& from) noexcept
    : TicketCreate() {
    *this = ::std::move(from);
  }

  inline TicketCreate& operator=(const TicketCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TicketCreate& operator=(TicketCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TicketCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TicketCreate* internal_default_instance() {
    return reinterpret_cast<const TicketCreate*>(
               &_TicketCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(TicketCreate* other);
  friend void swap(TicketCreate& a, TicketCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TicketCreate* New() const final {
    return CreateMaybeMessage<TicketCreate>(nullptr);
  }

  TicketCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TicketCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TicketCreate& from);
  void MergeFrom(const TicketCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TicketCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.TicketCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.TicketCount count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::TicketCount& count() const;
  ::org::xrpl::rpc::v1::TicketCount* release_count();
  ::org::xrpl::rpc::v1::TicketCount* mutable_count();
  void set_allocated_count(::org::xrpl::rpc::v1::TicketCount* count);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.TicketCreate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::TicketCount* count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TrustSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.TrustSet) */ {
 public:
  TrustSet();
  virtual ~TrustSet();

  TrustSet(const TrustSet& from);
  TrustSet(TrustSet&& from) noexcept
    : TrustSet() {
    *this = ::std::move(from);
  }

  inline TrustSet& operator=(const TrustSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustSet& operator=(TrustSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrustSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustSet* internal_default_instance() {
    return reinterpret_cast<const TrustSet*>(
               &_TrustSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(TrustSet* other);
  friend void swap(TrustSet& a, TrustSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrustSet* New() const final {
    return CreateMaybeMessage<TrustSet>(nullptr);
  }

  TrustSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrustSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrustSet& from);
  void MergeFrom(const TrustSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.TrustSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.LimitAmount limit_amount = 1;
  bool has_limit_amount() const;
  void clear_limit_amount();
  static const int kLimitAmountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::LimitAmount& limit_amount() const;
  ::org::xrpl::rpc::v1::LimitAmount* release_limit_amount();
  ::org::xrpl::rpc::v1::LimitAmount* mutable_limit_amount();
  void set_allocated_limit_amount(::org::xrpl::rpc::v1::LimitAmount* limit_amount);

  // .org.xrpl.rpc.v1.QualityIn quality_in = 2;
  bool has_quality_in() const;
  void clear_quality_in();
  static const int kQualityInFieldNumber = 2;
  const ::org::xrpl::rpc::v1::QualityIn& quality_in() const;
  ::org::xrpl::rpc::v1::QualityIn* release_quality_in();
  ::org::xrpl::rpc::v1::QualityIn* mutable_quality_in();
  void set_allocated_quality_in(::org::xrpl::rpc::v1::QualityIn* quality_in);

  // .org.xrpl.rpc.v1.QualityOut quality_out = 3;
  bool has_quality_out() const;
  void clear_quality_out();
  static const int kQualityOutFieldNumber = 3;
  const ::org::xrpl::rpc::v1::QualityOut& quality_out() const;
  ::org::xrpl::rpc::v1::QualityOut* release_quality_out();
  ::org::xrpl::rpc::v1::QualityOut* mutable_quality_out();
  void set_allocated_quality_out(::org::xrpl::rpc::v1::QualityOut* quality_out);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.TrustSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::LimitAmount* limit_amount_;
  ::org::xrpl::rpc::v1::QualityIn* quality_in_;
  ::org::xrpl::rpc::v1::QualityOut* quality_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// .org.xrpl.rpc.v1.Account account = 1;
inline bool Transaction::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Account& Transaction::account() const {
  const ::org::xrpl::rpc::v1::Account* p = account_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Account*>(
      &::org::xrpl::rpc::v1::_Account_default_instance_);
}
inline ::org::xrpl::rpc::v1::Account* Transaction::release_account() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.account)
  
  ::org::xrpl::rpc::v1::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Account* Transaction::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Account>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.account)
  return account_;
}
inline void Transaction::set_allocated_account(::org::xrpl::rpc::v1::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.account)
}

// .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
inline bool Transaction::has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::XRPDropsAmount& Transaction::fee() const {
  const ::org::xrpl::rpc::v1::XRPDropsAmount* p = fee_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.fee)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      &::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Transaction::release_fee() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.fee)
  
  ::org::xrpl::rpc::v1::XRPDropsAmount* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Transaction::mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::XRPDropsAmount>(GetArenaNoVirtual());
    fee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.fee)
  return fee_;
}
inline void Transaction::set_allocated_fee(::org::xrpl::rpc::v1::XRPDropsAmount* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.fee)
}

// .org.xrpl.rpc.v1.Sequence sequence = 3;
inline bool Transaction::has_sequence() const {
  return this != internal_default_instance() && sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Sequence& Transaction::sequence() const {
  const ::org::xrpl::rpc::v1::Sequence* p = sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Sequence*>(
      &::org::xrpl::rpc::v1::_Sequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::Sequence* Transaction::release_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.sequence)
  
  ::org::xrpl::rpc::v1::Sequence* temp = sequence_;
  sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Sequence* Transaction::mutable_sequence() {
  
  if (sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Sequence>(GetArenaNoVirtual());
    sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.sequence)
  return sequence_;
}
inline void Transaction::set_allocated_sequence(::org::xrpl::rpc::v1::Sequence* sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequence_);
  }
  if (sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequence, submessage_arena);
    }
    
  } else {
    
  }
  sequence_ = sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.sequence)
}

// .org.xrpl.rpc.v1.Payment payment = 4;
inline bool Transaction::has_payment() const {
  return transaction_data_case() == kPayment;
}
inline void Transaction::set_has_payment() {
  _oneof_case_[0] = kPayment;
}
inline void Transaction::clear_payment() {
  if (has_payment()) {
    delete transaction_data_.payment_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::Payment* Transaction::release_payment() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.payment)
  if (has_payment()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::Payment* temp = transaction_data_.payment_;
    transaction_data_.payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::Payment& Transaction::payment() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.payment)
  return has_payment()
      ? *transaction_data_.payment_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::Payment*>(&::org::xrpl::rpc::v1::_Payment_default_instance_);
}
inline ::org::xrpl::rpc::v1::Payment* Transaction::mutable_payment() {
  if (!has_payment()) {
    clear_transaction_data();
    set_has_payment();
    transaction_data_.payment_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::Payment >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.payment)
  return transaction_data_.payment_;
}

// .org.xrpl.rpc.v1.AccountSet account_set = 13;
inline bool Transaction::has_account_set() const {
  return transaction_data_case() == kAccountSet;
}
inline void Transaction::set_has_account_set() {
  _oneof_case_[0] = kAccountSet;
}
inline void Transaction::clear_account_set() {
  if (has_account_set()) {
    delete transaction_data_.account_set_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::AccountSet* Transaction::release_account_set() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.account_set)
  if (has_account_set()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::AccountSet* temp = transaction_data_.account_set_;
    transaction_data_.account_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::AccountSet& Transaction::account_set() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.account_set)
  return has_account_set()
      ? *transaction_data_.account_set_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::AccountSet*>(&::org::xrpl::rpc::v1::_AccountSet_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountSet* Transaction::mutable_account_set() {
  if (!has_account_set()) {
    clear_transaction_data();
    set_has_account_set();
    transaction_data_.account_set_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::AccountSet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.account_set)
  return transaction_data_.account_set_;
}

// .org.xrpl.rpc.v1.AccountDelete account_delete = 14;
inline bool Transaction::has_account_delete() const {
  return transaction_data_case() == kAccountDelete;
}
inline void Transaction::set_has_account_delete() {
  _oneof_case_[0] = kAccountDelete;
}
inline void Transaction::clear_account_delete() {
  if (has_account_delete()) {
    delete transaction_data_.account_delete_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::AccountDelete* Transaction::release_account_delete() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.account_delete)
  if (has_account_delete()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::AccountDelete* temp = transaction_data_.account_delete_;
    transaction_data_.account_delete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::AccountDelete& Transaction::account_delete() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.account_delete)
  return has_account_delete()
      ? *transaction_data_.account_delete_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::AccountDelete*>(&::org::xrpl::rpc::v1::_AccountDelete_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountDelete* Transaction::mutable_account_delete() {
  if (!has_account_delete()) {
    clear_transaction_data();
    set_has_account_delete();
    transaction_data_.account_delete_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::AccountDelete >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.account_delete)
  return transaction_data_.account_delete_;
}

// .org.xrpl.rpc.v1.CheckCancel check_cancel = 15;
inline bool Transaction::has_check_cancel() const {
  return transaction_data_case() == kCheckCancel;
}
inline void Transaction::set_has_check_cancel() {
  _oneof_case_[0] = kCheckCancel;
}
inline void Transaction::clear_check_cancel() {
  if (has_check_cancel()) {
    delete transaction_data_.check_cancel_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::CheckCancel* Transaction::release_check_cancel() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.check_cancel)
  if (has_check_cancel()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::CheckCancel* temp = transaction_data_.check_cancel_;
    transaction_data_.check_cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::CheckCancel& Transaction::check_cancel() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.check_cancel)
  return has_check_cancel()
      ? *transaction_data_.check_cancel_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::CheckCancel*>(&::org::xrpl::rpc::v1::_CheckCancel_default_instance_);
}
inline ::org::xrpl::rpc::v1::CheckCancel* Transaction::mutable_check_cancel() {
  if (!has_check_cancel()) {
    clear_transaction_data();
    set_has_check_cancel();
    transaction_data_.check_cancel_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::CheckCancel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.check_cancel)
  return transaction_data_.check_cancel_;
}

// .org.xrpl.rpc.v1.CheckCash check_cash = 16;
inline bool Transaction::has_check_cash() const {
  return transaction_data_case() == kCheckCash;
}
inline void Transaction::set_has_check_cash() {
  _oneof_case_[0] = kCheckCash;
}
inline void Transaction::clear_check_cash() {
  if (has_check_cash()) {
    delete transaction_data_.check_cash_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::CheckCash* Transaction::release_check_cash() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.check_cash)
  if (has_check_cash()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::CheckCash* temp = transaction_data_.check_cash_;
    transaction_data_.check_cash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::CheckCash& Transaction::check_cash() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.check_cash)
  return has_check_cash()
      ? *transaction_data_.check_cash_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::CheckCash*>(&::org::xrpl::rpc::v1::_CheckCash_default_instance_);
}
inline ::org::xrpl::rpc::v1::CheckCash* Transaction::mutable_check_cash() {
  if (!has_check_cash()) {
    clear_transaction_data();
    set_has_check_cash();
    transaction_data_.check_cash_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::CheckCash >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.check_cash)
  return transaction_data_.check_cash_;
}

// .org.xrpl.rpc.v1.CheckCreate check_create = 17;
inline bool Transaction::has_check_create() const {
  return transaction_data_case() == kCheckCreate;
}
inline void Transaction::set_has_check_create() {
  _oneof_case_[0] = kCheckCreate;
}
inline void Transaction::clear_check_create() {
  if (has_check_create()) {
    delete transaction_data_.check_create_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::CheckCreate* Transaction::release_check_create() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.check_create)
  if (has_check_create()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::CheckCreate* temp = transaction_data_.check_create_;
    transaction_data_.check_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::CheckCreate& Transaction::check_create() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.check_create)
  return has_check_create()
      ? *transaction_data_.check_create_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::CheckCreate*>(&::org::xrpl::rpc::v1::_CheckCreate_default_instance_);
}
inline ::org::xrpl::rpc::v1::CheckCreate* Transaction::mutable_check_create() {
  if (!has_check_create()) {
    clear_transaction_data();
    set_has_check_create();
    transaction_data_.check_create_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::CheckCreate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.check_create)
  return transaction_data_.check_create_;
}

// .org.xrpl.rpc.v1.DepositPreauth deposit_preauth = 18;
inline bool Transaction::has_deposit_preauth() const {
  return transaction_data_case() == kDepositPreauth;
}
inline void Transaction::set_has_deposit_preauth() {
  _oneof_case_[0] = kDepositPreauth;
}
inline void Transaction::clear_deposit_preauth() {
  if (has_deposit_preauth()) {
    delete transaction_data_.deposit_preauth_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::DepositPreauth* Transaction::release_deposit_preauth() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.deposit_preauth)
  if (has_deposit_preauth()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::DepositPreauth* temp = transaction_data_.deposit_preauth_;
    transaction_data_.deposit_preauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::DepositPreauth& Transaction::deposit_preauth() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.deposit_preauth)
  return has_deposit_preauth()
      ? *transaction_data_.deposit_preauth_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::DepositPreauth*>(&::org::xrpl::rpc::v1::_DepositPreauth_default_instance_);
}
inline ::org::xrpl::rpc::v1::DepositPreauth* Transaction::mutable_deposit_preauth() {
  if (!has_deposit_preauth()) {
    clear_transaction_data();
    set_has_deposit_preauth();
    transaction_data_.deposit_preauth_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::DepositPreauth >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.deposit_preauth)
  return transaction_data_.deposit_preauth_;
}

// .org.xrpl.rpc.v1.EscrowCancel escrow_cancel = 19;
inline bool Transaction::has_escrow_cancel() const {
  return transaction_data_case() == kEscrowCancel;
}
inline void Transaction::set_has_escrow_cancel() {
  _oneof_case_[0] = kEscrowCancel;
}
inline void Transaction::clear_escrow_cancel() {
  if (has_escrow_cancel()) {
    delete transaction_data_.escrow_cancel_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::EscrowCancel* Transaction::release_escrow_cancel() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.escrow_cancel)
  if (has_escrow_cancel()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::EscrowCancel* temp = transaction_data_.escrow_cancel_;
    transaction_data_.escrow_cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::EscrowCancel& Transaction::escrow_cancel() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.escrow_cancel)
  return has_escrow_cancel()
      ? *transaction_data_.escrow_cancel_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::EscrowCancel*>(&::org::xrpl::rpc::v1::_EscrowCancel_default_instance_);
}
inline ::org::xrpl::rpc::v1::EscrowCancel* Transaction::mutable_escrow_cancel() {
  if (!has_escrow_cancel()) {
    clear_transaction_data();
    set_has_escrow_cancel();
    transaction_data_.escrow_cancel_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::EscrowCancel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.escrow_cancel)
  return transaction_data_.escrow_cancel_;
}

// .org.xrpl.rpc.v1.EscrowCreate escrow_create = 20;
inline bool Transaction::has_escrow_create() const {
  return transaction_data_case() == kEscrowCreate;
}
inline void Transaction::set_has_escrow_create() {
  _oneof_case_[0] = kEscrowCreate;
}
inline void Transaction::clear_escrow_create() {
  if (has_escrow_create()) {
    delete transaction_data_.escrow_create_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::EscrowCreate* Transaction::release_escrow_create() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.escrow_create)
  if (has_escrow_create()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::EscrowCreate* temp = transaction_data_.escrow_create_;
    transaction_data_.escrow_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::EscrowCreate& Transaction::escrow_create() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.escrow_create)
  return has_escrow_create()
      ? *transaction_data_.escrow_create_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::EscrowCreate*>(&::org::xrpl::rpc::v1::_EscrowCreate_default_instance_);
}
inline ::org::xrpl::rpc::v1::EscrowCreate* Transaction::mutable_escrow_create() {
  if (!has_escrow_create()) {
    clear_transaction_data();
    set_has_escrow_create();
    transaction_data_.escrow_create_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::EscrowCreate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.escrow_create)
  return transaction_data_.escrow_create_;
}

// .org.xrpl.rpc.v1.EscrowFinish escrow_finish = 21;
inline bool Transaction::has_escrow_finish() const {
  return transaction_data_case() == kEscrowFinish;
}
inline void Transaction::set_has_escrow_finish() {
  _oneof_case_[0] = kEscrowFinish;
}
inline void Transaction::clear_escrow_finish() {
  if (has_escrow_finish()) {
    delete transaction_data_.escrow_finish_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::EscrowFinish* Transaction::release_escrow_finish() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.escrow_finish)
  if (has_escrow_finish()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::EscrowFinish* temp = transaction_data_.escrow_finish_;
    transaction_data_.escrow_finish_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::EscrowFinish& Transaction::escrow_finish() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.escrow_finish)
  return has_escrow_finish()
      ? *transaction_data_.escrow_finish_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::EscrowFinish*>(&::org::xrpl::rpc::v1::_EscrowFinish_default_instance_);
}
inline ::org::xrpl::rpc::v1::EscrowFinish* Transaction::mutable_escrow_finish() {
  if (!has_escrow_finish()) {
    clear_transaction_data();
    set_has_escrow_finish();
    transaction_data_.escrow_finish_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::EscrowFinish >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.escrow_finish)
  return transaction_data_.escrow_finish_;
}

// .org.xrpl.rpc.v1.OfferCancel offer_cancel = 22;
inline bool Transaction::has_offer_cancel() const {
  return transaction_data_case() == kOfferCancel;
}
inline void Transaction::set_has_offer_cancel() {
  _oneof_case_[0] = kOfferCancel;
}
inline void Transaction::clear_offer_cancel() {
  if (has_offer_cancel()) {
    delete transaction_data_.offer_cancel_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::OfferCancel* Transaction::release_offer_cancel() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.offer_cancel)
  if (has_offer_cancel()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::OfferCancel* temp = transaction_data_.offer_cancel_;
    transaction_data_.offer_cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::OfferCancel& Transaction::offer_cancel() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.offer_cancel)
  return has_offer_cancel()
      ? *transaction_data_.offer_cancel_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::OfferCancel*>(&::org::xrpl::rpc::v1::_OfferCancel_default_instance_);
}
inline ::org::xrpl::rpc::v1::OfferCancel* Transaction::mutable_offer_cancel() {
  if (!has_offer_cancel()) {
    clear_transaction_data();
    set_has_offer_cancel();
    transaction_data_.offer_cancel_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::OfferCancel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.offer_cancel)
  return transaction_data_.offer_cancel_;
}

// .org.xrpl.rpc.v1.OfferCreate offer_create = 23;
inline bool Transaction::has_offer_create() const {
  return transaction_data_case() == kOfferCreate;
}
inline void Transaction::set_has_offer_create() {
  _oneof_case_[0] = kOfferCreate;
}
inline void Transaction::clear_offer_create() {
  if (has_offer_create()) {
    delete transaction_data_.offer_create_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::OfferCreate* Transaction::release_offer_create() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.offer_create)
  if (has_offer_create()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::OfferCreate* temp = transaction_data_.offer_create_;
    transaction_data_.offer_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::OfferCreate& Transaction::offer_create() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.offer_create)
  return has_offer_create()
      ? *transaction_data_.offer_create_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::OfferCreate*>(&::org::xrpl::rpc::v1::_OfferCreate_default_instance_);
}
inline ::org::xrpl::rpc::v1::OfferCreate* Transaction::mutable_offer_create() {
  if (!has_offer_create()) {
    clear_transaction_data();
    set_has_offer_create();
    transaction_data_.offer_create_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::OfferCreate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.offer_create)
  return transaction_data_.offer_create_;
}

// .org.xrpl.rpc.v1.PaymentChannelClaim payment_channel_claim = 24;
inline bool Transaction::has_payment_channel_claim() const {
  return transaction_data_case() == kPaymentChannelClaim;
}
inline void Transaction::set_has_payment_channel_claim() {
  _oneof_case_[0] = kPaymentChannelClaim;
}
inline void Transaction::clear_payment_channel_claim() {
  if (has_payment_channel_claim()) {
    delete transaction_data_.payment_channel_claim_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::PaymentChannelClaim* Transaction::release_payment_channel_claim() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.payment_channel_claim)
  if (has_payment_channel_claim()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::PaymentChannelClaim* temp = transaction_data_.payment_channel_claim_;
    transaction_data_.payment_channel_claim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::PaymentChannelClaim& Transaction::payment_channel_claim() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.payment_channel_claim)
  return has_payment_channel_claim()
      ? *transaction_data_.payment_channel_claim_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::PaymentChannelClaim*>(&::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_);
}
inline ::org::xrpl::rpc::v1::PaymentChannelClaim* Transaction::mutable_payment_channel_claim() {
  if (!has_payment_channel_claim()) {
    clear_transaction_data();
    set_has_payment_channel_claim();
    transaction_data_.payment_channel_claim_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::PaymentChannelClaim >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.payment_channel_claim)
  return transaction_data_.payment_channel_claim_;
}

// .org.xrpl.rpc.v1.PaymentChannelCreate payment_channel_create = 25;
inline bool Transaction::has_payment_channel_create() const {
  return transaction_data_case() == kPaymentChannelCreate;
}
inline void Transaction::set_has_payment_channel_create() {
  _oneof_case_[0] = kPaymentChannelCreate;
}
inline void Transaction::clear_payment_channel_create() {
  if (has_payment_channel_create()) {
    delete transaction_data_.payment_channel_create_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::PaymentChannelCreate* Transaction::release_payment_channel_create() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.payment_channel_create)
  if (has_payment_channel_create()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::PaymentChannelCreate* temp = transaction_data_.payment_channel_create_;
    transaction_data_.payment_channel_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::PaymentChannelCreate& Transaction::payment_channel_create() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.payment_channel_create)
  return has_payment_channel_create()
      ? *transaction_data_.payment_channel_create_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::PaymentChannelCreate*>(&::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_);
}
inline ::org::xrpl::rpc::v1::PaymentChannelCreate* Transaction::mutable_payment_channel_create() {
  if (!has_payment_channel_create()) {
    clear_transaction_data();
    set_has_payment_channel_create();
    transaction_data_.payment_channel_create_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::PaymentChannelCreate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.payment_channel_create)
  return transaction_data_.payment_channel_create_;
}

// .org.xrpl.rpc.v1.PaymentChannelFund payment_channel_fund = 26;
inline bool Transaction::has_payment_channel_fund() const {
  return transaction_data_case() == kPaymentChannelFund;
}
inline void Transaction::set_has_payment_channel_fund() {
  _oneof_case_[0] = kPaymentChannelFund;
}
inline void Transaction::clear_payment_channel_fund() {
  if (has_payment_channel_fund()) {
    delete transaction_data_.payment_channel_fund_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::PaymentChannelFund* Transaction::release_payment_channel_fund() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.payment_channel_fund)
  if (has_payment_channel_fund()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::PaymentChannelFund* temp = transaction_data_.payment_channel_fund_;
    transaction_data_.payment_channel_fund_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::PaymentChannelFund& Transaction::payment_channel_fund() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.payment_channel_fund)
  return has_payment_channel_fund()
      ? *transaction_data_.payment_channel_fund_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::PaymentChannelFund*>(&::org::xrpl::rpc::v1::_PaymentChannelFund_default_instance_);
}
inline ::org::xrpl::rpc::v1::PaymentChannelFund* Transaction::mutable_payment_channel_fund() {
  if (!has_payment_channel_fund()) {
    clear_transaction_data();
    set_has_payment_channel_fund();
    transaction_data_.payment_channel_fund_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::PaymentChannelFund >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.payment_channel_fund)
  return transaction_data_.payment_channel_fund_;
}

// .org.xrpl.rpc.v1.SetRegularKey set_regular_key = 27;
inline bool Transaction::has_set_regular_key() const {
  return transaction_data_case() == kSetRegularKey;
}
inline void Transaction::set_has_set_regular_key() {
  _oneof_case_[0] = kSetRegularKey;
}
inline void Transaction::clear_set_regular_key() {
  if (has_set_regular_key()) {
    delete transaction_data_.set_regular_key_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::SetRegularKey* Transaction::release_set_regular_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.set_regular_key)
  if (has_set_regular_key()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::SetRegularKey* temp = transaction_data_.set_regular_key_;
    transaction_data_.set_regular_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::SetRegularKey& Transaction::set_regular_key() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.set_regular_key)
  return has_set_regular_key()
      ? *transaction_data_.set_regular_key_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::SetRegularKey*>(&::org::xrpl::rpc::v1::_SetRegularKey_default_instance_);
}
inline ::org::xrpl::rpc::v1::SetRegularKey* Transaction::mutable_set_regular_key() {
  if (!has_set_regular_key()) {
    clear_transaction_data();
    set_has_set_regular_key();
    transaction_data_.set_regular_key_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::SetRegularKey >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.set_regular_key)
  return transaction_data_.set_regular_key_;
}

// .org.xrpl.rpc.v1.SignerListSet signer_list_set = 28;
inline bool Transaction::has_signer_list_set() const {
  return transaction_data_case() == kSignerListSet;
}
inline void Transaction::set_has_signer_list_set() {
  _oneof_case_[0] = kSignerListSet;
}
inline void Transaction::clear_signer_list_set() {
  if (has_signer_list_set()) {
    delete transaction_data_.signer_list_set_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::SignerListSet* Transaction::release_signer_list_set() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.signer_list_set)
  if (has_signer_list_set()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::SignerListSet* temp = transaction_data_.signer_list_set_;
    transaction_data_.signer_list_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::SignerListSet& Transaction::signer_list_set() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.signer_list_set)
  return has_signer_list_set()
      ? *transaction_data_.signer_list_set_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::SignerListSet*>(&::org::xrpl::rpc::v1::_SignerListSet_default_instance_);
}
inline ::org::xrpl::rpc::v1::SignerListSet* Transaction::mutable_signer_list_set() {
  if (!has_signer_list_set()) {
    clear_transaction_data();
    set_has_signer_list_set();
    transaction_data_.signer_list_set_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::SignerListSet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.signer_list_set)
  return transaction_data_.signer_list_set_;
}

// .org.xrpl.rpc.v1.TicketCreate ticket_create = 30;
inline bool Transaction::has_ticket_create() const {
  return transaction_data_case() == kTicketCreate;
}
inline void Transaction::set_has_ticket_create() {
  _oneof_case_[0] = kTicketCreate;
}
inline void Transaction::clear_ticket_create() {
  if (has_ticket_create()) {
    delete transaction_data_.ticket_create_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::TicketCreate* Transaction::release_ticket_create() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.ticket_create)
  if (has_ticket_create()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::TicketCreate* temp = transaction_data_.ticket_create_;
    transaction_data_.ticket_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::TicketCreate& Transaction::ticket_create() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.ticket_create)
  return has_ticket_create()
      ? *transaction_data_.ticket_create_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::TicketCreate*>(&::org::xrpl::rpc::v1::_TicketCreate_default_instance_);
}
inline ::org::xrpl::rpc::v1::TicketCreate* Transaction::mutable_ticket_create() {
  if (!has_ticket_create()) {
    clear_transaction_data();
    set_has_ticket_create();
    transaction_data_.ticket_create_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::TicketCreate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.ticket_create)
  return transaction_data_.ticket_create_;
}

// .org.xrpl.rpc.v1.TrustSet trust_set = 29;
inline bool Transaction::has_trust_set() const {
  return transaction_data_case() == kTrustSet;
}
inline void Transaction::set_has_trust_set() {
  _oneof_case_[0] = kTrustSet;
}
inline void Transaction::clear_trust_set() {
  if (has_trust_set()) {
    delete transaction_data_.trust_set_;
    clear_has_transaction_data();
  }
}
inline ::org::xrpl::rpc::v1::TrustSet* Transaction::release_trust_set() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.trust_set)
  if (has_trust_set()) {
    clear_has_transaction_data();
      ::org::xrpl::rpc::v1::TrustSet* temp = transaction_data_.trust_set_;
    transaction_data_.trust_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::TrustSet& Transaction::trust_set() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.trust_set)
  return has_trust_set()
      ? *transaction_data_.trust_set_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::TrustSet*>(&::org::xrpl::rpc::v1::_TrustSet_default_instance_);
}
inline ::org::xrpl::rpc::v1::TrustSet* Transaction::mutable_trust_set() {
  if (!has_trust_set()) {
    clear_transaction_data();
    set_has_trust_set();
    transaction_data_.trust_set_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::TrustSet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.trust_set)
  return transaction_data_.trust_set_;
}

// .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 5;
inline bool Transaction::has_signing_public_key() const {
  return this != internal_default_instance() && signing_public_key_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SigningPublicKey& Transaction::signing_public_key() const {
  const ::org::xrpl::rpc::v1::SigningPublicKey* p = signing_public_key_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.signing_public_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SigningPublicKey*>(
      &::org::xrpl::rpc::v1::_SigningPublicKey_default_instance_);
}
inline ::org::xrpl::rpc::v1::SigningPublicKey* Transaction::release_signing_public_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.signing_public_key)
  
  ::org::xrpl::rpc::v1::SigningPublicKey* temp = signing_public_key_;
  signing_public_key_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SigningPublicKey* Transaction::mutable_signing_public_key() {
  
  if (signing_public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SigningPublicKey>(GetArenaNoVirtual());
    signing_public_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.signing_public_key)
  return signing_public_key_;
}
inline void Transaction::set_allocated_signing_public_key(::org::xrpl::rpc::v1::SigningPublicKey* signing_public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signing_public_key_);
  }
  if (signing_public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signing_public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_public_key, submessage_arena);
    }
    
  } else {
    
  }
  signing_public_key_ = signing_public_key;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.signing_public_key)
}

// .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 6;
inline bool Transaction::has_transaction_signature() const {
  return this != internal_default_instance() && transaction_signature_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TransactionSignature& Transaction::transaction_signature() const {
  const ::org::xrpl::rpc::v1::TransactionSignature* p = transaction_signature_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.transaction_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TransactionSignature*>(
      &::org::xrpl::rpc::v1::_TransactionSignature_default_instance_);
}
inline ::org::xrpl::rpc::v1::TransactionSignature* Transaction::release_transaction_signature() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.transaction_signature)
  
  ::org::xrpl::rpc::v1::TransactionSignature* temp = transaction_signature_;
  transaction_signature_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TransactionSignature* Transaction::mutable_transaction_signature() {
  
  if (transaction_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionSignature>(GetArenaNoVirtual());
    transaction_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.transaction_signature)
  return transaction_signature_;
}
inline void Transaction::set_allocated_transaction_signature(::org::xrpl::rpc::v1::TransactionSignature* transaction_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_signature_);
  }
  if (transaction_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_signature, submessage_arena);
    }
    
  } else {
    
  }
  transaction_signature_ = transaction_signature;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.transaction_signature)
}

// .org.xrpl.rpc.v1.Flags flags = 7;
inline bool Transaction::has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Flags& Transaction::flags() const {
  const ::org::xrpl::rpc::v1::Flags* p = flags_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Flags*>(
      &::org::xrpl::rpc::v1::_Flags_default_instance_);
}
inline ::org::xrpl::rpc::v1::Flags* Transaction::release_flags() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.flags)
  
  ::org::xrpl::rpc::v1::Flags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Flags* Transaction::mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Flags>(GetArenaNoVirtual());
    flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.flags)
  return flags_;
}
inline void Transaction::set_allocated_flags(::org::xrpl::rpc::v1::Flags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flags_);
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.flags)
}

// .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 8;
inline bool Transaction::has_last_ledger_sequence() const {
  return this != internal_default_instance() && last_ledger_sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LastLedgerSequence& Transaction::last_ledger_sequence() const {
  const ::org::xrpl::rpc::v1::LastLedgerSequence* p = last_ledger_sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.last_ledger_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LastLedgerSequence*>(
      &::org::xrpl::rpc::v1::_LastLedgerSequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::LastLedgerSequence* Transaction::release_last_ledger_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.last_ledger_sequence)
  
  ::org::xrpl::rpc::v1::LastLedgerSequence* temp = last_ledger_sequence_;
  last_ledger_sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LastLedgerSequence* Transaction::mutable_last_ledger_sequence() {
  
  if (last_ledger_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LastLedgerSequence>(GetArenaNoVirtual());
    last_ledger_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.last_ledger_sequence)
  return last_ledger_sequence_;
}
inline void Transaction::set_allocated_last_ledger_sequence(::org::xrpl::rpc::v1::LastLedgerSequence* last_ledger_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_ledger_sequence_);
  }
  if (last_ledger_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_ledger_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_ledger_sequence, submessage_arena);
    }
    
  } else {
    
  }
  last_ledger_sequence_ = last_ledger_sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.last_ledger_sequence)
}

// .org.xrpl.rpc.v1.SourceTag source_tag = 9;
inline bool Transaction::has_source_tag() const {
  return this != internal_default_instance() && source_tag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SourceTag& Transaction::source_tag() const {
  const ::org::xrpl::rpc::v1::SourceTag* p = source_tag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.source_tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SourceTag*>(
      &::org::xrpl::rpc::v1::_SourceTag_default_instance_);
}
inline ::org::xrpl::rpc::v1::SourceTag* Transaction::release_source_tag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.source_tag)
  
  ::org::xrpl::rpc::v1::SourceTag* temp = source_tag_;
  source_tag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SourceTag* Transaction::mutable_source_tag() {
  
  if (source_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SourceTag>(GetArenaNoVirtual());
    source_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.source_tag)
  return source_tag_;
}
inline void Transaction::set_allocated_source_tag(::org::xrpl::rpc::v1::SourceTag* source_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_tag_);
  }
  if (source_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_tag, submessage_arena);
    }
    
  } else {
    
  }
  source_tag_ = source_tag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.source_tag)
}

// repeated .org.xrpl.rpc.v1.Memo memos = 10;
inline int Transaction::memos_size() const {
  return memos_.size();
}
inline void Transaction::clear_memos() {
  memos_.Clear();
}
inline ::org::xrpl::rpc::v1::Memo* Transaction::mutable_memos(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.memos)
  return memos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Memo >*
Transaction::mutable_memos() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.Transaction.memos)
  return &memos_;
}
inline const ::org::xrpl::rpc::v1::Memo& Transaction::memos(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.memos)
  return memos_.Get(index);
}
inline ::org::xrpl::rpc::v1::Memo* Transaction::add_memos() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.Transaction.memos)
  return memos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Memo >&
Transaction::memos() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.Transaction.memos)
  return memos_;
}

// repeated .org.xrpl.rpc.v1.Signer signers = 11;
inline int Transaction::signers_size() const {
  return signers_.size();
}
inline void Transaction::clear_signers() {
  signers_.Clear();
}
inline ::org::xrpl::rpc::v1::Signer* Transaction::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.signers)
  return signers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Signer >*
Transaction::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.Transaction.signers)
  return &signers_;
}
inline const ::org::xrpl::rpc::v1::Signer& Transaction::signers(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.signers)
  return signers_.Get(index);
}
inline ::org::xrpl::rpc::v1::Signer* Transaction::add_signers() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.Transaction.signers)
  return signers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Signer >&
Transaction::signers() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.Transaction.signers)
  return signers_;
}

// .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 12;
inline bool Transaction::has_account_transaction_id() const {
  return this != internal_default_instance() && account_transaction_id_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::AccountTransactionID& Transaction::account_transaction_id() const {
  const ::org::xrpl::rpc::v1::AccountTransactionID* p = account_transaction_id_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.account_transaction_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::AccountTransactionID*>(
      &::org::xrpl::rpc::v1::_AccountTransactionID_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountTransactionID* Transaction::release_account_transaction_id() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.account_transaction_id)
  
  ::org::xrpl::rpc::v1::AccountTransactionID* temp = account_transaction_id_;
  account_transaction_id_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::AccountTransactionID* Transaction::mutable_account_transaction_id() {
  
  if (account_transaction_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::AccountTransactionID>(GetArenaNoVirtual());
    account_transaction_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.account_transaction_id)
  return account_transaction_id_;
}
inline void Transaction::set_allocated_account_transaction_id(::org::xrpl::rpc::v1::AccountTransactionID* account_transaction_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_transaction_id_);
  }
  if (account_transaction_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_transaction_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_transaction_id, submessage_arena);
    }
    
  } else {
    
  }
  account_transaction_id_ = account_transaction_id;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.account_transaction_id)
}

// .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 31;
inline bool Transaction::has_ticket_sequence() const {
  return this != internal_default_instance() && ticket_sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TicketSequence& Transaction::ticket_sequence() const {
  const ::org::xrpl::rpc::v1::TicketSequence* p = ticket_sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Transaction.ticket_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TicketSequence*>(
      &::org::xrpl::rpc::v1::_TicketSequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::TicketSequence* Transaction::release_ticket_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Transaction.ticket_sequence)
  
  ::org::xrpl::rpc::v1::TicketSequence* temp = ticket_sequence_;
  ticket_sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TicketSequence* Transaction::mutable_ticket_sequence() {
  
  if (ticket_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TicketSequence>(GetArenaNoVirtual());
    ticket_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Transaction.ticket_sequence)
  return ticket_sequence_;
}
inline void Transaction::set_allocated_ticket_sequence(::org::xrpl::rpc::v1::TicketSequence* ticket_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_sequence_);
  }
  if (ticket_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ticket_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket_sequence, submessage_arena);
    }
    
  } else {
    
  }
  ticket_sequence_ = ticket_sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.ticket_sequence)
}

inline bool Transaction::has_transaction_data() const {
  return transaction_data_case() != TRANSACTION_DATA_NOT_SET;
}
inline void Transaction::clear_has_transaction_data() {
  _oneof_case_[0] = TRANSACTION_DATA_NOT_SET;
}
inline Transaction::TransactionDataCase Transaction::transaction_data_case() const {
  return Transaction::TransactionDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Memo

// .org.xrpl.rpc.v1.MemoData memo_data = 1;
inline bool Memo::has_memo_data() const {
  return this != internal_default_instance() && memo_data_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::MemoData& Memo::memo_data() const {
  const ::org::xrpl::rpc::v1::MemoData* p = memo_data_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Memo.memo_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::MemoData*>(
      &::org::xrpl::rpc::v1::_MemoData_default_instance_);
}
inline ::org::xrpl::rpc::v1::MemoData* Memo::release_memo_data() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Memo.memo_data)
  
  ::org::xrpl::rpc::v1::MemoData* temp = memo_data_;
  memo_data_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::MemoData* Memo::mutable_memo_data() {
  
  if (memo_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::MemoData>(GetArenaNoVirtual());
    memo_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Memo.memo_data)
  return memo_data_;
}
inline void Memo::set_allocated_memo_data(::org::xrpl::rpc::v1::MemoData* memo_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(memo_data_);
  }
  if (memo_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memo_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_data, submessage_arena);
    }
    
  } else {
    
  }
  memo_data_ = memo_data;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Memo.memo_data)
}

// .org.xrpl.rpc.v1.MemoFormat memo_format = 2;
inline bool Memo::has_memo_format() const {
  return this != internal_default_instance() && memo_format_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::MemoFormat& Memo::memo_format() const {
  const ::org::xrpl::rpc::v1::MemoFormat* p = memo_format_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Memo.memo_format)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::MemoFormat*>(
      &::org::xrpl::rpc::v1::_MemoFormat_default_instance_);
}
inline ::org::xrpl::rpc::v1::MemoFormat* Memo::release_memo_format() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Memo.memo_format)
  
  ::org::xrpl::rpc::v1::MemoFormat* temp = memo_format_;
  memo_format_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::MemoFormat* Memo::mutable_memo_format() {
  
  if (memo_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::MemoFormat>(GetArenaNoVirtual());
    memo_format_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Memo.memo_format)
  return memo_format_;
}
inline void Memo::set_allocated_memo_format(::org::xrpl::rpc::v1::MemoFormat* memo_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(memo_format_);
  }
  if (memo_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memo_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_format, submessage_arena);
    }
    
  } else {
    
  }
  memo_format_ = memo_format;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Memo.memo_format)
}

// .org.xrpl.rpc.v1.MemoType memo_type = 3;
inline bool Memo::has_memo_type() const {
  return this != internal_default_instance() && memo_type_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::MemoType& Memo::memo_type() const {
  const ::org::xrpl::rpc::v1::MemoType* p = memo_type_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Memo.memo_type)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::MemoType*>(
      &::org::xrpl::rpc::v1::_MemoType_default_instance_);
}
inline ::org::xrpl::rpc::v1::MemoType* Memo::release_memo_type() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Memo.memo_type)
  
  ::org::xrpl::rpc::v1::MemoType* temp = memo_type_;
  memo_type_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::MemoType* Memo::mutable_memo_type() {
  
  if (memo_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::MemoType>(GetArenaNoVirtual());
    memo_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Memo.memo_type)
  return memo_type_;
}
inline void Memo::set_allocated_memo_type(::org::xrpl::rpc::v1::MemoType* memo_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(memo_type_);
  }
  if (memo_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memo_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo_type, submessage_arena);
    }
    
  } else {
    
  }
  memo_type_ = memo_type;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Memo.memo_type)
}

// -------------------------------------------------------------------

// Signer

// .org.xrpl.rpc.v1.Account account = 1;
inline bool Signer::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Account& Signer::account() const {
  const ::org::xrpl::rpc::v1::Account* p = account_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Signer.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Account*>(
      &::org::xrpl::rpc::v1::_Account_default_instance_);
}
inline ::org::xrpl::rpc::v1::Account* Signer::release_account() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Signer.account)
  
  ::org::xrpl::rpc::v1::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Account* Signer::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Account>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Signer.account)
  return account_;
}
inline void Signer::set_allocated_account(::org::xrpl::rpc::v1::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Signer.account)
}

// .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 2;
inline bool Signer::has_transaction_signature() const {
  return this != internal_default_instance() && transaction_signature_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TransactionSignature& Signer::transaction_signature() const {
  const ::org::xrpl::rpc::v1::TransactionSignature* p = transaction_signature_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Signer.transaction_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TransactionSignature*>(
      &::org::xrpl::rpc::v1::_TransactionSignature_default_instance_);
}
inline ::org::xrpl::rpc::v1::TransactionSignature* Signer::release_transaction_signature() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Signer.transaction_signature)
  
  ::org::xrpl::rpc::v1::TransactionSignature* temp = transaction_signature_;
  transaction_signature_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TransactionSignature* Signer::mutable_transaction_signature() {
  
  if (transaction_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionSignature>(GetArenaNoVirtual());
    transaction_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Signer.transaction_signature)
  return transaction_signature_;
}
inline void Signer::set_allocated_transaction_signature(::org::xrpl::rpc::v1::TransactionSignature* transaction_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_signature_);
  }
  if (transaction_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_signature, submessage_arena);
    }
    
  } else {
    
  }
  transaction_signature_ = transaction_signature;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Signer.transaction_signature)
}

// .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 3;
inline bool Signer::has_signing_public_key() const {
  return this != internal_default_instance() && signing_public_key_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SigningPublicKey& Signer::signing_public_key() const {
  const ::org::xrpl::rpc::v1::SigningPublicKey* p = signing_public_key_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Signer.signing_public_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SigningPublicKey*>(
      &::org::xrpl::rpc::v1::_SigningPublicKey_default_instance_);
}
inline ::org::xrpl::rpc::v1::SigningPublicKey* Signer::release_signing_public_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Signer.signing_public_key)
  
  ::org::xrpl::rpc::v1::SigningPublicKey* temp = signing_public_key_;
  signing_public_key_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SigningPublicKey* Signer::mutable_signing_public_key() {
  
  if (signing_public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SigningPublicKey>(GetArenaNoVirtual());
    signing_public_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Signer.signing_public_key)
  return signing_public_key_;
}
inline void Signer::set_allocated_signing_public_key(::org::xrpl::rpc::v1::SigningPublicKey* signing_public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signing_public_key_);
  }
  if (signing_public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signing_public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_public_key, submessage_arena);
    }
    
  } else {
    
  }
  signing_public_key_ = signing_public_key;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Signer.signing_public_key)
}

// -------------------------------------------------------------------

// AccountSet

// .org.xrpl.rpc.v1.ClearFlag clear_flag = 1;
inline bool AccountSet::has_clear_flag() const {
  return this != internal_default_instance() && clear_flag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::ClearFlag& AccountSet::clear_flag() const {
  const ::org::xrpl::rpc::v1::ClearFlag* p = clear_flag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountSet.clear_flag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::ClearFlag*>(
      &::org::xrpl::rpc::v1::_ClearFlag_default_instance_);
}
inline ::org::xrpl::rpc::v1::ClearFlag* AccountSet::release_clear_flag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountSet.clear_flag)
  
  ::org::xrpl::rpc::v1::ClearFlag* temp = clear_flag_;
  clear_flag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::ClearFlag* AccountSet::mutable_clear_flag() {
  
  if (clear_flag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::ClearFlag>(GetArenaNoVirtual());
    clear_flag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountSet.clear_flag)
  return clear_flag_;
}
inline void AccountSet::set_allocated_clear_flag(::org::xrpl::rpc::v1::ClearFlag* clear_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_flag_);
  }
  if (clear_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clear_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_flag, submessage_arena);
    }
    
  } else {
    
  }
  clear_flag_ = clear_flag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountSet.clear_flag)
}

// .org.xrpl.rpc.v1.Domain domain = 2;
inline bool AccountSet::has_domain() const {
  return this != internal_default_instance() && domain_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Domain& AccountSet::domain() const {
  const ::org::xrpl::rpc::v1::Domain* p = domain_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountSet.domain)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Domain*>(
      &::org::xrpl::rpc::v1::_Domain_default_instance_);
}
inline ::org::xrpl::rpc::v1::Domain* AccountSet::release_domain() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountSet.domain)
  
  ::org::xrpl::rpc::v1::Domain* temp = domain_;
  domain_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Domain* AccountSet::mutable_domain() {
  
  if (domain_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Domain>(GetArenaNoVirtual());
    domain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountSet.domain)
  return domain_;
}
inline void AccountSet::set_allocated_domain(::org::xrpl::rpc::v1::Domain* domain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(domain_);
  }
  if (domain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      domain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, domain, submessage_arena);
    }
    
  } else {
    
  }
  domain_ = domain;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountSet.domain)
}

// .org.xrpl.rpc.v1.EmailHash email_hash = 3;
inline bool AccountSet::has_email_hash() const {
  return this != internal_default_instance() && email_hash_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::EmailHash& AccountSet::email_hash() const {
  const ::org::xrpl::rpc::v1::EmailHash* p = email_hash_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountSet.email_hash)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::EmailHash*>(
      &::org::xrpl::rpc::v1::_EmailHash_default_instance_);
}
inline ::org::xrpl::rpc::v1::EmailHash* AccountSet::release_email_hash() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountSet.email_hash)
  
  ::org::xrpl::rpc::v1::EmailHash* temp = email_hash_;
  email_hash_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::EmailHash* AccountSet::mutable_email_hash() {
  
  if (email_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::EmailHash>(GetArenaNoVirtual());
    email_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountSet.email_hash)
  return email_hash_;
}
inline void AccountSet::set_allocated_email_hash(::org::xrpl::rpc::v1::EmailHash* email_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(email_hash_);
  }
  if (email_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      email_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, email_hash, submessage_arena);
    }
    
  } else {
    
  }
  email_hash_ = email_hash;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountSet.email_hash)
}

// .org.xrpl.rpc.v1.MessageKey message_key = 4;
inline bool AccountSet::has_message_key() const {
  return this != internal_default_instance() && message_key_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::MessageKey& AccountSet::message_key() const {
  const ::org::xrpl::rpc::v1::MessageKey* p = message_key_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountSet.message_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::MessageKey*>(
      &::org::xrpl::rpc::v1::_MessageKey_default_instance_);
}
inline ::org::xrpl::rpc::v1::MessageKey* AccountSet::release_message_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountSet.message_key)
  
  ::org::xrpl::rpc::v1::MessageKey* temp = message_key_;
  message_key_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::MessageKey* AccountSet::mutable_message_key() {
  
  if (message_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::MessageKey>(GetArenaNoVirtual());
    message_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountSet.message_key)
  return message_key_;
}
inline void AccountSet::set_allocated_message_key(::org::xrpl::rpc::v1::MessageKey* message_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_key_);
  }
  if (message_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_key, submessage_arena);
    }
    
  } else {
    
  }
  message_key_ = message_key;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountSet.message_key)
}

// .org.xrpl.rpc.v1.SetFlag set_flag = 5;
inline bool AccountSet::has_set_flag() const {
  return this != internal_default_instance() && set_flag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SetFlag& AccountSet::set_flag() const {
  const ::org::xrpl::rpc::v1::SetFlag* p = set_flag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountSet.set_flag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SetFlag*>(
      &::org::xrpl::rpc::v1::_SetFlag_default_instance_);
}
inline ::org::xrpl::rpc::v1::SetFlag* AccountSet::release_set_flag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountSet.set_flag)
  
  ::org::xrpl::rpc::v1::SetFlag* temp = set_flag_;
  set_flag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SetFlag* AccountSet::mutable_set_flag() {
  
  if (set_flag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SetFlag>(GetArenaNoVirtual());
    set_flag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountSet.set_flag)
  return set_flag_;
}
inline void AccountSet::set_allocated_set_flag(::org::xrpl::rpc::v1::SetFlag* set_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_flag_);
  }
  if (set_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_flag, submessage_arena);
    }
    
  } else {
    
  }
  set_flag_ = set_flag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountSet.set_flag)
}

// .org.xrpl.rpc.v1.TransferRate transfer_rate = 6;
inline bool AccountSet::has_transfer_rate() const {
  return this != internal_default_instance() && transfer_rate_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TransferRate& AccountSet::transfer_rate() const {
  const ::org::xrpl::rpc::v1::TransferRate* p = transfer_rate_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountSet.transfer_rate)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TransferRate*>(
      &::org::xrpl::rpc::v1::_TransferRate_default_instance_);
}
inline ::org::xrpl::rpc::v1::TransferRate* AccountSet::release_transfer_rate() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountSet.transfer_rate)
  
  ::org::xrpl::rpc::v1::TransferRate* temp = transfer_rate_;
  transfer_rate_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TransferRate* AccountSet::mutable_transfer_rate() {
  
  if (transfer_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TransferRate>(GetArenaNoVirtual());
    transfer_rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountSet.transfer_rate)
  return transfer_rate_;
}
inline void AccountSet::set_allocated_transfer_rate(::org::xrpl::rpc::v1::TransferRate* transfer_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfer_rate_);
  }
  if (transfer_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transfer_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_rate, submessage_arena);
    }
    
  } else {
    
  }
  transfer_rate_ = transfer_rate;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountSet.transfer_rate)
}

// .org.xrpl.rpc.v1.TickSize tick_size = 7;
inline bool AccountSet::has_tick_size() const {
  return this != internal_default_instance() && tick_size_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TickSize& AccountSet::tick_size() const {
  const ::org::xrpl::rpc::v1::TickSize* p = tick_size_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountSet.tick_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TickSize*>(
      &::org::xrpl::rpc::v1::_TickSize_default_instance_);
}
inline ::org::xrpl::rpc::v1::TickSize* AccountSet::release_tick_size() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountSet.tick_size)
  
  ::org::xrpl::rpc::v1::TickSize* temp = tick_size_;
  tick_size_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TickSize* AccountSet::mutable_tick_size() {
  
  if (tick_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TickSize>(GetArenaNoVirtual());
    tick_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountSet.tick_size)
  return tick_size_;
}
inline void AccountSet::set_allocated_tick_size(::org::xrpl::rpc::v1::TickSize* tick_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_size_);
  }
  if (tick_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tick_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick_size, submessage_arena);
    }
    
  } else {
    
  }
  tick_size_ = tick_size;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountSet.tick_size)
}

// -------------------------------------------------------------------

// AccountDelete

// .org.xrpl.rpc.v1.Destination destination = 1;
inline bool AccountDelete::has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Destination& AccountDelete::destination() const {
  const ::org::xrpl::rpc::v1::Destination* p = destination_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountDelete.destination)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Destination*>(
      &::org::xrpl::rpc::v1::_Destination_default_instance_);
}
inline ::org::xrpl::rpc::v1::Destination* AccountDelete::release_destination() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountDelete.destination)
  
  ::org::xrpl::rpc::v1::Destination* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Destination* AccountDelete::mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Destination>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountDelete.destination)
  return destination_;
}
inline void AccountDelete::set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountDelete.destination)
}

// .org.xrpl.rpc.v1.DestinationTag destination_tag = 2;
inline bool AccountDelete::has_destination_tag() const {
  return this != internal_default_instance() && destination_tag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::DestinationTag& AccountDelete::destination_tag() const {
  const ::org::xrpl::rpc::v1::DestinationTag* p = destination_tag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.AccountDelete.destination_tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::DestinationTag*>(
      &::org::xrpl::rpc::v1::_DestinationTag_default_instance_);
}
inline ::org::xrpl::rpc::v1::DestinationTag* AccountDelete::release_destination_tag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.AccountDelete.destination_tag)
  
  ::org::xrpl::rpc::v1::DestinationTag* temp = destination_tag_;
  destination_tag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::DestinationTag* AccountDelete::mutable_destination_tag() {
  
  if (destination_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::DestinationTag>(GetArenaNoVirtual());
    destination_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.AccountDelete.destination_tag)
  return destination_tag_;
}
inline void AccountDelete::set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_tag_);
  }
  if (destination_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_tag, submessage_arena);
    }
    
  } else {
    
  }
  destination_tag_ = destination_tag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AccountDelete.destination_tag)
}

// -------------------------------------------------------------------

// CheckCancel

// .org.xrpl.rpc.v1.CheckID check_id = 1;
inline bool CheckCancel::has_check_id() const {
  return this != internal_default_instance() && check_id_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::CheckID& CheckCancel::check_id() const {
  const ::org::xrpl::rpc::v1::CheckID* p = check_id_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCancel.check_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::CheckID*>(
      &::org::xrpl::rpc::v1::_CheckID_default_instance_);
}
inline ::org::xrpl::rpc::v1::CheckID* CheckCancel::release_check_id() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCancel.check_id)
  
  ::org::xrpl::rpc::v1::CheckID* temp = check_id_;
  check_id_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::CheckID* CheckCancel::mutable_check_id() {
  
  if (check_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::CheckID>(GetArenaNoVirtual());
    check_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCancel.check_id)
  return check_id_;
}
inline void CheckCancel::set_allocated_check_id(::org::xrpl::rpc::v1::CheckID* check_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_id_);
  }
  if (check_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_id, submessage_arena);
    }
    
  } else {
    
  }
  check_id_ = check_id;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCancel.check_id)
}

// -------------------------------------------------------------------

// CheckCash

// .org.xrpl.rpc.v1.CheckID check_id = 1;
inline bool CheckCash::has_check_id() const {
  return this != internal_default_instance() && check_id_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::CheckID& CheckCash::check_id() const {
  const ::org::xrpl::rpc::v1::CheckID* p = check_id_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCash.check_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::CheckID*>(
      &::org::xrpl::rpc::v1::_CheckID_default_instance_);
}
inline ::org::xrpl::rpc::v1::CheckID* CheckCash::release_check_id() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCash.check_id)
  
  ::org::xrpl::rpc::v1::CheckID* temp = check_id_;
  check_id_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::CheckID* CheckCash::mutable_check_id() {
  
  if (check_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::CheckID>(GetArenaNoVirtual());
    check_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCash.check_id)
  return check_id_;
}
inline void CheckCash::set_allocated_check_id(::org::xrpl::rpc::v1::CheckID* check_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_id_);
  }
  if (check_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_id, submessage_arena);
    }
    
  } else {
    
  }
  check_id_ = check_id;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCash.check_id)
}

// .org.xrpl.rpc.v1.Amount amount = 2;
inline bool CheckCash::has_amount() const {
  return amount_oneof_case() == kAmount;
}
inline void CheckCash::set_has_amount() {
  _oneof_case_[0] = kAmount;
}
inline ::org::xrpl::rpc::v1::Amount* CheckCash::release_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCash.amount)
  if (has_amount()) {
    clear_has_amount_oneof();
      ::org::xrpl::rpc::v1::Amount* temp = amount_oneof_.amount_;
    amount_oneof_.amount_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::Amount& CheckCash::amount() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCash.amount)
  return has_amount()
      ? *amount_oneof_.amount_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::Amount*>(&::org::xrpl::rpc::v1::_Amount_default_instance_);
}
inline ::org::xrpl::rpc::v1::Amount* CheckCash::mutable_amount() {
  if (!has_amount()) {
    clear_amount_oneof();
    set_has_amount();
    amount_oneof_.amount_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::Amount >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCash.amount)
  return amount_oneof_.amount_;
}

// .org.xrpl.rpc.v1.DeliverMin deliver_min = 3;
inline bool CheckCash::has_deliver_min() const {
  return amount_oneof_case() == kDeliverMin;
}
inline void CheckCash::set_has_deliver_min() {
  _oneof_case_[0] = kDeliverMin;
}
inline ::org::xrpl::rpc::v1::DeliverMin* CheckCash::release_deliver_min() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCash.deliver_min)
  if (has_deliver_min()) {
    clear_has_amount_oneof();
      ::org::xrpl::rpc::v1::DeliverMin* temp = amount_oneof_.deliver_min_;
    amount_oneof_.deliver_min_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::DeliverMin& CheckCash::deliver_min() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCash.deliver_min)
  return has_deliver_min()
      ? *amount_oneof_.deliver_min_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::DeliverMin*>(&::org::xrpl::rpc::v1::_DeliverMin_default_instance_);
}
inline ::org::xrpl::rpc::v1::DeliverMin* CheckCash::mutable_deliver_min() {
  if (!has_deliver_min()) {
    clear_amount_oneof();
    set_has_deliver_min();
    amount_oneof_.deliver_min_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::DeliverMin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCash.deliver_min)
  return amount_oneof_.deliver_min_;
}

inline bool CheckCash::has_amount_oneof() const {
  return amount_oneof_case() != AMOUNT_ONEOF_NOT_SET;
}
inline void CheckCash::clear_has_amount_oneof() {
  _oneof_case_[0] = AMOUNT_ONEOF_NOT_SET;
}
inline CheckCash::AmountOneofCase CheckCash::amount_oneof_case() const {
  return CheckCash::AmountOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CheckCreate

// .org.xrpl.rpc.v1.Destination destination = 1;
inline bool CheckCreate::has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Destination& CheckCreate::destination() const {
  const ::org::xrpl::rpc::v1::Destination* p = destination_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCreate.destination)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Destination*>(
      &::org::xrpl::rpc::v1::_Destination_default_instance_);
}
inline ::org::xrpl::rpc::v1::Destination* CheckCreate::release_destination() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCreate.destination)
  
  ::org::xrpl::rpc::v1::Destination* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Destination* CheckCreate::mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Destination>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCreate.destination)
  return destination_;
}
inline void CheckCreate::set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCreate.destination)
}

// .org.xrpl.rpc.v1.SendMax send_max = 2;
inline bool CheckCreate::has_send_max() const {
  return this != internal_default_instance() && send_max_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SendMax& CheckCreate::send_max() const {
  const ::org::xrpl::rpc::v1::SendMax* p = send_max_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCreate.send_max)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SendMax*>(
      &::org::xrpl::rpc::v1::_SendMax_default_instance_);
}
inline ::org::xrpl::rpc::v1::SendMax* CheckCreate::release_send_max() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCreate.send_max)
  
  ::org::xrpl::rpc::v1::SendMax* temp = send_max_;
  send_max_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SendMax* CheckCreate::mutable_send_max() {
  
  if (send_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SendMax>(GetArenaNoVirtual());
    send_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCreate.send_max)
  return send_max_;
}
inline void CheckCreate::set_allocated_send_max(::org::xrpl::rpc::v1::SendMax* send_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_max_);
  }
  if (send_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_max, submessage_arena);
    }
    
  } else {
    
  }
  send_max_ = send_max;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCreate.send_max)
}

// .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
inline bool CheckCreate::has_destination_tag() const {
  return this != internal_default_instance() && destination_tag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::DestinationTag& CheckCreate::destination_tag() const {
  const ::org::xrpl::rpc::v1::DestinationTag* p = destination_tag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCreate.destination_tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::DestinationTag*>(
      &::org::xrpl::rpc::v1::_DestinationTag_default_instance_);
}
inline ::org::xrpl::rpc::v1::DestinationTag* CheckCreate::release_destination_tag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCreate.destination_tag)
  
  ::org::xrpl::rpc::v1::DestinationTag* temp = destination_tag_;
  destination_tag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::DestinationTag* CheckCreate::mutable_destination_tag() {
  
  if (destination_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::DestinationTag>(GetArenaNoVirtual());
    destination_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCreate.destination_tag)
  return destination_tag_;
}
inline void CheckCreate::set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_tag_);
  }
  if (destination_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_tag, submessage_arena);
    }
    
  } else {
    
  }
  destination_tag_ = destination_tag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCreate.destination_tag)
}

// .org.xrpl.rpc.v1.Expiration expiration = 4;
inline bool CheckCreate::has_expiration() const {
  return this != internal_default_instance() && expiration_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Expiration& CheckCreate::expiration() const {
  const ::org::xrpl::rpc::v1::Expiration* p = expiration_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCreate.expiration)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Expiration*>(
      &::org::xrpl::rpc::v1::_Expiration_default_instance_);
}
inline ::org::xrpl::rpc::v1::Expiration* CheckCreate::release_expiration() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCreate.expiration)
  
  ::org::xrpl::rpc::v1::Expiration* temp = expiration_;
  expiration_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Expiration* CheckCreate::mutable_expiration() {
  
  if (expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Expiration>(GetArenaNoVirtual());
    expiration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCreate.expiration)
  return expiration_;
}
inline void CheckCreate::set_allocated_expiration(::org::xrpl::rpc::v1::Expiration* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    
  } else {
    
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCreate.expiration)
}

// .org.xrpl.rpc.v1.InvoiceID invoice_id = 5;
inline bool CheckCreate::has_invoice_id() const {
  return this != internal_default_instance() && invoice_id_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::InvoiceID& CheckCreate::invoice_id() const {
  const ::org::xrpl::rpc::v1::InvoiceID* p = invoice_id_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.CheckCreate.invoice_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::InvoiceID*>(
      &::org::xrpl::rpc::v1::_InvoiceID_default_instance_);
}
inline ::org::xrpl::rpc::v1::InvoiceID* CheckCreate::release_invoice_id() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.CheckCreate.invoice_id)
  
  ::org::xrpl::rpc::v1::InvoiceID* temp = invoice_id_;
  invoice_id_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::InvoiceID* CheckCreate::mutable_invoice_id() {
  
  if (invoice_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::InvoiceID>(GetArenaNoVirtual());
    invoice_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.CheckCreate.invoice_id)
  return invoice_id_;
}
inline void CheckCreate::set_allocated_invoice_id(::org::xrpl::rpc::v1::InvoiceID* invoice_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice_id_);
  }
  if (invoice_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invoice_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice_id, submessage_arena);
    }
    
  } else {
    
  }
  invoice_id_ = invoice_id;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCreate.invoice_id)
}

// -------------------------------------------------------------------

// DepositPreauth

// .org.xrpl.rpc.v1.Authorize authorize = 1;
inline bool DepositPreauth::has_authorize() const {
  return authorization_oneof_case() == kAuthorize;
}
inline void DepositPreauth::set_has_authorize() {
  _oneof_case_[0] = kAuthorize;
}
inline ::org::xrpl::rpc::v1::Authorize* DepositPreauth::release_authorize() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.DepositPreauth.authorize)
  if (has_authorize()) {
    clear_has_authorization_oneof();
      ::org::xrpl::rpc::v1::Authorize* temp = authorization_oneof_.authorize_;
    authorization_oneof_.authorize_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::Authorize& DepositPreauth::authorize() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.DepositPreauth.authorize)
  return has_authorize()
      ? *authorization_oneof_.authorize_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::Authorize*>(&::org::xrpl::rpc::v1::_Authorize_default_instance_);
}
inline ::org::xrpl::rpc::v1::Authorize* DepositPreauth::mutable_authorize() {
  if (!has_authorize()) {
    clear_authorization_oneof();
    set_has_authorize();
    authorization_oneof_.authorize_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::Authorize >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.DepositPreauth.authorize)
  return authorization_oneof_.authorize_;
}

// .org.xrpl.rpc.v1.Unauthorize unauthorize = 2;
inline bool DepositPreauth::has_unauthorize() const {
  return authorization_oneof_case() == kUnauthorize;
}
inline void DepositPreauth::set_has_unauthorize() {
  _oneof_case_[0] = kUnauthorize;
}
inline ::org::xrpl::rpc::v1::Unauthorize* DepositPreauth::release_unauthorize() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.DepositPreauth.unauthorize)
  if (has_unauthorize()) {
    clear_has_authorization_oneof();
      ::org::xrpl::rpc::v1::Unauthorize* temp = authorization_oneof_.unauthorize_;
    authorization_oneof_.unauthorize_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::Unauthorize& DepositPreauth::unauthorize() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.DepositPreauth.unauthorize)
  return has_unauthorize()
      ? *authorization_oneof_.unauthorize_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::Unauthorize*>(&::org::xrpl::rpc::v1::_Unauthorize_default_instance_);
}
inline ::org::xrpl::rpc::v1::Unauthorize* DepositPreauth::mutable_unauthorize() {
  if (!has_unauthorize()) {
    clear_authorization_oneof();
    set_has_unauthorize();
    authorization_oneof_.unauthorize_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::Unauthorize >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.DepositPreauth.unauthorize)
  return authorization_oneof_.unauthorize_;
}

inline bool DepositPreauth::has_authorization_oneof() const {
  return authorization_oneof_case() != AUTHORIZATION_ONEOF_NOT_SET;
}
inline void DepositPreauth::clear_has_authorization_oneof() {
  _oneof_case_[0] = AUTHORIZATION_ONEOF_NOT_SET;
}
inline DepositPreauth::AuthorizationOneofCase DepositPreauth::authorization_oneof_case() const {
  return DepositPreauth::AuthorizationOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EscrowCancel

// .org.xrpl.rpc.v1.Owner owner = 1;
inline bool EscrowCancel::has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Owner& EscrowCancel::owner() const {
  const ::org::xrpl::rpc::v1::Owner* p = owner_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCancel.owner)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Owner*>(
      &::org::xrpl::rpc::v1::_Owner_default_instance_);
}
inline ::org::xrpl::rpc::v1::Owner* EscrowCancel::release_owner() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCancel.owner)
  
  ::org::xrpl::rpc::v1::Owner* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Owner* EscrowCancel::mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Owner>(GetArenaNoVirtual());
    owner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCancel.owner)
  return owner_;
}
inline void EscrowCancel::set_allocated_owner(::org::xrpl::rpc::v1::Owner* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCancel.owner)
}

// .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
inline bool EscrowCancel::has_offer_sequence() const {
  return this != internal_default_instance() && offer_sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::OfferSequence& EscrowCancel::offer_sequence() const {
  const ::org::xrpl::rpc::v1::OfferSequence* p = offer_sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCancel.offer_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::OfferSequence*>(
      &::org::xrpl::rpc::v1::_OfferSequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::OfferSequence* EscrowCancel::release_offer_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCancel.offer_sequence)
  
  ::org::xrpl::rpc::v1::OfferSequence* temp = offer_sequence_;
  offer_sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::OfferSequence* EscrowCancel::mutable_offer_sequence() {
  
  if (offer_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::OfferSequence>(GetArenaNoVirtual());
    offer_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCancel.offer_sequence)
  return offer_sequence_;
}
inline void EscrowCancel::set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offer_sequence_);
  }
  if (offer_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offer_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_sequence, submessage_arena);
    }
    
  } else {
    
  }
  offer_sequence_ = offer_sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCancel.offer_sequence)
}

// -------------------------------------------------------------------

// EscrowCreate

// .org.xrpl.rpc.v1.Amount amount = 1;
inline bool EscrowCreate::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Amount& EscrowCreate::amount() const {
  const ::org::xrpl::rpc::v1::Amount* p = amount_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCreate.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Amount*>(
      &::org::xrpl::rpc::v1::_Amount_default_instance_);
}
inline ::org::xrpl::rpc::v1::Amount* EscrowCreate::release_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCreate.amount)
  
  ::org::xrpl::rpc::v1::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Amount* EscrowCreate::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCreate.amount)
  return amount_;
}
inline void EscrowCreate::set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCreate.amount)
}

// .org.xrpl.rpc.v1.Destination destination = 2;
inline bool EscrowCreate::has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Destination& EscrowCreate::destination() const {
  const ::org::xrpl::rpc::v1::Destination* p = destination_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCreate.destination)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Destination*>(
      &::org::xrpl::rpc::v1::_Destination_default_instance_);
}
inline ::org::xrpl::rpc::v1::Destination* EscrowCreate::release_destination() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCreate.destination)
  
  ::org::xrpl::rpc::v1::Destination* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Destination* EscrowCreate::mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Destination>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCreate.destination)
  return destination_;
}
inline void EscrowCreate::set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCreate.destination)
}

// .org.xrpl.rpc.v1.CancelAfter cancel_after = 3;
inline bool EscrowCreate::has_cancel_after() const {
  return this != internal_default_instance() && cancel_after_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::CancelAfter& EscrowCreate::cancel_after() const {
  const ::org::xrpl::rpc::v1::CancelAfter* p = cancel_after_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCreate.cancel_after)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::CancelAfter*>(
      &::org::xrpl::rpc::v1::_CancelAfter_default_instance_);
}
inline ::org::xrpl::rpc::v1::CancelAfter* EscrowCreate::release_cancel_after() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCreate.cancel_after)
  
  ::org::xrpl::rpc::v1::CancelAfter* temp = cancel_after_;
  cancel_after_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::CancelAfter* EscrowCreate::mutable_cancel_after() {
  
  if (cancel_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::CancelAfter>(GetArenaNoVirtual());
    cancel_after_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCreate.cancel_after)
  return cancel_after_;
}
inline void EscrowCreate::set_allocated_cancel_after(::org::xrpl::rpc::v1::CancelAfter* cancel_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_after_);
  }
  if (cancel_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancel_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_after, submessage_arena);
    }
    
  } else {
    
  }
  cancel_after_ = cancel_after;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCreate.cancel_after)
}

// .org.xrpl.rpc.v1.FinishAfter finish_after = 4;
inline bool EscrowCreate::has_finish_after() const {
  return this != internal_default_instance() && finish_after_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::FinishAfter& EscrowCreate::finish_after() const {
  const ::org::xrpl::rpc::v1::FinishAfter* p = finish_after_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCreate.finish_after)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::FinishAfter*>(
      &::org::xrpl::rpc::v1::_FinishAfter_default_instance_);
}
inline ::org::xrpl::rpc::v1::FinishAfter* EscrowCreate::release_finish_after() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCreate.finish_after)
  
  ::org::xrpl::rpc::v1::FinishAfter* temp = finish_after_;
  finish_after_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::FinishAfter* EscrowCreate::mutable_finish_after() {
  
  if (finish_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::FinishAfter>(GetArenaNoVirtual());
    finish_after_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCreate.finish_after)
  return finish_after_;
}
inline void EscrowCreate::set_allocated_finish_after(::org::xrpl::rpc::v1::FinishAfter* finish_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_after_);
  }
  if (finish_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      finish_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_after, submessage_arena);
    }
    
  } else {
    
  }
  finish_after_ = finish_after;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCreate.finish_after)
}

// .org.xrpl.rpc.v1.Condition condition = 5;
inline bool EscrowCreate::has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Condition& EscrowCreate::condition() const {
  const ::org::xrpl::rpc::v1::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCreate.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Condition*>(
      &::org::xrpl::rpc::v1::_Condition_default_instance_);
}
inline ::org::xrpl::rpc::v1::Condition* EscrowCreate::release_condition() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCreate.condition)
  
  ::org::xrpl::rpc::v1::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Condition* EscrowCreate::mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCreate.condition)
  return condition_;
}
inline void EscrowCreate::set_allocated_condition(::org::xrpl::rpc::v1::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCreate.condition)
}

// .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
inline bool EscrowCreate::has_destination_tag() const {
  return this != internal_default_instance() && destination_tag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::DestinationTag& EscrowCreate::destination_tag() const {
  const ::org::xrpl::rpc::v1::DestinationTag* p = destination_tag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowCreate.destination_tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::DestinationTag*>(
      &::org::xrpl::rpc::v1::_DestinationTag_default_instance_);
}
inline ::org::xrpl::rpc::v1::DestinationTag* EscrowCreate::release_destination_tag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowCreate.destination_tag)
  
  ::org::xrpl::rpc::v1::DestinationTag* temp = destination_tag_;
  destination_tag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::DestinationTag* EscrowCreate::mutable_destination_tag() {
  
  if (destination_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::DestinationTag>(GetArenaNoVirtual());
    destination_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowCreate.destination_tag)
  return destination_tag_;
}
inline void EscrowCreate::set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_tag_);
  }
  if (destination_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_tag, submessage_arena);
    }
    
  } else {
    
  }
  destination_tag_ = destination_tag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowCreate.destination_tag)
}

// -------------------------------------------------------------------

// EscrowFinish

// .org.xrpl.rpc.v1.Owner owner = 1;
inline bool EscrowFinish::has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Owner& EscrowFinish::owner() const {
  const ::org::xrpl::rpc::v1::Owner* p = owner_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowFinish.owner)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Owner*>(
      &::org::xrpl::rpc::v1::_Owner_default_instance_);
}
inline ::org::xrpl::rpc::v1::Owner* EscrowFinish::release_owner() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowFinish.owner)
  
  ::org::xrpl::rpc::v1::Owner* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Owner* EscrowFinish::mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Owner>(GetArenaNoVirtual());
    owner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowFinish.owner)
  return owner_;
}
inline void EscrowFinish::set_allocated_owner(::org::xrpl::rpc::v1::Owner* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowFinish.owner)
}

// .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
inline bool EscrowFinish::has_offer_sequence() const {
  return this != internal_default_instance() && offer_sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::OfferSequence& EscrowFinish::offer_sequence() const {
  const ::org::xrpl::rpc::v1::OfferSequence* p = offer_sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowFinish.offer_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::OfferSequence*>(
      &::org::xrpl::rpc::v1::_OfferSequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::OfferSequence* EscrowFinish::release_offer_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowFinish.offer_sequence)
  
  ::org::xrpl::rpc::v1::OfferSequence* temp = offer_sequence_;
  offer_sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::OfferSequence* EscrowFinish::mutable_offer_sequence() {
  
  if (offer_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::OfferSequence>(GetArenaNoVirtual());
    offer_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowFinish.offer_sequence)
  return offer_sequence_;
}
inline void EscrowFinish::set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offer_sequence_);
  }
  if (offer_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offer_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_sequence, submessage_arena);
    }
    
  } else {
    
  }
  offer_sequence_ = offer_sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowFinish.offer_sequence)
}

// .org.xrpl.rpc.v1.Condition condition = 3;
inline bool EscrowFinish::has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Condition& EscrowFinish::condition() const {
  const ::org::xrpl::rpc::v1::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowFinish.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Condition*>(
      &::org::xrpl::rpc::v1::_Condition_default_instance_);
}
inline ::org::xrpl::rpc::v1::Condition* EscrowFinish::release_condition() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowFinish.condition)
  
  ::org::xrpl::rpc::v1::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Condition* EscrowFinish::mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowFinish.condition)
  return condition_;
}
inline void EscrowFinish::set_allocated_condition(::org::xrpl::rpc::v1::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowFinish.condition)
}

// .org.xrpl.rpc.v1.Fulfillment fulfillment = 4;
inline bool EscrowFinish::has_fulfillment() const {
  return this != internal_default_instance() && fulfillment_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Fulfillment& EscrowFinish::fulfillment() const {
  const ::org::xrpl::rpc::v1::Fulfillment* p = fulfillment_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.EscrowFinish.fulfillment)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Fulfillment*>(
      &::org::xrpl::rpc::v1::_Fulfillment_default_instance_);
}
inline ::org::xrpl::rpc::v1::Fulfillment* EscrowFinish::release_fulfillment() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.EscrowFinish.fulfillment)
  
  ::org::xrpl::rpc::v1::Fulfillment* temp = fulfillment_;
  fulfillment_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Fulfillment* EscrowFinish::mutable_fulfillment() {
  
  if (fulfillment_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Fulfillment>(GetArenaNoVirtual());
    fulfillment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.EscrowFinish.fulfillment)
  return fulfillment_;
}
inline void EscrowFinish::set_allocated_fulfillment(::org::xrpl::rpc::v1::Fulfillment* fulfillment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fulfillment_);
  }
  if (fulfillment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fulfillment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fulfillment, submessage_arena);
    }
    
  } else {
    
  }
  fulfillment_ = fulfillment;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.EscrowFinish.fulfillment)
}

// -------------------------------------------------------------------

// OfferCancel

// .org.xrpl.rpc.v1.OfferSequence offer_sequence = 1;
inline bool OfferCancel::has_offer_sequence() const {
  return this != internal_default_instance() && offer_sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::OfferSequence& OfferCancel::offer_sequence() const {
  const ::org::xrpl::rpc::v1::OfferSequence* p = offer_sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.OfferCancel.offer_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::OfferSequence*>(
      &::org::xrpl::rpc::v1::_OfferSequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::OfferSequence* OfferCancel::release_offer_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.OfferCancel.offer_sequence)
  
  ::org::xrpl::rpc::v1::OfferSequence* temp = offer_sequence_;
  offer_sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::OfferSequence* OfferCancel::mutable_offer_sequence() {
  
  if (offer_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::OfferSequence>(GetArenaNoVirtual());
    offer_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.OfferCancel.offer_sequence)
  return offer_sequence_;
}
inline void OfferCancel::set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offer_sequence_);
  }
  if (offer_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offer_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_sequence, submessage_arena);
    }
    
  } else {
    
  }
  offer_sequence_ = offer_sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.OfferCancel.offer_sequence)
}

// -------------------------------------------------------------------

// OfferCreate

// .org.xrpl.rpc.v1.Expiration expiration = 1;
inline bool OfferCreate::has_expiration() const {
  return this != internal_default_instance() && expiration_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Expiration& OfferCreate::expiration() const {
  const ::org::xrpl::rpc::v1::Expiration* p = expiration_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.OfferCreate.expiration)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Expiration*>(
      &::org::xrpl::rpc::v1::_Expiration_default_instance_);
}
inline ::org::xrpl::rpc::v1::Expiration* OfferCreate::release_expiration() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.OfferCreate.expiration)
  
  ::org::xrpl::rpc::v1::Expiration* temp = expiration_;
  expiration_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Expiration* OfferCreate::mutable_expiration() {
  
  if (expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Expiration>(GetArenaNoVirtual());
    expiration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.OfferCreate.expiration)
  return expiration_;
}
inline void OfferCreate::set_allocated_expiration(::org::xrpl::rpc::v1::Expiration* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    
  } else {
    
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.OfferCreate.expiration)
}

// .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
inline bool OfferCreate::has_offer_sequence() const {
  return this != internal_default_instance() && offer_sequence_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::OfferSequence& OfferCreate::offer_sequence() const {
  const ::org::xrpl::rpc::v1::OfferSequence* p = offer_sequence_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.OfferCreate.offer_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::OfferSequence*>(
      &::org::xrpl::rpc::v1::_OfferSequence_default_instance_);
}
inline ::org::xrpl::rpc::v1::OfferSequence* OfferCreate::release_offer_sequence() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.OfferCreate.offer_sequence)
  
  ::org::xrpl::rpc::v1::OfferSequence* temp = offer_sequence_;
  offer_sequence_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::OfferSequence* OfferCreate::mutable_offer_sequence() {
  
  if (offer_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::OfferSequence>(GetArenaNoVirtual());
    offer_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.OfferCreate.offer_sequence)
  return offer_sequence_;
}
inline void OfferCreate::set_allocated_offer_sequence(::org::xrpl::rpc::v1::OfferSequence* offer_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offer_sequence_);
  }
  if (offer_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offer_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_sequence, submessage_arena);
    }
    
  } else {
    
  }
  offer_sequence_ = offer_sequence;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.OfferCreate.offer_sequence)
}

// .org.xrpl.rpc.v1.TakerGets taker_gets = 3;
inline bool OfferCreate::has_taker_gets() const {
  return this != internal_default_instance() && taker_gets_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TakerGets& OfferCreate::taker_gets() const {
  const ::org::xrpl::rpc::v1::TakerGets* p = taker_gets_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.OfferCreate.taker_gets)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TakerGets*>(
      &::org::xrpl::rpc::v1::_TakerGets_default_instance_);
}
inline ::org::xrpl::rpc::v1::TakerGets* OfferCreate::release_taker_gets() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.OfferCreate.taker_gets)
  
  ::org::xrpl::rpc::v1::TakerGets* temp = taker_gets_;
  taker_gets_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TakerGets* OfferCreate::mutable_taker_gets() {
  
  if (taker_gets_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TakerGets>(GetArenaNoVirtual());
    taker_gets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.OfferCreate.taker_gets)
  return taker_gets_;
}
inline void OfferCreate::set_allocated_taker_gets(::org::xrpl::rpc::v1::TakerGets* taker_gets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(taker_gets_);
  }
  if (taker_gets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      taker_gets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taker_gets, submessage_arena);
    }
    
  } else {
    
  }
  taker_gets_ = taker_gets;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.OfferCreate.taker_gets)
}

// .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
inline bool OfferCreate::has_taker_pays() const {
  return this != internal_default_instance() && taker_pays_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TakerPays& OfferCreate::taker_pays() const {
  const ::org::xrpl::rpc::v1::TakerPays* p = taker_pays_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.OfferCreate.taker_pays)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TakerPays*>(
      &::org::xrpl::rpc::v1::_TakerPays_default_instance_);
}
inline ::org::xrpl::rpc::v1::TakerPays* OfferCreate::release_taker_pays() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.OfferCreate.taker_pays)
  
  ::org::xrpl::rpc::v1::TakerPays* temp = taker_pays_;
  taker_pays_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TakerPays* OfferCreate::mutable_taker_pays() {
  
  if (taker_pays_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TakerPays>(GetArenaNoVirtual());
    taker_pays_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.OfferCreate.taker_pays)
  return taker_pays_;
}
inline void OfferCreate::set_allocated_taker_pays(::org::xrpl::rpc::v1::TakerPays* taker_pays) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(taker_pays_);
  }
  if (taker_pays) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      taker_pays = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taker_pays, submessage_arena);
    }
    
  } else {
    
  }
  taker_pays_ = taker_pays;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.OfferCreate.taker_pays)
}

// -------------------------------------------------------------------

// Payment_PathElement

// .org.xrpl.rpc.v1.AccountAddress account = 1;
inline bool Payment_PathElement::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::AccountAddress& Payment_PathElement::account() const {
  const ::org::xrpl::rpc::v1::AccountAddress* p = account_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.PathElement.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::AccountAddress*>(
      &::org::xrpl::rpc::v1::_AccountAddress_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountAddress* Payment_PathElement::release_account() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.PathElement.account)
  
  ::org::xrpl::rpc::v1::AccountAddress* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::AccountAddress* Payment_PathElement::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::AccountAddress>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.PathElement.account)
  return account_;
}
inline void Payment_PathElement::set_allocated_account(::org::xrpl::rpc::v1::AccountAddress* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.PathElement.account)
}

// .org.xrpl.rpc.v1.Currency currency = 2;
inline bool Payment_PathElement::has_currency() const {
  return this != internal_default_instance() && currency_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Currency& Payment_PathElement::currency() const {
  const ::org::xrpl::rpc::v1::Currency* p = currency_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.PathElement.currency)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Currency*>(
      &::org::xrpl::rpc::v1::_Currency_default_instance_);
}
inline ::org::xrpl::rpc::v1::Currency* Payment_PathElement::release_currency() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.PathElement.currency)
  
  ::org::xrpl::rpc::v1::Currency* temp = currency_;
  currency_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Currency* Payment_PathElement::mutable_currency() {
  
  if (currency_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Currency>(GetArenaNoVirtual());
    currency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.PathElement.currency)
  return currency_;
}
inline void Payment_PathElement::set_allocated_currency(::org::xrpl::rpc::v1::Currency* currency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(currency_);
  }
  if (currency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      currency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency, submessage_arena);
    }
    
  } else {
    
  }
  currency_ = currency;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.PathElement.currency)
}

// .org.xrpl.rpc.v1.AccountAddress issuer = 3;
inline bool Payment_PathElement::has_issuer() const {
  return this != internal_default_instance() && issuer_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::AccountAddress& Payment_PathElement::issuer() const {
  const ::org::xrpl::rpc::v1::AccountAddress* p = issuer_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.PathElement.issuer)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::AccountAddress*>(
      &::org::xrpl::rpc::v1::_AccountAddress_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountAddress* Payment_PathElement::release_issuer() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.PathElement.issuer)
  
  ::org::xrpl::rpc::v1::AccountAddress* temp = issuer_;
  issuer_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::AccountAddress* Payment_PathElement::mutable_issuer() {
  
  if (issuer_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::AccountAddress>(GetArenaNoVirtual());
    issuer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.PathElement.issuer)
  return issuer_;
}
inline void Payment_PathElement::set_allocated_issuer(::org::xrpl::rpc::v1::AccountAddress* issuer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(issuer_);
  }
  if (issuer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      issuer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, issuer, submessage_arena);
    }
    
  } else {
    
  }
  issuer_ = issuer;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.PathElement.issuer)
}

// -------------------------------------------------------------------

// Payment_Path

// repeated .org.xrpl.rpc.v1.Payment.PathElement elements = 1;
inline int Payment_Path::elements_size() const {
  return elements_.size();
}
inline void Payment_Path::clear_elements() {
  elements_.Clear();
}
inline ::org::xrpl::rpc::v1::Payment_PathElement* Payment_Path::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.Path.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_PathElement >*
Payment_Path::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.Payment.Path.elements)
  return &elements_;
}
inline const ::org::xrpl::rpc::v1::Payment_PathElement& Payment_Path::elements(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.Path.elements)
  return elements_.Get(index);
}
inline ::org::xrpl::rpc::v1::Payment_PathElement* Payment_Path::add_elements() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.Payment.Path.elements)
  return elements_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_PathElement >&
Payment_Path::elements() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.Payment.Path.elements)
  return elements_;
}

// -------------------------------------------------------------------

// Payment

// .org.xrpl.rpc.v1.Amount amount = 1;
inline bool Payment::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Amount& Payment::amount() const {
  const ::org::xrpl::rpc::v1::Amount* p = amount_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Amount*>(
      &::org::xrpl::rpc::v1::_Amount_default_instance_);
}
inline ::org::xrpl::rpc::v1::Amount* Payment::release_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.amount)
  
  ::org::xrpl::rpc::v1::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Amount* Payment::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.amount)
  return amount_;
}
inline void Payment::set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.amount)
}

// .org.xrpl.rpc.v1.Destination destination = 2;
inline bool Payment::has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Destination& Payment::destination() const {
  const ::org::xrpl::rpc::v1::Destination* p = destination_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.destination)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Destination*>(
      &::org::xrpl::rpc::v1::_Destination_default_instance_);
}
inline ::org::xrpl::rpc::v1::Destination* Payment::release_destination() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.destination)
  
  ::org::xrpl::rpc::v1::Destination* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Destination* Payment::mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Destination>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.destination)
  return destination_;
}
inline void Payment::set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.destination)
}

// .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
inline bool Payment::has_destination_tag() const {
  return this != internal_default_instance() && destination_tag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::DestinationTag& Payment::destination_tag() const {
  const ::org::xrpl::rpc::v1::DestinationTag* p = destination_tag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.destination_tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::DestinationTag*>(
      &::org::xrpl::rpc::v1::_DestinationTag_default_instance_);
}
inline ::org::xrpl::rpc::v1::DestinationTag* Payment::release_destination_tag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.destination_tag)
  
  ::org::xrpl::rpc::v1::DestinationTag* temp = destination_tag_;
  destination_tag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::DestinationTag* Payment::mutable_destination_tag() {
  
  if (destination_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::DestinationTag>(GetArenaNoVirtual());
    destination_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.destination_tag)
  return destination_tag_;
}
inline void Payment::set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_tag_);
  }
  if (destination_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_tag, submessage_arena);
    }
    
  } else {
    
  }
  destination_tag_ = destination_tag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.destination_tag)
}

// .org.xrpl.rpc.v1.InvoiceID invoice_id = 4;
inline bool Payment::has_invoice_id() const {
  return this != internal_default_instance() && invoice_id_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::InvoiceID& Payment::invoice_id() const {
  const ::org::xrpl::rpc::v1::InvoiceID* p = invoice_id_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.invoice_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::InvoiceID*>(
      &::org::xrpl::rpc::v1::_InvoiceID_default_instance_);
}
inline ::org::xrpl::rpc::v1::InvoiceID* Payment::release_invoice_id() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.invoice_id)
  
  ::org::xrpl::rpc::v1::InvoiceID* temp = invoice_id_;
  invoice_id_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::InvoiceID* Payment::mutable_invoice_id() {
  
  if (invoice_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::InvoiceID>(GetArenaNoVirtual());
    invoice_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.invoice_id)
  return invoice_id_;
}
inline void Payment::set_allocated_invoice_id(::org::xrpl::rpc::v1::InvoiceID* invoice_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice_id_);
  }
  if (invoice_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invoice_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice_id, submessage_arena);
    }
    
  } else {
    
  }
  invoice_id_ = invoice_id;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.invoice_id)
}

// repeated .org.xrpl.rpc.v1.Payment.Path paths = 5;
inline int Payment::paths_size() const {
  return paths_.size();
}
inline void Payment::clear_paths() {
  paths_.Clear();
}
inline ::org::xrpl::rpc::v1::Payment_Path* Payment::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_Path >*
Payment::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.Payment.paths)
  return &paths_;
}
inline const ::org::xrpl::rpc::v1::Payment_Path& Payment::paths(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.paths)
  return paths_.Get(index);
}
inline ::org::xrpl::rpc::v1::Payment_Path* Payment::add_paths() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.Payment.paths)
  return paths_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::Payment_Path >&
Payment::paths() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.Payment.paths)
  return paths_;
}

// .org.xrpl.rpc.v1.SendMax send_max = 6;
inline bool Payment::has_send_max() const {
  return this != internal_default_instance() && send_max_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SendMax& Payment::send_max() const {
  const ::org::xrpl::rpc::v1::SendMax* p = send_max_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.send_max)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SendMax*>(
      &::org::xrpl::rpc::v1::_SendMax_default_instance_);
}
inline ::org::xrpl::rpc::v1::SendMax* Payment::release_send_max() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.send_max)
  
  ::org::xrpl::rpc::v1::SendMax* temp = send_max_;
  send_max_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SendMax* Payment::mutable_send_max() {
  
  if (send_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SendMax>(GetArenaNoVirtual());
    send_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.send_max)
  return send_max_;
}
inline void Payment::set_allocated_send_max(::org::xrpl::rpc::v1::SendMax* send_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_max_);
  }
  if (send_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_max, submessage_arena);
    }
    
  } else {
    
  }
  send_max_ = send_max;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.send_max)
}

// .org.xrpl.rpc.v1.DeliverMin deliver_min = 7;
inline bool Payment::has_deliver_min() const {
  return this != internal_default_instance() && deliver_min_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::DeliverMin& Payment::deliver_min() const {
  const ::org::xrpl::rpc::v1::DeliverMin* p = deliver_min_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Payment.deliver_min)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::DeliverMin*>(
      &::org::xrpl::rpc::v1::_DeliverMin_default_instance_);
}
inline ::org::xrpl::rpc::v1::DeliverMin* Payment::release_deliver_min() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Payment.deliver_min)
  
  ::org::xrpl::rpc::v1::DeliverMin* temp = deliver_min_;
  deliver_min_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::DeliverMin* Payment::mutable_deliver_min() {
  
  if (deliver_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::DeliverMin>(GetArenaNoVirtual());
    deliver_min_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Payment.deliver_min)
  return deliver_min_;
}
inline void Payment::set_allocated_deliver_min(::org::xrpl::rpc::v1::DeliverMin* deliver_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deliver_min_);
  }
  if (deliver_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deliver_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_min, submessage_arena);
    }
    
  } else {
    
  }
  deliver_min_ = deliver_min;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Payment.deliver_min)
}

// -------------------------------------------------------------------

// PaymentChannelClaim

// .org.xrpl.rpc.v1.Channel channel = 1;
inline bool PaymentChannelClaim::has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Channel& PaymentChannelClaim::channel() const {
  const ::org::xrpl::rpc::v1::Channel* p = channel_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelClaim.channel)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Channel*>(
      &::org::xrpl::rpc::v1::_Channel_default_instance_);
}
inline ::org::xrpl::rpc::v1::Channel* PaymentChannelClaim::release_channel() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelClaim.channel)
  
  ::org::xrpl::rpc::v1::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Channel* PaymentChannelClaim::mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Channel>(GetArenaNoVirtual());
    channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelClaim.channel)
  return channel_;
}
inline void PaymentChannelClaim::set_allocated_channel(::org::xrpl::rpc::v1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelClaim.channel)
}

// .org.xrpl.rpc.v1.Balance balance = 2;
inline bool PaymentChannelClaim::has_balance() const {
  return this != internal_default_instance() && balance_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Balance& PaymentChannelClaim::balance() const {
  const ::org::xrpl::rpc::v1::Balance* p = balance_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelClaim.balance)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Balance*>(
      &::org::xrpl::rpc::v1::_Balance_default_instance_);
}
inline ::org::xrpl::rpc::v1::Balance* PaymentChannelClaim::release_balance() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelClaim.balance)
  
  ::org::xrpl::rpc::v1::Balance* temp = balance_;
  balance_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Balance* PaymentChannelClaim::mutable_balance() {
  
  if (balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Balance>(GetArenaNoVirtual());
    balance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelClaim.balance)
  return balance_;
}
inline void PaymentChannelClaim::set_allocated_balance(::org::xrpl::rpc::v1::Balance* balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(balance_);
  }
  if (balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balance, submessage_arena);
    }
    
  } else {
    
  }
  balance_ = balance;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelClaim.balance)
}

// .org.xrpl.rpc.v1.Amount amount = 3;
inline bool PaymentChannelClaim::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Amount& PaymentChannelClaim::amount() const {
  const ::org::xrpl::rpc::v1::Amount* p = amount_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelClaim.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Amount*>(
      &::org::xrpl::rpc::v1::_Amount_default_instance_);
}
inline ::org::xrpl::rpc::v1::Amount* PaymentChannelClaim::release_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelClaim.amount)
  
  ::org::xrpl::rpc::v1::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Amount* PaymentChannelClaim::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelClaim.amount)
  return amount_;
}
inline void PaymentChannelClaim::set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelClaim.amount)
}

// .org.xrpl.rpc.v1.PaymentChannelSignature payment_channel_signature = 4;
inline bool PaymentChannelClaim::has_payment_channel_signature() const {
  return this != internal_default_instance() && payment_channel_signature_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::PaymentChannelSignature& PaymentChannelClaim::payment_channel_signature() const {
  const ::org::xrpl::rpc::v1::PaymentChannelSignature* p = payment_channel_signature_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelClaim.payment_channel_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::PaymentChannelSignature*>(
      &::org::xrpl::rpc::v1::_PaymentChannelSignature_default_instance_);
}
inline ::org::xrpl::rpc::v1::PaymentChannelSignature* PaymentChannelClaim::release_payment_channel_signature() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelClaim.payment_channel_signature)
  
  ::org::xrpl::rpc::v1::PaymentChannelSignature* temp = payment_channel_signature_;
  payment_channel_signature_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::PaymentChannelSignature* PaymentChannelClaim::mutable_payment_channel_signature() {
  
  if (payment_channel_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::PaymentChannelSignature>(GetArenaNoVirtual());
    payment_channel_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelClaim.payment_channel_signature)
  return payment_channel_signature_;
}
inline void PaymentChannelClaim::set_allocated_payment_channel_signature(::org::xrpl::rpc::v1::PaymentChannelSignature* payment_channel_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment_channel_signature_);
  }
  if (payment_channel_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_channel_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_channel_signature, submessage_arena);
    }
    
  } else {
    
  }
  payment_channel_signature_ = payment_channel_signature;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelClaim.payment_channel_signature)
}

// .org.xrpl.rpc.v1.PublicKey public_key = 5;
inline bool PaymentChannelClaim::has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::PublicKey& PaymentChannelClaim::public_key() const {
  const ::org::xrpl::rpc::v1::PublicKey* p = public_key_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelClaim.public_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::PublicKey*>(
      &::org::xrpl::rpc::v1::_PublicKey_default_instance_);
}
inline ::org::xrpl::rpc::v1::PublicKey* PaymentChannelClaim::release_public_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelClaim.public_key)
  
  ::org::xrpl::rpc::v1::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::PublicKey* PaymentChannelClaim::mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::PublicKey>(GetArenaNoVirtual());
    public_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelClaim.public_key)
  return public_key_;
}
inline void PaymentChannelClaim::set_allocated_public_key(::org::xrpl::rpc::v1::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelClaim.public_key)
}

// -------------------------------------------------------------------

// PaymentChannelCreate

// .org.xrpl.rpc.v1.Amount amount = 1;
inline bool PaymentChannelCreate::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Amount& PaymentChannelCreate::amount() const {
  const ::org::xrpl::rpc::v1::Amount* p = amount_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelCreate.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Amount*>(
      &::org::xrpl::rpc::v1::_Amount_default_instance_);
}
inline ::org::xrpl::rpc::v1::Amount* PaymentChannelCreate::release_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelCreate.amount)
  
  ::org::xrpl::rpc::v1::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Amount* PaymentChannelCreate::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelCreate.amount)
  return amount_;
}
inline void PaymentChannelCreate::set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelCreate.amount)
}

// .org.xrpl.rpc.v1.Destination destination = 2;
inline bool PaymentChannelCreate::has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Destination& PaymentChannelCreate::destination() const {
  const ::org::xrpl::rpc::v1::Destination* p = destination_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelCreate.destination)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Destination*>(
      &::org::xrpl::rpc::v1::_Destination_default_instance_);
}
inline ::org::xrpl::rpc::v1::Destination* PaymentChannelCreate::release_destination() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelCreate.destination)
  
  ::org::xrpl::rpc::v1::Destination* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Destination* PaymentChannelCreate::mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Destination>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelCreate.destination)
  return destination_;
}
inline void PaymentChannelCreate::set_allocated_destination(::org::xrpl::rpc::v1::Destination* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelCreate.destination)
}

// .org.xrpl.rpc.v1.SettleDelay settle_delay = 3;
inline bool PaymentChannelCreate::has_settle_delay() const {
  return this != internal_default_instance() && settle_delay_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SettleDelay& PaymentChannelCreate::settle_delay() const {
  const ::org::xrpl::rpc::v1::SettleDelay* p = settle_delay_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelCreate.settle_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SettleDelay*>(
      &::org::xrpl::rpc::v1::_SettleDelay_default_instance_);
}
inline ::org::xrpl::rpc::v1::SettleDelay* PaymentChannelCreate::release_settle_delay() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelCreate.settle_delay)
  
  ::org::xrpl::rpc::v1::SettleDelay* temp = settle_delay_;
  settle_delay_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SettleDelay* PaymentChannelCreate::mutable_settle_delay() {
  
  if (settle_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SettleDelay>(GetArenaNoVirtual());
    settle_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelCreate.settle_delay)
  return settle_delay_;
}
inline void PaymentChannelCreate::set_allocated_settle_delay(::org::xrpl::rpc::v1::SettleDelay* settle_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settle_delay_);
  }
  if (settle_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settle_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settle_delay, submessage_arena);
    }
    
  } else {
    
  }
  settle_delay_ = settle_delay;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelCreate.settle_delay)
}

// .org.xrpl.rpc.v1.PublicKey public_key = 4;
inline bool PaymentChannelCreate::has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::PublicKey& PaymentChannelCreate::public_key() const {
  const ::org::xrpl::rpc::v1::PublicKey* p = public_key_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelCreate.public_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::PublicKey*>(
      &::org::xrpl::rpc::v1::_PublicKey_default_instance_);
}
inline ::org::xrpl::rpc::v1::PublicKey* PaymentChannelCreate::release_public_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelCreate.public_key)
  
  ::org::xrpl::rpc::v1::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::PublicKey* PaymentChannelCreate::mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::PublicKey>(GetArenaNoVirtual());
    public_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelCreate.public_key)
  return public_key_;
}
inline void PaymentChannelCreate::set_allocated_public_key(::org::xrpl::rpc::v1::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelCreate.public_key)
}

// .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
inline bool PaymentChannelCreate::has_cancel_after() const {
  return this != internal_default_instance() && cancel_after_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::CancelAfter& PaymentChannelCreate::cancel_after() const {
  const ::org::xrpl::rpc::v1::CancelAfter* p = cancel_after_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelCreate.cancel_after)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::CancelAfter*>(
      &::org::xrpl::rpc::v1::_CancelAfter_default_instance_);
}
inline ::org::xrpl::rpc::v1::CancelAfter* PaymentChannelCreate::release_cancel_after() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelCreate.cancel_after)
  
  ::org::xrpl::rpc::v1::CancelAfter* temp = cancel_after_;
  cancel_after_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::CancelAfter* PaymentChannelCreate::mutable_cancel_after() {
  
  if (cancel_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::CancelAfter>(GetArenaNoVirtual());
    cancel_after_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelCreate.cancel_after)
  return cancel_after_;
}
inline void PaymentChannelCreate::set_allocated_cancel_after(::org::xrpl::rpc::v1::CancelAfter* cancel_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_after_);
  }
  if (cancel_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancel_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_after, submessage_arena);
    }
    
  } else {
    
  }
  cancel_after_ = cancel_after;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelCreate.cancel_after)
}

// .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
inline bool PaymentChannelCreate::has_destination_tag() const {
  return this != internal_default_instance() && destination_tag_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::DestinationTag& PaymentChannelCreate::destination_tag() const {
  const ::org::xrpl::rpc::v1::DestinationTag* p = destination_tag_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelCreate.destination_tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::DestinationTag*>(
      &::org::xrpl::rpc::v1::_DestinationTag_default_instance_);
}
inline ::org::xrpl::rpc::v1::DestinationTag* PaymentChannelCreate::release_destination_tag() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelCreate.destination_tag)
  
  ::org::xrpl::rpc::v1::DestinationTag* temp = destination_tag_;
  destination_tag_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::DestinationTag* PaymentChannelCreate::mutable_destination_tag() {
  
  if (destination_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::DestinationTag>(GetArenaNoVirtual());
    destination_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelCreate.destination_tag)
  return destination_tag_;
}
inline void PaymentChannelCreate::set_allocated_destination_tag(::org::xrpl::rpc::v1::DestinationTag* destination_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_tag_);
  }
  if (destination_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_tag, submessage_arena);
    }
    
  } else {
    
  }
  destination_tag_ = destination_tag;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelCreate.destination_tag)
}

// -------------------------------------------------------------------

// PaymentChannelFund

// .org.xrpl.rpc.v1.Channel channel = 1;
inline bool PaymentChannelFund::has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Channel& PaymentChannelFund::channel() const {
  const ::org::xrpl::rpc::v1::Channel* p = channel_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelFund.channel)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Channel*>(
      &::org::xrpl::rpc::v1::_Channel_default_instance_);
}
inline ::org::xrpl::rpc::v1::Channel* PaymentChannelFund::release_channel() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelFund.channel)
  
  ::org::xrpl::rpc::v1::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Channel* PaymentChannelFund::mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Channel>(GetArenaNoVirtual());
    channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelFund.channel)
  return channel_;
}
inline void PaymentChannelFund::set_allocated_channel(::org::xrpl::rpc::v1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelFund.channel)
}

// .org.xrpl.rpc.v1.Amount amount = 2;
inline bool PaymentChannelFund::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Amount& PaymentChannelFund::amount() const {
  const ::org::xrpl::rpc::v1::Amount* p = amount_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelFund.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Amount*>(
      &::org::xrpl::rpc::v1::_Amount_default_instance_);
}
inline ::org::xrpl::rpc::v1::Amount* PaymentChannelFund::release_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelFund.amount)
  
  ::org::xrpl::rpc::v1::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Amount* PaymentChannelFund::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelFund.amount)
  return amount_;
}
inline void PaymentChannelFund::set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelFund.amount)
}

// .org.xrpl.rpc.v1.Expiration expiration = 3;
inline bool PaymentChannelFund::has_expiration() const {
  return this != internal_default_instance() && expiration_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::Expiration& PaymentChannelFund::expiration() const {
  const ::org::xrpl::rpc::v1::Expiration* p = expiration_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.PaymentChannelFund.expiration)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Expiration*>(
      &::org::xrpl::rpc::v1::_Expiration_default_instance_);
}
inline ::org::xrpl::rpc::v1::Expiration* PaymentChannelFund::release_expiration() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.PaymentChannelFund.expiration)
  
  ::org::xrpl::rpc::v1::Expiration* temp = expiration_;
  expiration_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Expiration* PaymentChannelFund::mutable_expiration() {
  
  if (expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Expiration>(GetArenaNoVirtual());
    expiration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.PaymentChannelFund.expiration)
  return expiration_;
}
inline void PaymentChannelFund::set_allocated_expiration(::org::xrpl::rpc::v1::Expiration* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    
  } else {
    
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.PaymentChannelFund.expiration)
}

// -------------------------------------------------------------------

// SetRegularKey

// .org.xrpl.rpc.v1.RegularKey regular_key = 1;
inline bool SetRegularKey::has_regular_key() const {
  return this != internal_default_instance() && regular_key_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::RegularKey& SetRegularKey::regular_key() const {
  const ::org::xrpl::rpc::v1::RegularKey* p = regular_key_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SetRegularKey.regular_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::RegularKey*>(
      &::org::xrpl::rpc::v1::_RegularKey_default_instance_);
}
inline ::org::xrpl::rpc::v1::RegularKey* SetRegularKey::release_regular_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SetRegularKey.regular_key)
  
  ::org::xrpl::rpc::v1::RegularKey* temp = regular_key_;
  regular_key_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::RegularKey* SetRegularKey::mutable_regular_key() {
  
  if (regular_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::RegularKey>(GetArenaNoVirtual());
    regular_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SetRegularKey.regular_key)
  return regular_key_;
}
inline void SetRegularKey::set_allocated_regular_key(::org::xrpl::rpc::v1::RegularKey* regular_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(regular_key_);
  }
  if (regular_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regular_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regular_key, submessage_arena);
    }
    
  } else {
    
  }
  regular_key_ = regular_key;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SetRegularKey.regular_key)
}

// -------------------------------------------------------------------

// SignerListSet

// .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 1;
inline bool SignerListSet::has_signer_quorum() const {
  return this != internal_default_instance() && signer_quorum_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::SignerQuorum& SignerListSet::signer_quorum() const {
  const ::org::xrpl::rpc::v1::SignerQuorum* p = signer_quorum_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SignerListSet.signer_quorum)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::SignerQuorum*>(
      &::org::xrpl::rpc::v1::_SignerQuorum_default_instance_);
}
inline ::org::xrpl::rpc::v1::SignerQuorum* SignerListSet::release_signer_quorum() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SignerListSet.signer_quorum)
  
  ::org::xrpl::rpc::v1::SignerQuorum* temp = signer_quorum_;
  signer_quorum_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::SignerQuorum* SignerListSet::mutable_signer_quorum() {
  
  if (signer_quorum_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::SignerQuorum>(GetArenaNoVirtual());
    signer_quorum_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SignerListSet.signer_quorum)
  return signer_quorum_;
}
inline void SignerListSet::set_allocated_signer_quorum(::org::xrpl::rpc::v1::SignerQuorum* signer_quorum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signer_quorum_);
  }
  if (signer_quorum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signer_quorum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signer_quorum, submessage_arena);
    }
    
  } else {
    
  }
  signer_quorum_ = signer_quorum;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SignerListSet.signer_quorum)
}

// repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 2;
inline int SignerListSet::signer_entries_size() const {
  return signer_entries_.size();
}
inline ::org::xrpl::rpc::v1::SignerEntry* SignerListSet::mutable_signer_entries(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SignerListSet.signer_entries)
  return signer_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::SignerEntry >*
SignerListSet::mutable_signer_entries() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.SignerListSet.signer_entries)
  return &signer_entries_;
}
inline const ::org::xrpl::rpc::v1::SignerEntry& SignerListSet::signer_entries(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SignerListSet.signer_entries)
  return signer_entries_.Get(index);
}
inline ::org::xrpl::rpc::v1::SignerEntry* SignerListSet::add_signer_entries() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.SignerListSet.signer_entries)
  return signer_entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::SignerEntry >&
SignerListSet::signer_entries() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.SignerListSet.signer_entries)
  return signer_entries_;
}

// -------------------------------------------------------------------

// TicketCreate

// .org.xrpl.rpc.v1.TicketCount count = 1;
inline bool TicketCreate::has_count() const {
  return this != internal_default_instance() && count_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TicketCount& TicketCreate::count() const {
  const ::org::xrpl::rpc::v1::TicketCount* p = count_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TicketCreate.count)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TicketCount*>(
      &::org::xrpl::rpc::v1::_TicketCount_default_instance_);
}
inline ::org::xrpl::rpc::v1::TicketCount* TicketCreate::release_count() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.TicketCreate.count)
  
  ::org::xrpl::rpc::v1::TicketCount* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TicketCount* TicketCreate::mutable_count() {
  
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TicketCount>(GetArenaNoVirtual());
    count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TicketCreate.count)
  return count_;
}
inline void TicketCreate::set_allocated_count(::org::xrpl::rpc::v1::TicketCount* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    
  } else {
    
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.TicketCreate.count)
}

// -------------------------------------------------------------------

// TrustSet

// .org.xrpl.rpc.v1.LimitAmount limit_amount = 1;
inline bool TrustSet::has_limit_amount() const {
  return this != internal_default_instance() && limit_amount_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LimitAmount& TrustSet::limit_amount() const {
  const ::org::xrpl::rpc::v1::LimitAmount* p = limit_amount_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TrustSet.limit_amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LimitAmount*>(
      &::org::xrpl::rpc::v1::_LimitAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::LimitAmount* TrustSet::release_limit_amount() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.TrustSet.limit_amount)
  
  ::org::xrpl::rpc::v1::LimitAmount* temp = limit_amount_;
  limit_amount_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LimitAmount* TrustSet::mutable_limit_amount() {
  
  if (limit_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LimitAmount>(GetArenaNoVirtual());
    limit_amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TrustSet.limit_amount)
  return limit_amount_;
}
inline void TrustSet::set_allocated_limit_amount(::org::xrpl::rpc::v1::LimitAmount* limit_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_amount_);
  }
  if (limit_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      limit_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit_amount, submessage_arena);
    }
    
  } else {
    
  }
  limit_amount_ = limit_amount;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.TrustSet.limit_amount)
}

// .org.xrpl.rpc.v1.QualityIn quality_in = 2;
inline bool TrustSet::has_quality_in() const {
  return this != internal_default_instance() && quality_in_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::QualityIn& TrustSet::quality_in() const {
  const ::org::xrpl::rpc::v1::QualityIn* p = quality_in_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TrustSet.quality_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::QualityIn*>(
      &::org::xrpl::rpc::v1::_QualityIn_default_instance_);
}
inline ::org::xrpl::rpc::v1::QualityIn* TrustSet::release_quality_in() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.TrustSet.quality_in)
  
  ::org::xrpl::rpc::v1::QualityIn* temp = quality_in_;
  quality_in_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::QualityIn* TrustSet::mutable_quality_in() {
  
  if (quality_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::QualityIn>(GetArenaNoVirtual());
    quality_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TrustSet.quality_in)
  return quality_in_;
}
inline void TrustSet::set_allocated_quality_in(::org::xrpl::rpc::v1::QualityIn* quality_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_in_);
  }
  if (quality_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quality_in, submessage_arena);
    }
    
  } else {
    
  }
  quality_in_ = quality_in;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.TrustSet.quality_in)
}

// .org.xrpl.rpc.v1.QualityOut quality_out = 3;
inline bool TrustSet::has_quality_out() const {
  return this != internal_default_instance() && quality_out_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::QualityOut& TrustSet::quality_out() const {
  const ::org::xrpl::rpc::v1::QualityOut* p = quality_out_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TrustSet.quality_out)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::QualityOut*>(
      &::org::xrpl::rpc::v1::_QualityOut_default_instance_);
}
inline ::org::xrpl::rpc::v1::QualityOut* TrustSet::release_quality_out() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.TrustSet.quality_out)
  
  ::org::xrpl::rpc::v1::QualityOut* temp = quality_out_;
  quality_out_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::QualityOut* TrustSet::mutable_quality_out() {
  
  if (quality_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::QualityOut>(GetArenaNoVirtual());
    quality_out_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TrustSet.quality_out)
  return quality_out_;
}
inline void TrustSet::set_allocated_quality_out(::org::xrpl::rpc::v1::QualityOut* quality_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_out_);
  }
  if (quality_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quality_out, submessage_arena);
    }
    
  } else {
    
  }
  quality_out_ = quality_out;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.TrustSet.quality_out)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto
