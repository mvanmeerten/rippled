// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/ledger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fledger_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fledger_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class LedgerRange;
class LedgerRangeDefaultTypeInternal;
extern LedgerRangeDefaultTypeInternal _LedgerRange_default_instance_;
class LedgerSpecifier;
class LedgerSpecifierDefaultTypeInternal;
extern LedgerSpecifierDefaultTypeInternal _LedgerSpecifier_default_instance_;
class RawLedgerObject;
class RawLedgerObjectDefaultTypeInternal;
extern RawLedgerObjectDefaultTypeInternal _RawLedgerObject_default_instance_;
class RawLedgerObjects;
class RawLedgerObjectsDefaultTypeInternal;
extern RawLedgerObjectsDefaultTypeInternal _RawLedgerObjects_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::LedgerRange* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerRange>(Arena*);
template<> ::org::xrpl::rpc::v1::LedgerSpecifier* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerSpecifier>(Arena*);
template<> ::org::xrpl::rpc::v1::RawLedgerObject* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::RawLedgerObject>(Arena*);
template<> ::org::xrpl::rpc::v1::RawLedgerObjects* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::RawLedgerObjects>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

enum LedgerSpecifier_Shortcut : int {
  LedgerSpecifier_Shortcut_SHORTCUT_UNSPECIFIED = 0,
  LedgerSpecifier_Shortcut_SHORTCUT_VALIDATED = 1,
  LedgerSpecifier_Shortcut_SHORTCUT_CLOSED = 2,
  LedgerSpecifier_Shortcut_SHORTCUT_CURRENT = 3,
  LedgerSpecifier_Shortcut_LedgerSpecifier_Shortcut_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LedgerSpecifier_Shortcut_LedgerSpecifier_Shortcut_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LedgerSpecifier_Shortcut_IsValid(int value);
constexpr LedgerSpecifier_Shortcut LedgerSpecifier_Shortcut_Shortcut_MIN = LedgerSpecifier_Shortcut_SHORTCUT_UNSPECIFIED;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier_Shortcut_Shortcut_MAX = LedgerSpecifier_Shortcut_SHORTCUT_CURRENT;
constexpr int LedgerSpecifier_Shortcut_Shortcut_ARRAYSIZE = LedgerSpecifier_Shortcut_Shortcut_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LedgerSpecifier_Shortcut_descriptor();
template<typename T>
inline const std::string& LedgerSpecifier_Shortcut_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LedgerSpecifier_Shortcut>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LedgerSpecifier_Shortcut_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LedgerSpecifier_Shortcut_descriptor(), enum_t_value);
}
inline bool LedgerSpecifier_Shortcut_Parse(
    const std::string& name, LedgerSpecifier_Shortcut* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LedgerSpecifier_Shortcut>(
    LedgerSpecifier_Shortcut_descriptor(), name, value);
}
// ===================================================================

class LedgerSpecifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.LedgerSpecifier) */ {
 public:
  LedgerSpecifier();
  virtual ~LedgerSpecifier();

  LedgerSpecifier(const LedgerSpecifier& from);
  LedgerSpecifier(LedgerSpecifier&& from) noexcept
    : LedgerSpecifier() {
    *this = ::std::move(from);
  }

  inline LedgerSpecifier& operator=(const LedgerSpecifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline LedgerSpecifier& operator=(LedgerSpecifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LedgerSpecifier& default_instance();

  enum LedgerCase {
    kShortcut = 1,
    kSequence = 2,
    kHash = 3,
    LEDGER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LedgerSpecifier* internal_default_instance() {
    return reinterpret_cast<const LedgerSpecifier*>(
               &_LedgerSpecifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LedgerSpecifier* other);
  friend void swap(LedgerSpecifier& a, LedgerSpecifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LedgerSpecifier* New() const final {
    return CreateMaybeMessage<LedgerSpecifier>(nullptr);
  }

  LedgerSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LedgerSpecifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LedgerSpecifier& from);
  void MergeFrom(const LedgerSpecifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedgerSpecifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.LedgerSpecifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LedgerSpecifier_Shortcut Shortcut;
  static constexpr Shortcut SHORTCUT_UNSPECIFIED =
    LedgerSpecifier_Shortcut_SHORTCUT_UNSPECIFIED;
  static constexpr Shortcut SHORTCUT_VALIDATED =
    LedgerSpecifier_Shortcut_SHORTCUT_VALIDATED;
  static constexpr Shortcut SHORTCUT_CLOSED =
    LedgerSpecifier_Shortcut_SHORTCUT_CLOSED;
  static constexpr Shortcut SHORTCUT_CURRENT =
    LedgerSpecifier_Shortcut_SHORTCUT_CURRENT;
  static inline bool Shortcut_IsValid(int value) {
    return LedgerSpecifier_Shortcut_IsValid(value);
  }
  static constexpr Shortcut Shortcut_MIN =
    LedgerSpecifier_Shortcut_Shortcut_MIN;
  static constexpr Shortcut Shortcut_MAX =
    LedgerSpecifier_Shortcut_Shortcut_MAX;
  static constexpr int Shortcut_ARRAYSIZE =
    LedgerSpecifier_Shortcut_Shortcut_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Shortcut_descriptor() {
    return LedgerSpecifier_Shortcut_descriptor();
  }
  template<typename T>
  static inline const std::string& Shortcut_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Shortcut>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Shortcut_Name.");
    return LedgerSpecifier_Shortcut_Name(enum_t_value);
  }
  static inline bool Shortcut_Parse(const std::string& name,
      Shortcut* value) {
    return LedgerSpecifier_Shortcut_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
  private:
  bool has_shortcut() const;
  public:
  void clear_shortcut();
  static const int kShortcutFieldNumber = 1;
  ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut shortcut() const;
  void set_shortcut(::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut value);

  // uint32 sequence = 2;
  private:
  bool has_sequence() const;
  public:
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bytes hash = 3;
  private:
  bool has_hash() const;
  public:
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  void clear_ledger();
  LedgerCase ledger_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.LedgerSpecifier)
 private:
  class HasBitSetters;
  void set_has_shortcut();
  void set_has_sequence();
  void set_has_hash();

  inline bool has_ledger() const;
  inline void clear_has_ledger();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union LedgerUnion {
    LedgerUnion() {}
    int shortcut_;
    ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  } ledger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
};
// -------------------------------------------------------------------

class LedgerRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.LedgerRange) */ {
 public:
  LedgerRange();
  virtual ~LedgerRange();

  LedgerRange(const LedgerRange& from);
  LedgerRange(LedgerRange&& from) noexcept
    : LedgerRange() {
    *this = ::std::move(from);
  }

  inline LedgerRange& operator=(const LedgerRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LedgerRange& operator=(LedgerRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LedgerRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LedgerRange* internal_default_instance() {
    return reinterpret_cast<const LedgerRange*>(
               &_LedgerRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LedgerRange* other);
  friend void swap(LedgerRange& a, LedgerRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LedgerRange* New() const final {
    return CreateMaybeMessage<LedgerRange>(nullptr);
  }

  LedgerRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LedgerRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LedgerRange& from);
  void MergeFrom(const LedgerRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedgerRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.LedgerRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ledger_index_min = 1;
  void clear_ledger_index_min();
  static const int kLedgerIndexMinFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_min() const;
  void set_ledger_index_min(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ledger_index_max = 2;
  void clear_ledger_index_max();
  static const int kLedgerIndexMaxFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_max() const;
  void set_ledger_index_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.LedgerRange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
};
// -------------------------------------------------------------------

class RawLedgerObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.RawLedgerObject) */ {
 public:
  RawLedgerObject();
  virtual ~RawLedgerObject();

  RawLedgerObject(const RawLedgerObject& from);
  RawLedgerObject(RawLedgerObject&& from) noexcept
    : RawLedgerObject() {
    *this = ::std::move(from);
  }

  inline RawLedgerObject& operator=(const RawLedgerObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawLedgerObject& operator=(RawLedgerObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawLedgerObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawLedgerObject* internal_default_instance() {
    return reinterpret_cast<const RawLedgerObject*>(
               &_RawLedgerObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RawLedgerObject* other);
  friend void swap(RawLedgerObject& a, RawLedgerObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawLedgerObject* New() const final {
    return CreateMaybeMessage<RawLedgerObject>(nullptr);
  }

  RawLedgerObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawLedgerObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawLedgerObject& from);
  void MergeFrom(const RawLedgerObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawLedgerObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.RawLedgerObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.RawLedgerObject)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
};
// -------------------------------------------------------------------

class RawLedgerObjects :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.RawLedgerObjects) */ {
 public:
  RawLedgerObjects();
  virtual ~RawLedgerObjects();

  RawLedgerObjects(const RawLedgerObjects& from);
  RawLedgerObjects(RawLedgerObjects&& from) noexcept
    : RawLedgerObjects() {
    *this = ::std::move(from);
  }

  inline RawLedgerObjects& operator=(const RawLedgerObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawLedgerObjects& operator=(RawLedgerObjects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawLedgerObjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawLedgerObjects* internal_default_instance() {
    return reinterpret_cast<const RawLedgerObjects*>(
               &_RawLedgerObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RawLedgerObjects* other);
  friend void swap(RawLedgerObjects& a, RawLedgerObjects& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawLedgerObjects* New() const final {
    return CreateMaybeMessage<RawLedgerObjects>(nullptr);
  }

  RawLedgerObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawLedgerObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawLedgerObjects& from);
  void MergeFrom(const RawLedgerObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawLedgerObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.RawLedgerObjects";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::org::xrpl::rpc::v1::RawLedgerObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::RawLedgerObject >*
      mutable_objects();
  const ::org::xrpl::rpc::v1::RawLedgerObject& objects(int index) const;
  ::org::xrpl::rpc::v1::RawLedgerObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::RawLedgerObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.RawLedgerObjects)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::RawLedgerObject > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LedgerSpecifier

// .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
inline bool LedgerSpecifier::has_shortcut() const {
  return ledger_case() == kShortcut;
}
inline void LedgerSpecifier::set_has_shortcut() {
  _oneof_case_[0] = kShortcut;
}
inline void LedgerSpecifier::clear_shortcut() {
  if (has_shortcut()) {
    ledger_.shortcut_ = 0;
    clear_has_ledger();
  }
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut LedgerSpecifier::shortcut() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.LedgerSpecifier.shortcut)
  if (has_shortcut()) {
    return static_cast< ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut >(ledger_.shortcut_);
  }
  return static_cast< ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut >(0);
}
inline void LedgerSpecifier::set_shortcut(::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut value) {
  if (!has_shortcut()) {
    clear_ledger();
    set_has_shortcut();
  }
  ledger_.shortcut_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.LedgerSpecifier.shortcut)
}

// uint32 sequence = 2;
inline bool LedgerSpecifier::has_sequence() const {
  return ledger_case() == kSequence;
}
inline void LedgerSpecifier::set_has_sequence() {
  _oneof_case_[0] = kSequence;
}
inline void LedgerSpecifier::clear_sequence() {
  if (has_sequence()) {
    ledger_.sequence_ = 0u;
    clear_has_ledger();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LedgerSpecifier::sequence() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.LedgerSpecifier.sequence)
  if (has_sequence()) {
    return ledger_.sequence_;
  }
  return 0u;
}
inline void LedgerSpecifier::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_sequence()) {
    clear_ledger();
    set_has_sequence();
  }
  ledger_.sequence_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.LedgerSpecifier.sequence)
}

// bytes hash = 3;
inline bool LedgerSpecifier::has_hash() const {
  return ledger_case() == kHash;
}
inline void LedgerSpecifier::set_has_hash() {
  _oneof_case_[0] = kHash;
}
inline void LedgerSpecifier::clear_hash() {
  if (has_hash()) {
    ledger_.hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_ledger();
  }
}
inline const std::string& LedgerSpecifier::hash() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.LedgerSpecifier.hash)
  if (has_hash()) {
    return ledger_.hash_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LedgerSpecifier::set_hash(const std::string& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.LedgerSpecifier.hash)
  if (!has_hash()) {
    clear_ledger();
    set_has_hash();
    ledger_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ledger_.hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.LedgerSpecifier.hash)
}
inline void LedgerSpecifier::set_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.LedgerSpecifier.hash)
  if (!has_hash()) {
    clear_ledger();
    set_has_hash();
    ledger_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ledger_.hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.LedgerSpecifier.hash)
}
inline void LedgerSpecifier::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_hash()) {
    clear_ledger();
    set_has_hash();
    ledger_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ledger_.hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.LedgerSpecifier.hash)
}
inline void LedgerSpecifier::set_hash(const void* value, size_t size) {
  if (!has_hash()) {
    clear_ledger();
    set_has_hash();
    ledger_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ledger_.hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.LedgerSpecifier.hash)
}
inline std::string* LedgerSpecifier::mutable_hash() {
  if (!has_hash()) {
    clear_ledger();
    set_has_hash();
    ledger_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.LedgerSpecifier.hash)
  return ledger_.hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LedgerSpecifier::release_hash() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.LedgerSpecifier.hash)
  if (has_hash()) {
    clear_has_ledger();
    return ledger_.hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LedgerSpecifier::set_allocated_hash(std::string* hash) {
  if (has_ledger()) {
    clear_ledger();
  }
  if (hash != nullptr) {
    set_has_hash();
    ledger_.hash_.UnsafeSetDefault(hash);
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerSpecifier.hash)
}

inline bool LedgerSpecifier::has_ledger() const {
  return ledger_case() != LEDGER_NOT_SET;
}
inline void LedgerSpecifier::clear_has_ledger() {
  _oneof_case_[0] = LEDGER_NOT_SET;
}
inline LedgerSpecifier::LedgerCase LedgerSpecifier::ledger_case() const {
  return LedgerSpecifier::LedgerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LedgerRange

// uint32 ledger_index_min = 1;
inline void LedgerRange::clear_ledger_index_min() {
  ledger_index_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LedgerRange::ledger_index_min() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.LedgerRange.ledger_index_min)
  return ledger_index_min_;
}
inline void LedgerRange::set_ledger_index_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_min_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.LedgerRange.ledger_index_min)
}

// uint32 ledger_index_max = 2;
inline void LedgerRange::clear_ledger_index_max() {
  ledger_index_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LedgerRange::ledger_index_max() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.LedgerRange.ledger_index_max)
  return ledger_index_max_;
}
inline void LedgerRange::set_ledger_index_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_max_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.LedgerRange.ledger_index_max)
}

// -------------------------------------------------------------------

// RawLedgerObject

// bytes data = 1;
inline void RawLedgerObject::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RawLedgerObject::data() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.RawLedgerObject.data)
  return data_.GetNoArena();
}
inline void RawLedgerObject::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.RawLedgerObject.data)
}
inline void RawLedgerObject::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.RawLedgerObject.data)
}
inline void RawLedgerObject::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.RawLedgerObject.data)
}
inline void RawLedgerObject::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.RawLedgerObject.data)
}
inline std::string* RawLedgerObject::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.RawLedgerObject.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RawLedgerObject::release_data() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.RawLedgerObject.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RawLedgerObject::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.RawLedgerObject.data)
}

// bytes key = 2;
inline void RawLedgerObject::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RawLedgerObject::key() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.RawLedgerObject.key)
  return key_.GetNoArena();
}
inline void RawLedgerObject::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.RawLedgerObject.key)
}
inline void RawLedgerObject::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.RawLedgerObject.key)
}
inline void RawLedgerObject::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.RawLedgerObject.key)
}
inline void RawLedgerObject::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.RawLedgerObject.key)
}
inline std::string* RawLedgerObject::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.RawLedgerObject.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RawLedgerObject::release_key() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.RawLedgerObject.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RawLedgerObject::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.RawLedgerObject.key)
}

// -------------------------------------------------------------------

// RawLedgerObjects

// repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
inline int RawLedgerObjects::objects_size() const {
  return objects_.size();
}
inline void RawLedgerObjects::clear_objects() {
  objects_.Clear();
}
inline ::org::xrpl::rpc::v1::RawLedgerObject* RawLedgerObjects::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.RawLedgerObjects.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::RawLedgerObject >*
RawLedgerObjects::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.RawLedgerObjects.objects)
  return &objects_;
}
inline const ::org::xrpl::rpc::v1::RawLedgerObject& RawLedgerObjects::objects(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.RawLedgerObjects.objects)
  return objects_.Get(index);
}
inline ::org::xrpl::rpc::v1::RawLedgerObject* RawLedgerObjects::add_objects() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.RawLedgerObjects.objects)
  return objects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::RawLedgerObject >&
RawLedgerObjects::objects() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.RawLedgerObjects.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut>() {
  return ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fledger_2eproto
