// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_account_transaction_history.proto

#include "org/xrpl/rpc/v1/get_account_transaction_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2faccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetAccountTransactionHistoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountTransactionHistoryRequest> _instance;
  const ::org::xrpl::rpc::v1::LedgerSpecifier* ledger_specifier_;
  const ::org::xrpl::rpc::v1::LedgerRange* ledger_range_;
} _GetAccountTransactionHistoryRequest_default_instance_;
class GetAccountTransactionHistoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountTransactionHistoryResponse> _instance;
} _GetAccountTransactionHistoryResponse_default_instance_;
class MarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Marker> _instance;
} _Marker_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_GetAccountTransactionHistoryRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetAccountTransactionHistoryRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GetAccountTransactionHistoryRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_GetAccountTransactionHistoryRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto}, {
      &scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto.base,
      &scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,
      &scc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,
      &scc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base,}};

static void InitDefaultsscc_info_GetAccountTransactionHistoryResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetAccountTransactionHistoryResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetAccountTransactionHistoryResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetAccountTransactionHistoryResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto}, {
      &scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto.base,
      &scc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base,
      &scc_info_GetTransactionResponse_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Marker_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Marker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Marker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, account_),
  offsetof(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequestDefaultTypeInternal, ledger_specifier_),
  offsetof(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequestDefaultTypeInternal, ledger_range_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, binary_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, forward_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, marker_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, ledger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, ledger_index_min_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, ledger_index_max_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, limit_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, marker_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, transactions_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse, validated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Marker, ledger_index_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Marker, account_sequence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest)},
  { 13, -1, sizeof(::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse)},
  { 25, -1, sizeof(::org::xrpl::rpc::v1::Marker)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetAccountTransactionHistoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetAccountTransactionHistoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Marker_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto[] =
  "\n5org/xrpl/rpc/v1/get_account_transactio"
  "n_history.proto\022\017org.xrpl.rpc.v1\032%org/xr"
  "pl/rpc/v1/get_transaction.proto\032\035org/xrp"
  "l/rpc/v1/account.proto\032\034org/xrpl/rpc/v1/"
  "ledger.proto\"\256\002\n#GetAccountTransactionHi"
  "storyRequest\0220\n\007account\030\001 \001(\0132\037.org.xrpl"
  ".rpc.v1.AccountAddress\022<\n\020ledger_specifi"
  "er\030\002 \001(\0132 .org.xrpl.rpc.v1.LedgerSpecifi"
  "erH\000\0224\n\014ledger_range\030\003 \001(\0132\034.org.xrpl.rp"
  "c.v1.LedgerRangeH\000\022\016\n\006binary\030\004 \001(\010\022\017\n\007fo"
  "rward\030\005 \001(\010\022\r\n\005limit\030\006 \001(\r\022\'\n\006marker\030\007 \001"
  "(\0132\027.org.xrpl.rpc.v1.MarkerB\010\n\006ledger\"\226\002"
  "\n$GetAccountTransactionHistoryResponse\0220"
  "\n\007account\030\001 \001(\0132\037.org.xrpl.rpc.v1.Accoun"
  "tAddress\022\030\n\020ledger_index_min\030\002 \001(\r\022\030\n\020le"
  "dger_index_max\030\003 \001(\r\022\r\n\005limit\030\004 \001(\r\022\'\n\006m"
  "arker\030\005 \001(\0132\027.org.xrpl.rpc.v1.Marker\022=\n\014"
  "transactions\030\006 \003(\0132\'.org.xrpl.rpc.v1.Get"
  "TransactionResponse\022\021\n\tvalidated\030\007 \001(\010\"8"
  "\n\006Marker\022\024\n\014ledger_index\030\001 \001(\r\022\030\n\020accoun"
  "t_sequence\030\002 \001(\rB\023\n\017org.xrpl.rpc.v1P\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_deps[3] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2faccount_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ftransaction_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_sccs[3] = {
  &scc_info_GetAccountTransactionHistoryRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base,
  &scc_info_GetAccountTransactionHistoryResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base,
  &scc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto, "org/xrpl/rpc/v1/get_account_transaction_history.proto", 845,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto, 3, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void GetAccountTransactionHistoryRequest::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetAccountTransactionHistoryRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::AccountAddress*>(
      ::org::xrpl::rpc::v1::AccountAddress::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetAccountTransactionHistoryRequest_default_instance_.ledger_specifier_ = const_cast< ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      ::org::xrpl::rpc::v1::LedgerSpecifier::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetAccountTransactionHistoryRequest_default_instance_.ledger_range_ = const_cast< ::org::xrpl::rpc::v1::LedgerRange*>(
      ::org::xrpl::rpc::v1::LedgerRange::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetAccountTransactionHistoryRequest_default_instance_._instance.get_mutable()->marker_ = const_cast< ::org::xrpl::rpc::v1::Marker*>(
      ::org::xrpl::rpc::v1::Marker::internal_default_instance());
}
class GetAccountTransactionHistoryRequest::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::AccountAddress& account(const GetAccountTransactionHistoryRequest* msg);
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger_specifier(const GetAccountTransactionHistoryRequest* msg);
  static const ::org::xrpl::rpc::v1::LedgerRange& ledger_range(const GetAccountTransactionHistoryRequest* msg);
  static const ::org::xrpl::rpc::v1::Marker& marker(const GetAccountTransactionHistoryRequest* msg);
};

const ::org::xrpl::rpc::v1::AccountAddress&
GetAccountTransactionHistoryRequest::HasBitSetters::account(const GetAccountTransactionHistoryRequest* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetAccountTransactionHistoryRequest::HasBitSetters::ledger_specifier(const GetAccountTransactionHistoryRequest* msg) {
  return *msg->ledger_.ledger_specifier_;
}
const ::org::xrpl::rpc::v1::LedgerRange&
GetAccountTransactionHistoryRequest::HasBitSetters::ledger_range(const GetAccountTransactionHistoryRequest* msg) {
  return *msg->ledger_.ledger_range_;
}
const ::org::xrpl::rpc::v1::Marker&
GetAccountTransactionHistoryRequest::HasBitSetters::marker(const GetAccountTransactionHistoryRequest* msg) {
  return *msg->marker_;
}
void GetAccountTransactionHistoryRequest::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void GetAccountTransactionHistoryRequest::set_allocated_ledger_specifier(::org::xrpl::rpc::v1::LedgerSpecifier* ledger_specifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ledger();
  if (ledger_specifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger_specifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger_specifier, submessage_arena);
    }
    set_has_ledger_specifier();
    ledger_.ledger_specifier_ = ledger_specifier;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_specifier)
}
void GetAccountTransactionHistoryRequest::clear_ledger_specifier() {
  if (has_ledger_specifier()) {
    delete ledger_.ledger_specifier_;
    clear_has_ledger();
  }
}
void GetAccountTransactionHistoryRequest::set_allocated_ledger_range(::org::xrpl::rpc::v1::LedgerRange* ledger_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ledger();
  if (ledger_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger_range, submessage_arena);
    }
    set_has_ledger_range();
    ledger_.ledger_range_ = ledger_range;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_range)
}
void GetAccountTransactionHistoryRequest::clear_ledger_range() {
  if (has_ledger_range()) {
    delete ledger_.ledger_range_;
    clear_has_ledger();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountTransactionHistoryRequest::kAccountFieldNumber;
const int GetAccountTransactionHistoryRequest::kLedgerSpecifierFieldNumber;
const int GetAccountTransactionHistoryRequest::kLedgerRangeFieldNumber;
const int GetAccountTransactionHistoryRequest::kBinaryFieldNumber;
const int GetAccountTransactionHistoryRequest::kForwardFieldNumber;
const int GetAccountTransactionHistoryRequest::kLimitFieldNumber;
const int GetAccountTransactionHistoryRequest::kMarkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountTransactionHistoryRequest::GetAccountTransactionHistoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
}
GetAccountTransactionHistoryRequest::GetAccountTransactionHistoryRequest(const GetAccountTransactionHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::AccountAddress(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_marker()) {
    marker_ = new ::org::xrpl::rpc::v1::Marker(*from.marker_);
  } else {
    marker_ = nullptr;
  }
  ::memcpy(&binary_, &from.binary_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&binary_)) + sizeof(limit_));
  clear_has_ledger();
  switch (from.ledger_case()) {
    case kLedgerSpecifier: {
      mutable_ledger_specifier()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(from.ledger_specifier());
      break;
    }
    case kLedgerRange: {
      mutable_ledger_range()->::org::xrpl::rpc::v1::LedgerRange::MergeFrom(from.ledger_range());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
}

void GetAccountTransactionHistoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountTransactionHistoryRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&account_)) + sizeof(limit_));
  clear_has_ledger();
}

GetAccountTransactionHistoryRequest::~GetAccountTransactionHistoryRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  SharedDtor();
}

void GetAccountTransactionHistoryRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete marker_;
  if (has_ledger()) {
    clear_ledger();
  }
}

void GetAccountTransactionHistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountTransactionHistoryRequest& GetAccountTransactionHistoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountTransactionHistoryRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base);
  return *internal_default_instance();
}


void GetAccountTransactionHistoryRequest::clear_ledger() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  switch (ledger_case()) {
    case kLedgerSpecifier: {
      delete ledger_.ledger_specifier_;
      break;
    }
    case kLedgerRange: {
      delete ledger_.ledger_range_;
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEDGER_NOT_SET;
}


void GetAccountTransactionHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && marker_ != nullptr) {
    delete marker_;
  }
  marker_ = nullptr;
  ::memset(&binary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&binary_)) + sizeof(limit_));
  clear_ledger();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAccountTransactionHistoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger_specifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ledger_specifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ledger_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool binary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool forward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          forward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Marker marker = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAccountTransactionHistoryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerSpecifier ledger_specifier = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger_specifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool binary = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Marker marker = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAccountTransactionHistoryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger_specifier = 2;
  if (has_ledger_specifier()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ledger_specifier(this), output);
  }

  // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
  if (has_ledger_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ledger_range(this), output);
  }

  // bool binary = 4;
  if (this->binary() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->binary(), output);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->forward(), output);
  }

  // uint32 limit = 6;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->limit(), output);
  }

  // .org.xrpl.rpc.v1.Marker marker = 7;
  if (this->has_marker()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::marker(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountTransactionHistoryRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger_specifier = 2;
  if (has_ledger_specifier()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ledger_specifier(this), target);
  }

  // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
  if (has_ledger_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ledger_range(this), target);
  }

  // bool binary = 4;
  if (this->binary() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->binary(), target);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->forward(), target);
  }

  // uint32 limit = 6;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->limit(), target);
  }

  // .org.xrpl.rpc.v1.Marker marker = 7;
  if (this->has_marker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::marker(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  return target;
}

size_t GetAccountTransactionHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Marker marker = 7;
  if (this->has_marker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marker_);
  }

  // bool binary = 4;
  if (this->binary() != 0) {
    total_size += 1 + 1;
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  // uint32 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  switch (ledger_case()) {
    // .org.xrpl.rpc.v1.LedgerSpecifier ledger_specifier = 2;
    case kLedgerSpecifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ledger_.ledger_specifier_);
      break;
    }
    // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
    case kLedgerRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ledger_.ledger_range_);
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountTransactionHistoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountTransactionHistoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountTransactionHistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
    MergeFrom(*source);
  }
}

void GetAccountTransactionHistoryRequest::MergeFrom(const GetAccountTransactionHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::AccountAddress::MergeFrom(from.account());
  }
  if (from.has_marker()) {
    mutable_marker()->::org::xrpl::rpc::v1::Marker::MergeFrom(from.marker());
  }
  if (from.binary() != 0) {
    set_binary(from.binary());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  switch (from.ledger_case()) {
    case kLedgerSpecifier: {
      mutable_ledger_specifier()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(from.ledger_specifier());
      break;
    }
    case kLedgerRange: {
      mutable_ledger_range()->::org::xrpl::rpc::v1::LedgerRange::MergeFrom(from.ledger_range());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
}

void GetAccountTransactionHistoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountTransactionHistoryRequest::CopyFrom(const GetAccountTransactionHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountTransactionHistoryRequest::IsInitialized() const {
  return true;
}

void GetAccountTransactionHistoryRequest::Swap(GetAccountTransactionHistoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountTransactionHistoryRequest::InternalSwap(GetAccountTransactionHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(marker_, other->marker_);
  swap(binary_, other->binary_);
  swap(forward_, other->forward_);
  swap(limit_, other->limit_);
  swap(ledger_, other->ledger_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountTransactionHistoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountTransactionHistoryResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetAccountTransactionHistoryResponse_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::AccountAddress*>(
      ::org::xrpl::rpc::v1::AccountAddress::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetAccountTransactionHistoryResponse_default_instance_._instance.get_mutable()->marker_ = const_cast< ::org::xrpl::rpc::v1::Marker*>(
      ::org::xrpl::rpc::v1::Marker::internal_default_instance());
}
class GetAccountTransactionHistoryResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::AccountAddress& account(const GetAccountTransactionHistoryResponse* msg);
  static const ::org::xrpl::rpc::v1::Marker& marker(const GetAccountTransactionHistoryResponse* msg);
};

const ::org::xrpl::rpc::v1::AccountAddress&
GetAccountTransactionHistoryResponse::HasBitSetters::account(const GetAccountTransactionHistoryResponse* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Marker&
GetAccountTransactionHistoryResponse::HasBitSetters::marker(const GetAccountTransactionHistoryResponse* msg) {
  return *msg->marker_;
}
void GetAccountTransactionHistoryResponse::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void GetAccountTransactionHistoryResponse::clear_transactions() {
  transactions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountTransactionHistoryResponse::kAccountFieldNumber;
const int GetAccountTransactionHistoryResponse::kLedgerIndexMinFieldNumber;
const int GetAccountTransactionHistoryResponse::kLedgerIndexMaxFieldNumber;
const int GetAccountTransactionHistoryResponse::kLimitFieldNumber;
const int GetAccountTransactionHistoryResponse::kMarkerFieldNumber;
const int GetAccountTransactionHistoryResponse::kTransactionsFieldNumber;
const int GetAccountTransactionHistoryResponse::kValidatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountTransactionHistoryResponse::GetAccountTransactionHistoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
}
GetAccountTransactionHistoryResponse::GetAccountTransactionHistoryResponse(const GetAccountTransactionHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::AccountAddress(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_marker()) {
    marker_ = new ::org::xrpl::rpc::v1::Marker(*from.marker_);
  } else {
    marker_ = nullptr;
  }
  ::memcpy(&ledger_index_min_, &from.ledger_index_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&validated_) -
    reinterpret_cast<char*>(&ledger_index_min_)) + sizeof(validated_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
}

void GetAccountTransactionHistoryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountTransactionHistoryResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validated_) -
      reinterpret_cast<char*>(&account_)) + sizeof(validated_));
}

GetAccountTransactionHistoryResponse::~GetAccountTransactionHistoryResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  SharedDtor();
}

void GetAccountTransactionHistoryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete marker_;
}

void GetAccountTransactionHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountTransactionHistoryResponse& GetAccountTransactionHistoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountTransactionHistoryResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base);
  return *internal_default_instance();
}


void GetAccountTransactionHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && marker_ != nullptr) {
    delete marker_;
  }
  marker_ = nullptr;
  ::memset(&ledger_index_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validated_) -
      reinterpret_cast<char*>(&ledger_index_min_)) + sizeof(validated_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAccountTransactionHistoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ledger_index_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ledger_index_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ledger_index_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ledger_index_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Marker marker = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.GetTransactionResponse transactions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // bool validated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAccountTransactionHistoryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ledger_index_min = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ledger_index_max = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Marker marker = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.GetTransactionResponse transactions = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool validated = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAccountTransactionHistoryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // uint32 ledger_index_min = 2;
  if (this->ledger_index_min() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ledger_index_min(), output);
  }

  // uint32 ledger_index_max = 3;
  if (this->ledger_index_max() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ledger_index_max(), output);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  // .org.xrpl.rpc.v1.Marker marker = 5;
  if (this->has_marker()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::marker(this), output);
  }

  // repeated .org.xrpl.rpc.v1.GetTransactionResponse transactions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->transactions(static_cast<int>(i)),
      output);
  }

  // bool validated = 7;
  if (this->validated() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->validated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountTransactionHistoryResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // uint32 ledger_index_min = 2;
  if (this->ledger_index_min() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->ledger_index_min(), target);
  }

  // uint32 ledger_index_max = 3;
  if (this->ledger_index_max() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->ledger_index_max(), target);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  // .org.xrpl.rpc.v1.Marker marker = 5;
  if (this->has_marker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::marker(this), target);
  }

  // repeated .org.xrpl.rpc.v1.GetTransactionResponse transactions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->transactions(static_cast<int>(i)), target);
  }

  // bool validated = 7;
  if (this->validated() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->validated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  return target;
}

size_t GetAccountTransactionHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.GetTransactionResponse transactions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Marker marker = 5;
  if (this->has_marker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marker_);
  }

  // uint32 ledger_index_min = 2;
  if (this->ledger_index_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index_min());
  }

  // uint32 ledger_index_max = 3;
  if (this->ledger_index_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index_max());
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  // bool validated = 7;
  if (this->validated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountTransactionHistoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountTransactionHistoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountTransactionHistoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
    MergeFrom(*source);
  }
}

void GetAccountTransactionHistoryResponse::MergeFrom(const GetAccountTransactionHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::AccountAddress::MergeFrom(from.account());
  }
  if (from.has_marker()) {
    mutable_marker()->::org::xrpl::rpc::v1::Marker::MergeFrom(from.marker());
  }
  if (from.ledger_index_min() != 0) {
    set_ledger_index_min(from.ledger_index_min());
  }
  if (from.ledger_index_max() != 0) {
    set_ledger_index_max(from.ledger_index_max());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.validated() != 0) {
    set_validated(from.validated());
  }
}

void GetAccountTransactionHistoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountTransactionHistoryResponse::CopyFrom(const GetAccountTransactionHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountTransactionHistoryResponse::IsInitialized() const {
  return true;
}

void GetAccountTransactionHistoryResponse::Swap(GetAccountTransactionHistoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountTransactionHistoryResponse::InternalSwap(GetAccountTransactionHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
  swap(account_, other->account_);
  swap(marker_, other->marker_);
  swap(ledger_index_min_, other->ledger_index_min_);
  swap(ledger_index_max_, other->ledger_index_max_);
  swap(limit_, other->limit_);
  swap(validated_, other->validated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountTransactionHistoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Marker::InitAsDefaultInstance() {
}
class Marker::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Marker::kLedgerIndexFieldNumber;
const int Marker::kAccountSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Marker::Marker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Marker)
}
Marker::Marker(const Marker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ledger_index_, &from.ledger_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_sequence_) -
    reinterpret_cast<char*>(&ledger_index_)) + sizeof(account_sequence_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Marker)
}

void Marker::SharedCtor() {
  ::memset(&ledger_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_sequence_) -
      reinterpret_cast<char*>(&ledger_index_)) + sizeof(account_sequence_));
}

Marker::~Marker() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Marker)
  SharedDtor();
}

void Marker::SharedDtor() {
}

void Marker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Marker& Marker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Marker_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.base);
  return *internal_default_instance();
}


void Marker::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Marker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ledger_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_sequence_) -
      reinterpret_cast<char*>(&ledger_index_)) + sizeof(account_sequence_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Marker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ledger_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ledger_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 account_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Marker::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Marker)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ledger_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 account_sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Marker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Marker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Marker::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Marker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ledger_index(), output);
  }

  // uint32 account_sequence = 2;
  if (this->account_sequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->account_sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Marker)
}

::PROTOBUF_NAMESPACE_ID::uint8* Marker::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Marker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->ledger_index(), target);
  }

  // uint32 account_sequence = 2;
  if (this->account_sequence() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Marker)
  return target;
}

size_t Marker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Marker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index());
  }

  // uint32 account_sequence = 2;
  if (this->account_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->account_sequence());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Marker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  const Marker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Marker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Marker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Marker)
    MergeFrom(*source);
  }
}

void Marker::MergeFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ledger_index() != 0) {
    set_ledger_index(from.ledger_index());
  }
  if (from.account_sequence() != 0) {
    set_account_sequence(from.account_sequence());
  }
}

void Marker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marker::CopyFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker::IsInitialized() const {
  return true;
}

void Marker::Swap(Marker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Marker::InternalSwap(Marker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ledger_index_, other->ledger_index_);
  swap(account_sequence_, other->account_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Marker* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Marker >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Marker >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
