// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger_data.proto

#include "org/xrpl/rpc/v1/get_ledger_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetLedgerDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLedgerDataRequest> _instance;
} _GetLedgerDataRequest_default_instance_;
class GetLedgerDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLedgerDataResponse> _instance;
} _GetLedgerDataResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_GetLedgerDataRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetLedgerDataRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetLedgerDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetLedgerDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLedgerDataRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetLedgerDataRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto}, {
      &scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static void InitDefaultsscc_info_GetLedgerDataResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetLedgerDataResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetLedgerDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetLedgerDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLedgerDataResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetLedgerDataResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto}, {
      &scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataRequest, marker_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataRequest, ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataRequest, end_marker_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataRequest, client_ip_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataResponse, ledger_index_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataResponse, ledger_hash_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataResponse, ledger_objects_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataResponse, marker_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDataResponse, is_unlimited_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerDataRequest)},
  { 10, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetLedgerDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetLedgerDataResponse_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto[] =
  "\n%org/xrpl/rpc/v1/get_ledger_data.proto\022"
  "\017org.xrpl.rpc.v1\032\034org/xrpl/rpc/v1/ledger"
  ".proto\"\215\001\n\024GetLedgerDataRequest\022\016\n\006marke"
  "r\030\001 \001(\014\0220\n\006ledger\030\002 \001(\0132 .org.xrpl.rpc.v"
  "1.LedgerSpecifier\022\022\n\nend_marker\030\003 \001(\014\022\021\n"
  "\tclient_ip\030\004 \001(\t\022\014\n\004user\030\006 \001(\t\"\243\001\n\025GetLe"
  "dgerDataResponse\022\024\n\014ledger_index\030\001 \001(\r\022\023"
  "\n\013ledger_hash\030\002 \001(\014\0229\n\016ledger_objects\030\003 "
  "\001(\0132!.org.xrpl.rpc.v1.RawLedgerObjects\022\016"
  "\n\006marker\030\004 \001(\014\022\024\n\014is_unlimited\030\007 \001(\010B\023\n\017"
  "org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_sccs[2] = {
  &scc_info_GetLedgerDataRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.base,
  &scc_info_GetLedgerDataResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto, "org/xrpl/rpc/v1/get_ledger_data.proto", 425,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto, 2, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void GetLedgerDataRequest::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetLedgerDataRequest_default_instance_._instance.get_mutable()->ledger_ = const_cast< ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      ::org::xrpl::rpc::v1::LedgerSpecifier::internal_default_instance());
}
class GetLedgerDataRequest::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetLedgerDataRequest* msg);
};

const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerDataRequest::HasBitSetters::ledger(const GetLedgerDataRequest* msg) {
  return *msg->ledger_;
}
void GetLedgerDataRequest::clear_ledger() {
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgerDataRequest::kMarkerFieldNumber;
const int GetLedgerDataRequest::kLedgerFieldNumber;
const int GetLedgerDataRequest::kEndMarkerFieldNumber;
const int GetLedgerDataRequest::kClientIpFieldNumber;
const int GetLedgerDataRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgerDataRequest::GetLedgerDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetLedgerDataRequest)
}
GetLedgerDataRequest::GetLedgerDataRequest(const GetLedgerDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.marker().size() > 0) {
    marker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_);
  }
  end_marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.end_marker().size() > 0) {
    end_marker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_marker_);
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_ledger()) {
    ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from.ledger_);
  } else {
    ledger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerDataRequest)
}

void GetLedgerDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLedgerDataRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.base);
  marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ledger_ = nullptr;
}

GetLedgerDataRequest::~GetLedgerDataRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerDataRequest)
  SharedDtor();
}

void GetLedgerDataRequest::SharedDtor() {
  marker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_marker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ledger_;
}

void GetLedgerDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLedgerDataRequest& GetLedgerDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLedgerDataRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.base);
  return *internal_default_instance();
}


void GetLedgerDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_marker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLedgerDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes marker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_marker(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ledger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes end_marker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_end_marker(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_ip(), ptr, ctx, "org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user(), ptr, ctx, "org.xrpl.rpc.v1.GetLedgerDataRequest.user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLedgerDataRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes marker = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_marker = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), static_cast<int>(this->client_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetLedgerDataRequest.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetLedgerDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetLedgerDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLedgerDataRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes marker = 1;
  if (this->marker().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->marker(), output);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ledger(this), output);
  }

  // bytes end_marker = 3;
  if (this->end_marker().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_marker(), output);
  }

  // string client_ip = 4;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_ip(), output);
  }

  // string user = 6;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerDataRequest.user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetLedgerDataRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLedgerDataRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes marker = 1;
  if (this->marker().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->marker(), target);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ledger(this), target);
  }

  // bytes end_marker = 3;
  if (this->end_marker().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_marker(), target);
  }

  // string client_ip = 4;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ip(), target);
  }

  // string user = 6;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerDataRequest.user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerDataRequest)
  return target;
}

size_t GetLedgerDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes marker = 1;
  if (this->marker().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->marker());
  }

  // bytes end_marker = 3;
  if (this->end_marker().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->end_marker());
  }

  // string client_ip = 4;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // string user = 6;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user());
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLedgerDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLedgerDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLedgerDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetLedgerDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetLedgerDataRequest)
    MergeFrom(*source);
  }
}

void GetLedgerDataRequest::MergeFrom(const GetLedgerDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marker().size() > 0) {

    marker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_);
  }
  if (from.end_marker().size() > 0) {

    end_marker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_marker_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_ledger()) {
    mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(from.ledger());
  }
}

void GetLedgerDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgerDataRequest::CopyFrom(const GetLedgerDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerDataRequest::IsInitialized() const {
  return true;
}

void GetLedgerDataRequest::Swap(GetLedgerDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgerDataRequest::InternalSwap(GetLedgerDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marker_.Swap(&other->marker_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_marker_.Swap(&other->end_marker_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ledger_, other->ledger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLedgerDataResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetLedgerDataResponse_default_instance_._instance.get_mutable()->ledger_objects_ = const_cast< ::org::xrpl::rpc::v1::RawLedgerObjects*>(
      ::org::xrpl::rpc::v1::RawLedgerObjects::internal_default_instance());
}
class GetLedgerDataResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::RawLedgerObjects& ledger_objects(const GetLedgerDataResponse* msg);
};

const ::org::xrpl::rpc::v1::RawLedgerObjects&
GetLedgerDataResponse::HasBitSetters::ledger_objects(const GetLedgerDataResponse* msg) {
  return *msg->ledger_objects_;
}
void GetLedgerDataResponse::clear_ledger_objects() {
  if (GetArenaNoVirtual() == nullptr && ledger_objects_ != nullptr) {
    delete ledger_objects_;
  }
  ledger_objects_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgerDataResponse::kLedgerIndexFieldNumber;
const int GetLedgerDataResponse::kLedgerHashFieldNumber;
const int GetLedgerDataResponse::kLedgerObjectsFieldNumber;
const int GetLedgerDataResponse::kMarkerFieldNumber;
const int GetLedgerDataResponse::kIsUnlimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgerDataResponse::GetLedgerDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetLedgerDataResponse)
}
GetLedgerDataResponse::GetLedgerDataResponse(const GetLedgerDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ledger_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ledger_hash().size() > 0) {
    ledger_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ledger_hash_);
  }
  marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.marker().size() > 0) {
    marker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_);
  }
  if (from.has_ledger_objects()) {
    ledger_objects_ = new ::org::xrpl::rpc::v1::RawLedgerObjects(*from.ledger_objects_);
  } else {
    ledger_objects_ = nullptr;
  }
  ::memcpy(&ledger_index_, &from.ledger_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_unlimited_) -
    reinterpret_cast<char*>(&ledger_index_)) + sizeof(is_unlimited_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerDataResponse)
}

void GetLedgerDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLedgerDataResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.base);
  ledger_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ledger_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unlimited_) -
      reinterpret_cast<char*>(&ledger_objects_)) + sizeof(is_unlimited_));
}

GetLedgerDataResponse::~GetLedgerDataResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerDataResponse)
  SharedDtor();
}

void GetLedgerDataResponse::SharedDtor() {
  ledger_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ledger_objects_;
}

void GetLedgerDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLedgerDataResponse& GetLedgerDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLedgerDataResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.base);
  return *internal_default_instance();
}


void GetLedgerDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ledger_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ledger_objects_ != nullptr) {
    delete ledger_objects_;
  }
  ledger_objects_ = nullptr;
  ::memset(&ledger_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unlimited_) -
      reinterpret_cast<char*>(&ledger_index_)) + sizeof(is_unlimited_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLedgerDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ledger_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ledger_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ledger_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ledger_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ledger_objects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes marker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_marker(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_unlimited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_unlimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLedgerDataResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ledger_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ledger_hash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ledger_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes marker = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_unlimited = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unlimited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetLedgerDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetLedgerDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLedgerDataResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ledger_index(), output);
  }

  // bytes ledger_hash = 2;
  if (this->ledger_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ledger_hash(), output);
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 3;
  if (this->has_ledger_objects()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ledger_objects(this), output);
  }

  // bytes marker = 4;
  if (this->marker().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->marker(), output);
  }

  // bool is_unlimited = 7;
  if (this->is_unlimited() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_unlimited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetLedgerDataResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLedgerDataResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->ledger_index(), target);
  }

  // bytes ledger_hash = 2;
  if (this->ledger_hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->ledger_hash(), target);
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 3;
  if (this->has_ledger_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ledger_objects(this), target);
  }

  // bytes marker = 4;
  if (this->marker().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->marker(), target);
  }

  // bool is_unlimited = 7;
  if (this->is_unlimited() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_unlimited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerDataResponse)
  return target;
}

size_t GetLedgerDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ledger_hash = 2;
  if (this->ledger_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ledger_hash());
  }

  // bytes marker = 4;
  if (this->marker().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->marker());
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 3;
  if (this->has_ledger_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_objects_);
  }

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index());
  }

  // bool is_unlimited = 7;
  if (this->is_unlimited() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLedgerDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLedgerDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLedgerDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetLedgerDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetLedgerDataResponse)
    MergeFrom(*source);
  }
}

void GetLedgerDataResponse::MergeFrom(const GetLedgerDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ledger_hash().size() > 0) {

    ledger_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ledger_hash_);
  }
  if (from.marker().size() > 0) {

    marker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.marker_);
  }
  if (from.has_ledger_objects()) {
    mutable_ledger_objects()->::org::xrpl::rpc::v1::RawLedgerObjects::MergeFrom(from.ledger_objects());
  }
  if (from.ledger_index() != 0) {
    set_ledger_index(from.ledger_index());
  }
  if (from.is_unlimited() != 0) {
    set_is_unlimited(from.is_unlimited());
  }
}

void GetLedgerDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgerDataResponse::CopyFrom(const GetLedgerDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerDataResponse::IsInitialized() const {
  return true;
}

void GetLedgerDataResponse::Swap(GetLedgerDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgerDataResponse::InternalSwap(GetLedgerDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ledger_hash_.Swap(&other->ledger_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marker_.Swap(&other->marker_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ledger_objects_, other->ledger_objects_);
  swap(ledger_index_, other->ledger_index_);
  swap(is_unlimited_, other->is_unlimited_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerDataRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetLedgerDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerDataResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetLedgerDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
