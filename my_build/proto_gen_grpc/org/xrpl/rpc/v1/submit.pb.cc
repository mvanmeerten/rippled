// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/submit.proto

#include "org/xrpl/rpc/v1/submit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class SubmitTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionRequest> _instance;
} _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionResponse> _instance;
} _SubmitTransactionResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_SubmitTransactionRequest_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_SubmitTransactionRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::SubmitTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::SubmitTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitTransactionRequest_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubmitTransactionRequest_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto}, {}};

static void InitDefaultsscc_info_SubmitTransactionResponse_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_SubmitTransactionResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::SubmitTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::SubmitTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitTransactionResponse_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SubmitTransactionResponse_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto}, {
      &scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionRequest, signed_transaction_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionRequest, fail_hard_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionRequest, client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionResponse, engine_result_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionResponse, engine_result_code_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionResponse, engine_result_message_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitTransactionResponse, hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::SubmitTransactionRequest)},
  { 8, -1, sizeof(::org::xrpl::rpc::v1::SubmitTransactionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_SubmitTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_SubmitTransactionResponse_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto[] =
  "\n\034org/xrpl/rpc/v1/submit.proto\022\017org.xrpl"
  ".rpc.v1\032\032org/xrpl/rpc/v1/meta.proto\"\\\n\030S"
  "ubmitTransactionRequest\022\032\n\022signed_transa"
  "ction\030\001 \001(\014\022\021\n\tfail_hard\030\002 \001(\010\022\021\n\tclient"
  "_ip\030\003 \001(\t\"\237\001\n\031SubmitTransactionResponse\022"
  "9\n\rengine_result\030\001 \001(\0132\".org.xrpl.rpc.v1"
  ".TransactionResult\022\032\n\022engine_result_code"
  "\030\002 \001(\003\022\035\n\025engine_result_message\030\003 \001(\t\022\014\n"
  "\004hash\030\004 \001(\014B\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_sccs[2] = {
  &scc_info_SubmitTransactionRequest_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.base,
  &scc_info_SubmitTransactionResponse_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto, "org/xrpl/rpc/v1/submit.proto", 360,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto, 2, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void SubmitTransactionRequest::InitAsDefaultInstance() {
}
class SubmitTransactionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitTransactionRequest::kSignedTransactionFieldNumber;
const int SubmitTransactionRequest::kFailHardFieldNumber;
const int SubmitTransactionRequest::kClientIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitTransactionRequest::SubmitTransactionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.SubmitTransactionRequest)
}
SubmitTransactionRequest::SubmitTransactionRequest(const SubmitTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signed_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.signed_transaction().size() > 0) {
    signed_transaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signed_transaction_);
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  fail_hard_ = from.fail_hard_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.SubmitTransactionRequest)
}

void SubmitTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitTransactionRequest_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.base);
  signed_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fail_hard_ = false;
}

SubmitTransactionRequest::~SubmitTransactionRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.SubmitTransactionRequest)
  SharedDtor();
}

void SubmitTransactionRequest::SharedDtor() {
  signed_transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmitTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionRequest& SubmitTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionRequest_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signed_transaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fail_hard_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signed_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_signed_transaction(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fail_hard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fail_hard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_ip(), ptr, ctx, "org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitTransactionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signed_transaction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signed_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fail_hard = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_hard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), static_cast<int>(this->client_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.SubmitTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.SubmitTransactionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitTransactionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signed_transaction = 1;
  if (this->signed_transaction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signed_transaction(), output);
  }

  // bool fail_hard = 2;
  if (this->fail_hard() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->fail_hard(), output);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.SubmitTransactionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signed_transaction = 1;
  if (this->signed_transaction().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->signed_transaction(), target);
  }

  // bool fail_hard = 2;
  if (this->fail_hard() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->fail_hard(), target);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->client_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.SubmitTransactionRequest)
  return target;
}

size_t SubmitTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signed_transaction = 1;
  if (this->signed_transaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->signed_transaction());
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // bool fail_hard = 2;
  if (this->fail_hard() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.SubmitTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.SubmitTransactionRequest)
    MergeFrom(*source);
  }
}

void SubmitTransactionRequest::MergeFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signed_transaction().size() > 0) {

    signed_transaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signed_transaction_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.fail_hard() != 0) {
    set_fail_hard(from.fail_hard());
  }
}

void SubmitTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionRequest::CopyFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionRequest::IsInitialized() const {
  return true;
}

void SubmitTransactionRequest::Swap(SubmitTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitTransactionRequest::InternalSwap(SubmitTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signed_transaction_.Swap(&other->signed_transaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fail_hard_, other->fail_hard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitTransactionResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_SubmitTransactionResponse_default_instance_._instance.get_mutable()->engine_result_ = const_cast< ::org::xrpl::rpc::v1::TransactionResult*>(
      ::org::xrpl::rpc::v1::TransactionResult::internal_default_instance());
}
class SubmitTransactionResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::TransactionResult& engine_result(const SubmitTransactionResponse* msg);
};

const ::org::xrpl::rpc::v1::TransactionResult&
SubmitTransactionResponse::HasBitSetters::engine_result(const SubmitTransactionResponse* msg) {
  return *msg->engine_result_;
}
void SubmitTransactionResponse::clear_engine_result() {
  if (GetArenaNoVirtual() == nullptr && engine_result_ != nullptr) {
    delete engine_result_;
  }
  engine_result_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitTransactionResponse::kEngineResultFieldNumber;
const int SubmitTransactionResponse::kEngineResultCodeFieldNumber;
const int SubmitTransactionResponse::kEngineResultMessageFieldNumber;
const int SubmitTransactionResponse::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitTransactionResponse::SubmitTransactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.SubmitTransactionResponse)
}
SubmitTransactionResponse::SubmitTransactionResponse(const SubmitTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_result_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.engine_result_message().size() > 0) {
    engine_result_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.engine_result_message_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_engine_result()) {
    engine_result_ = new ::org::xrpl::rpc::v1::TransactionResult(*from.engine_result_);
  } else {
    engine_result_ = nullptr;
  }
  engine_result_code_ = from.engine_result_code_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.SubmitTransactionResponse)
}

void SubmitTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitTransactionResponse_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.base);
  engine_result_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&engine_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_result_code_) -
      reinterpret_cast<char*>(&engine_result_)) + sizeof(engine_result_code_));
}

SubmitTransactionResponse::~SubmitTransactionResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.SubmitTransactionResponse)
  SharedDtor();
}

void SubmitTransactionResponse::SharedDtor() {
  engine_result_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete engine_result_;
}

void SubmitTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionResponse& SubmitTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionResponse_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_result_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && engine_result_ != nullptr) {
    delete engine_result_;
  }
  engine_result_ = nullptr;
  engine_result_code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.TransactionResult engine_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_engine_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 engine_result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          engine_result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string engine_result_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_engine_result_message(), ptr, ctx, "org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitTransactionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.TransactionResult engine_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_engine_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 engine_result_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &engine_result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string engine_result_message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_engine_result_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->engine_result_message().data(), static_cast<int>(this->engine_result_message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.SubmitTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.SubmitTransactionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitTransactionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.TransactionResult engine_result = 1;
  if (this->has_engine_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::engine_result(this), output);
  }

  // int64 engine_result_code = 2;
  if (this->engine_result_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->engine_result_code(), output);
  }

  // string engine_result_message = 3;
  if (this->engine_result_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->engine_result_message().data(), static_cast<int>(this->engine_result_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->engine_result_message(), output);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.SubmitTransactionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.TransactionResult engine_result = 1;
  if (this->has_engine_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::engine_result(this), target);
  }

  // int64 engine_result_code = 2;
  if (this->engine_result_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->engine_result_code(), target);
  }

  // string engine_result_message = 3;
  if (this->engine_result_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->engine_result_message().data(), static_cast<int>(this->engine_result_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->engine_result_message(), target);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.SubmitTransactionResponse)
  return target;
}

size_t SubmitTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string engine_result_message = 3;
  if (this->engine_result_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->engine_result_message());
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .org.xrpl.rpc.v1.TransactionResult engine_result = 1;
  if (this->has_engine_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *engine_result_);
  }

  // int64 engine_result_code = 2;
  if (this->engine_result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->engine_result_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.SubmitTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.SubmitTransactionResponse)
    MergeFrom(*source);
  }
}

void SubmitTransactionResponse::MergeFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.engine_result_message().size() > 0) {

    engine_result_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.engine_result_message_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_engine_result()) {
    mutable_engine_result()->::org::xrpl::rpc::v1::TransactionResult::MergeFrom(from.engine_result());
  }
  if (from.engine_result_code() != 0) {
    set_engine_result_code(from.engine_result_code());
  }
}

void SubmitTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionResponse::CopyFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionResponse::IsInitialized() const {
  return true;
}

void SubmitTransactionResponse::Swap(SubmitTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitTransactionResponse::InternalSwap(SubmitTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  engine_result_message_.Swap(&other->engine_result_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(engine_result_, other->engine_result_);
  swap(engine_result_code_, other->engine_result_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::SubmitTransactionRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::SubmitTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::SubmitTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::SubmitTransactionResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::SubmitTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::SubmitTransactionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
