// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_account_info.proto

#include "org/xrpl/rpc/v1/get_account_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2faccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ticket_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetAccountInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountInfoRequest> _instance;
} _GetAccountInfoRequest_default_instance_;
class GetAccountInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountInfoResponse> _instance;
} _GetAccountInfoResponse_default_instance_;
class QueueDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueData> _instance;
} _QueueData_default_instance_;
class QueuedTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueuedTransaction> _instance;
} _QueuedTransaction_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_GetAccountInfoRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetAccountInfoRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetAccountInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetAccountInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetAccountInfoRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetAccountInfoRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto}, {
      &scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto.base,
      &scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static void InitDefaultsscc_info_GetAccountInfoResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetAccountInfoResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetAccountInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetAccountInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetAccountInfoResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetAccountInfoResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto}, {
      &scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_QueueData_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::QueueData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::QueueData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto}, {
      &scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
      &scc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_QueuedTransaction_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::QueuedTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::QueuedTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto}, {
      &scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
      &scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_LastLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Ticket_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoRequest, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoRequest, strict_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoRequest, ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoRequest, queue_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoRequest, signer_lists_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoRequest, client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoResponse, account_data_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoResponse, signer_list_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoResponse, ledger_index_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoResponse, queue_data_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetAccountInfoResponse, validated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, txn_count_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, auth_change_queued_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, lowest_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, highest_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, max_spend_drops_total_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, transactions_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, lowest_ticket_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, highest_ticket_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, sequence_count_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueueData, ticket_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, auth_change_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, fee_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, fee_level_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, max_spend_drops_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, last_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::QueuedTransaction, ticket_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::GetAccountInfoRequest)},
  { 11, -1, sizeof(::org::xrpl::rpc::v1::GetAccountInfoResponse)},
  { 21, -1, sizeof(::org::xrpl::rpc::v1::QueueData)},
  { 36, -1, sizeof(::org::xrpl::rpc::v1::QueuedTransaction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetAccountInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetAccountInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_QueueData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_QueuedTransaction_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto[] =
  "\n&org/xrpl/rpc/v1/get_account_info.proto"
  "\022\017org.xrpl.rpc.v1\032$org/xrpl/rpc/v1/ledge"
  "r_objects.proto\032\034org/xrpl/rpc/v1/amount."
  "proto\032\035org/xrpl/rpc/v1/account.proto\032\034or"
  "g/xrpl/rpc/v1/ledger.proto\032\034org/xrpl/rpc"
  "/v1/common.proto\"\303\001\n\025GetAccountInfoReque"
  "st\0220\n\007account\030\001 \001(\0132\037.org.xrpl.rpc.v1.Ac"
  "countAddress\022\016\n\006strict\030\002 \001(\010\0220\n\006ledger\030\003"
  " \001(\0132 .org.xrpl.rpc.v1.LedgerSpecifier\022\r"
  "\n\005queue\030\004 \001(\010\022\024\n\014signer_lists\030\005 \001(\010\022\021\n\tc"
  "lient_ip\030\006 \001(\t\"\327\001\n\026GetAccountInfoRespons"
  "e\0222\n\014account_data\030\001 \001(\0132\034.org.xrpl.rpc.v"
  "1.AccountRoot\0220\n\013signer_list\030\002 \001(\0132\033.org"
  ".xrpl.rpc.v1.SignerList\022\024\n\014ledger_index\030"
  "\003 \001(\r\022.\n\nqueue_data\030\004 \001(\0132\032.org.xrpl.rpc"
  ".v1.QueueData\022\021\n\tvalidated\030\005 \001(\010\"\304\002\n\tQue"
  "ueData\022\021\n\ttxn_count\030\001 \001(\r\022\032\n\022auth_change"
  "_queued\030\002 \001(\010\022\027\n\017lowest_sequence\030\003 \001(\r\022\030"
  "\n\020highest_sequence\030\004 \001(\r\022>\n\025max_spend_dr"
  "ops_total\030\005 \001(\0132\037.org.xrpl.rpc.v1.XRPDro"
  "psAmount\0228\n\014transactions\030\006 \003(\0132\".org.xrp"
  "l.rpc.v1.QueuedTransaction\022\025\n\rlowest_tic"
  "ket\030\007 \001(\r\022\026\n\016highest_ticket\030\010 \001(\r\022\026\n\016seq"
  "uence_count\030\t \001(\r\022\024\n\014ticket_count\030\n \001(\r\""
  "\300\002\n\021QueuedTransaction\022\023\n\013auth_change\030\001 \001"
  "(\010\022,\n\003fee\030\002 \001(\0132\037.org.xrpl.rpc.v1.XRPDro"
  "psAmount\022\025\n\tfee_level\030\003 \001(\004B\0020\001\0228\n\017max_s"
  "pend_drops\030\004 \001(\0132\037.org.xrpl.rpc.v1.XRPDr"
  "opsAmount\022+\n\010sequence\030\005 \001(\0132\031.org.xrpl.r"
  "pc.v1.Sequence\022A\n\024last_ledger_sequence\030\006"
  " \001(\0132#.org.xrpl.rpc.v1.LastLedgerSequenc"
  "e\022\'\n\006ticket\030\007 \001(\0132\027.org.xrpl.rpc.v1.Tick"
  "etB\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_deps[5] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2faccount_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_sccs[4] = {
  &scc_info_GetAccountInfoRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base,
  &scc_info_GetAccountInfoResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base,
  &scc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base,
  &scc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto, "org/xrpl/rpc/v1/get_account_info.proto", 1311,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto, 4, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void GetAccountInfoRequest::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetAccountInfoRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::AccountAddress*>(
      ::org::xrpl::rpc::v1::AccountAddress::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetAccountInfoRequest_default_instance_._instance.get_mutable()->ledger_ = const_cast< ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      ::org::xrpl::rpc::v1::LedgerSpecifier::internal_default_instance());
}
class GetAccountInfoRequest::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::AccountAddress& account(const GetAccountInfoRequest* msg);
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetAccountInfoRequest* msg);
};

const ::org::xrpl::rpc::v1::AccountAddress&
GetAccountInfoRequest::HasBitSetters::account(const GetAccountInfoRequest* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetAccountInfoRequest::HasBitSetters::ledger(const GetAccountInfoRequest* msg) {
  return *msg->ledger_;
}
void GetAccountInfoRequest::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void GetAccountInfoRequest::clear_ledger() {
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountInfoRequest::kAccountFieldNumber;
const int GetAccountInfoRequest::kStrictFieldNumber;
const int GetAccountInfoRequest::kLedgerFieldNumber;
const int GetAccountInfoRequest::kQueueFieldNumber;
const int GetAccountInfoRequest::kSignerListsFieldNumber;
const int GetAccountInfoRequest::kClientIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountInfoRequest::GetAccountInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetAccountInfoRequest)
}
GetAccountInfoRequest::GetAccountInfoRequest(const GetAccountInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::AccountAddress(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_ledger()) {
    ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from.ledger_);
  } else {
    ledger_ = nullptr;
  }
  ::memcpy(&strict_, &from.strict_,
    static_cast<size_t>(reinterpret_cast<char*>(&signer_lists_) -
    reinterpret_cast<char*>(&strict_)) + sizeof(signer_lists_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetAccountInfoRequest)
}

void GetAccountInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountInfoRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signer_lists_) -
      reinterpret_cast<char*>(&account_)) + sizeof(signer_lists_));
}

GetAccountInfoRequest::~GetAccountInfoRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetAccountInfoRequest)
  SharedDtor();
}

void GetAccountInfoRequest::SharedDtor() {
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete ledger_;
}

void GetAccountInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountInfoRequest& GetAccountInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountInfoRequest_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GetAccountInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
  ::memset(&strict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signer_lists_) -
      reinterpret_cast<char*>(&strict_)) + sizeof(signer_lists_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAccountInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strict = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          strict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ledger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool queue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool signer_lists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          signer_lists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_ip(), ptr, ctx, "org.xrpl.rpc.v1.GetAccountInfoRequest.client_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAccountInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool strict = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strict_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool queue = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool signer_lists = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signer_lists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), static_cast<int>(this->client_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetAccountInfoRequest.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetAccountInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetAccountInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAccountInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // bool strict = 2;
  if (this->strict() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->strict(), output);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 3;
  if (this->has_ledger()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ledger(this), output);
  }

  // bool queue = 4;
  if (this->queue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->queue(), output);
  }

  // bool signer_lists = 5;
  if (this->signer_lists() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->signer_lists(), output);
  }

  // string client_ip = 6;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetAccountInfoRequest.client_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetAccountInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // bool strict = 2;
  if (this->strict() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->strict(), target);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 3;
  if (this->has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ledger(this), target);
  }

  // bool queue = 4;
  if (this->queue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->queue(), target);
  }

  // bool signer_lists = 5;
  if (this->signer_lists() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->signer_lists(), target);
  }

  // string client_ip = 6;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetAccountInfoRequest.client_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->client_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetAccountInfoRequest)
  return target;
}

size_t GetAccountInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_ip = 6;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 3;
  if (this->has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_);
  }

  // bool strict = 2;
  if (this->strict() != 0) {
    total_size += 1 + 1;
  }

  // bool queue = 4;
  if (this->queue() != 0) {
    total_size += 1 + 1;
  }

  // bool signer_lists = 5;
  if (this->signer_lists() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetAccountInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetAccountInfoRequest)
    MergeFrom(*source);
  }
}

void GetAccountInfoRequest::MergeFrom(const GetAccountInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::AccountAddress::MergeFrom(from.account());
  }
  if (from.has_ledger()) {
    mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(from.ledger());
  }
  if (from.strict() != 0) {
    set_strict(from.strict());
  }
  if (from.queue() != 0) {
    set_queue(from.queue());
  }
  if (from.signer_lists() != 0) {
    set_signer_lists(from.signer_lists());
  }
}

void GetAccountInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountInfoRequest::CopyFrom(const GetAccountInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetAccountInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInfoRequest::IsInitialized() const {
  return true;
}

void GetAccountInfoRequest::Swap(GetAccountInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountInfoRequest::InternalSwap(GetAccountInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(ledger_, other->ledger_);
  swap(strict_, other->strict_);
  swap(queue_, other->queue_);
  swap(signer_lists_, other->signer_lists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountInfoResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetAccountInfoResponse_default_instance_._instance.get_mutable()->account_data_ = const_cast< ::org::xrpl::rpc::v1::AccountRoot*>(
      ::org::xrpl::rpc::v1::AccountRoot::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetAccountInfoResponse_default_instance_._instance.get_mutable()->signer_list_ = const_cast< ::org::xrpl::rpc::v1::SignerList*>(
      ::org::xrpl::rpc::v1::SignerList::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetAccountInfoResponse_default_instance_._instance.get_mutable()->queue_data_ = const_cast< ::org::xrpl::rpc::v1::QueueData*>(
      ::org::xrpl::rpc::v1::QueueData::internal_default_instance());
}
class GetAccountInfoResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::AccountRoot& account_data(const GetAccountInfoResponse* msg);
  static const ::org::xrpl::rpc::v1::SignerList& signer_list(const GetAccountInfoResponse* msg);
  static const ::org::xrpl::rpc::v1::QueueData& queue_data(const GetAccountInfoResponse* msg);
};

const ::org::xrpl::rpc::v1::AccountRoot&
GetAccountInfoResponse::HasBitSetters::account_data(const GetAccountInfoResponse* msg) {
  return *msg->account_data_;
}
const ::org::xrpl::rpc::v1::SignerList&
GetAccountInfoResponse::HasBitSetters::signer_list(const GetAccountInfoResponse* msg) {
  return *msg->signer_list_;
}
const ::org::xrpl::rpc::v1::QueueData&
GetAccountInfoResponse::HasBitSetters::queue_data(const GetAccountInfoResponse* msg) {
  return *msg->queue_data_;
}
void GetAccountInfoResponse::clear_account_data() {
  if (GetArenaNoVirtual() == nullptr && account_data_ != nullptr) {
    delete account_data_;
  }
  account_data_ = nullptr;
}
void GetAccountInfoResponse::clear_signer_list() {
  if (GetArenaNoVirtual() == nullptr && signer_list_ != nullptr) {
    delete signer_list_;
  }
  signer_list_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountInfoResponse::kAccountDataFieldNumber;
const int GetAccountInfoResponse::kSignerListFieldNumber;
const int GetAccountInfoResponse::kLedgerIndexFieldNumber;
const int GetAccountInfoResponse::kQueueDataFieldNumber;
const int GetAccountInfoResponse::kValidatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountInfoResponse::GetAccountInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetAccountInfoResponse)
}
GetAccountInfoResponse::GetAccountInfoResponse(const GetAccountInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_data()) {
    account_data_ = new ::org::xrpl::rpc::v1::AccountRoot(*from.account_data_);
  } else {
    account_data_ = nullptr;
  }
  if (from.has_signer_list()) {
    signer_list_ = new ::org::xrpl::rpc::v1::SignerList(*from.signer_list_);
  } else {
    signer_list_ = nullptr;
  }
  if (from.has_queue_data()) {
    queue_data_ = new ::org::xrpl::rpc::v1::QueueData(*from.queue_data_);
  } else {
    queue_data_ = nullptr;
  }
  ::memcpy(&ledger_index_, &from.ledger_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&validated_) -
    reinterpret_cast<char*>(&ledger_index_)) + sizeof(validated_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetAccountInfoResponse)
}

void GetAccountInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountInfoResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  ::memset(&account_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validated_) -
      reinterpret_cast<char*>(&account_data_)) + sizeof(validated_));
}

GetAccountInfoResponse::~GetAccountInfoResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetAccountInfoResponse)
  SharedDtor();
}

void GetAccountInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete account_data_;
  if (this != internal_default_instance()) delete signer_list_;
  if (this != internal_default_instance()) delete queue_data_;
}

void GetAccountInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountInfoResponse& GetAccountInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountInfoResponse_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GetAccountInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_data_ != nullptr) {
    delete account_data_;
  }
  account_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signer_list_ != nullptr) {
    delete signer_list_;
  }
  signer_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && queue_data_ != nullptr) {
    delete queue_data_;
  }
  queue_data_ = nullptr;
  ::memset(&ledger_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validated_) -
      reinterpret_cast<char*>(&ledger_index_)) + sizeof(validated_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAccountInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.AccountRoot account_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SignerList signer_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_signer_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ledger_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ledger_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.QueueData queue_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_queue_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool validated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAccountInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.AccountRoot account_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SignerList signer_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signer_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ledger_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.QueueData queue_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool validated = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetAccountInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetAccountInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAccountInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountRoot account_data = 1;
  if (this->has_account_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account_data(this), output);
  }

  // .org.xrpl.rpc.v1.SignerList signer_list = 2;
  if (this->has_signer_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::signer_list(this), output);
  }

  // uint32 ledger_index = 3;
  if (this->ledger_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ledger_index(), output);
  }

  // .org.xrpl.rpc.v1.QueueData queue_data = 4;
  if (this->has_queue_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::queue_data(this), output);
  }

  // bool validated = 5;
  if (this->validated() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->validated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetAccountInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountRoot account_data = 1;
  if (this->has_account_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account_data(this), target);
  }

  // .org.xrpl.rpc.v1.SignerList signer_list = 2;
  if (this->has_signer_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::signer_list(this), target);
  }

  // uint32 ledger_index = 3;
  if (this->ledger_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->ledger_index(), target);
  }

  // .org.xrpl.rpc.v1.QueueData queue_data = 4;
  if (this->has_queue_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::queue_data(this), target);
  }

  // bool validated = 5;
  if (this->validated() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->validated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetAccountInfoResponse)
  return target;
}

size_t GetAccountInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountRoot account_data = 1;
  if (this->has_account_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_data_);
  }

  // .org.xrpl.rpc.v1.SignerList signer_list = 2;
  if (this->has_signer_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signer_list_);
  }

  // .org.xrpl.rpc.v1.QueueData queue_data = 4;
  if (this->has_queue_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *queue_data_);
  }

  // uint32 ledger_index = 3;
  if (this->ledger_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index());
  }

  // bool validated = 5;
  if (this->validated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetAccountInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetAccountInfoResponse)
    MergeFrom(*source);
  }
}

void GetAccountInfoResponse::MergeFrom(const GetAccountInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_data()) {
    mutable_account_data()->::org::xrpl::rpc::v1::AccountRoot::MergeFrom(from.account_data());
  }
  if (from.has_signer_list()) {
    mutable_signer_list()->::org::xrpl::rpc::v1::SignerList::MergeFrom(from.signer_list());
  }
  if (from.has_queue_data()) {
    mutable_queue_data()->::org::xrpl::rpc::v1::QueueData::MergeFrom(from.queue_data());
  }
  if (from.ledger_index() != 0) {
    set_ledger_index(from.ledger_index());
  }
  if (from.validated() != 0) {
    set_validated(from.validated());
  }
}

void GetAccountInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountInfoResponse::CopyFrom(const GetAccountInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetAccountInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInfoResponse::IsInitialized() const {
  return true;
}

void GetAccountInfoResponse::Swap(GetAccountInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountInfoResponse::InternalSwap(GetAccountInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_data_, other->account_data_);
  swap(signer_list_, other->signer_list_);
  swap(queue_data_, other->queue_data_);
  swap(ledger_index_, other->ledger_index_);
  swap(validated_, other->validated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueData::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_QueueData_default_instance_._instance.get_mutable()->max_spend_drops_total_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
}
class QueueData::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& max_spend_drops_total(const QueueData* msg);
};

const ::org::xrpl::rpc::v1::XRPDropsAmount&
QueueData::HasBitSetters::max_spend_drops_total(const QueueData* msg) {
  return *msg->max_spend_drops_total_;
}
void QueueData::clear_max_spend_drops_total() {
  if (GetArenaNoVirtual() == nullptr && max_spend_drops_total_ != nullptr) {
    delete max_spend_drops_total_;
  }
  max_spend_drops_total_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueueData::kTxnCountFieldNumber;
const int QueueData::kAuthChangeQueuedFieldNumber;
const int QueueData::kLowestSequenceFieldNumber;
const int QueueData::kHighestSequenceFieldNumber;
const int QueueData::kMaxSpendDropsTotalFieldNumber;
const int QueueData::kTransactionsFieldNumber;
const int QueueData::kLowestTicketFieldNumber;
const int QueueData::kHighestTicketFieldNumber;
const int QueueData::kSequenceCountFieldNumber;
const int QueueData::kTicketCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueueData::QueueData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.QueueData)
}
QueueData::QueueData(const QueueData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_spend_drops_total()) {
    max_spend_drops_total_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.max_spend_drops_total_);
  } else {
    max_spend_drops_total_ = nullptr;
  }
  ::memcpy(&txn_count_, &from.txn_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_count_) -
    reinterpret_cast<char*>(&txn_count_)) + sizeof(ticket_count_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.QueueData)
}

void QueueData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  ::memset(&max_spend_drops_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_count_) -
      reinterpret_cast<char*>(&max_spend_drops_total_)) + sizeof(ticket_count_));
}

QueueData::~QueueData() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.QueueData)
  SharedDtor();
}

void QueueData::SharedDtor() {
  if (this != internal_default_instance()) delete max_spend_drops_total_;
}

void QueueData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueData& QueueData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueData_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  return *internal_default_instance();
}


void QueueData::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.QueueData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArenaNoVirtual() == nullptr && max_spend_drops_total_ != nullptr) {
    delete max_spend_drops_total_;
  }
  max_spend_drops_total_ = nullptr;
  ::memset(&txn_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_count_) -
      reinterpret_cast<char*>(&txn_count_)) + sizeof(ticket_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueueData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 txn_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          txn_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auth_change_queued = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auth_change_queued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lowest_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lowest_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highest_sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          highest_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_max_spend_drops_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.QueuedTransaction transactions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // uint32 lowest_ticket = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lowest_ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highest_ticket = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          highest_ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sequence_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ticket_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ticket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueueData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.QueueData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 txn_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txn_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auth_change_queued = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auth_change_queued_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lowest_sequence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowest_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 highest_sequence = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops_total = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_spend_drops_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.QueuedTransaction transactions = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lowest_ticket = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowest_ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 highest_ticket = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence_count = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ticket_count = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.QueueData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.QueueData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueueData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.QueueData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 txn_count = 1;
  if (this->txn_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->txn_count(), output);
  }

  // bool auth_change_queued = 2;
  if (this->auth_change_queued() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->auth_change_queued(), output);
  }

  // uint32 lowest_sequence = 3;
  if (this->lowest_sequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->lowest_sequence(), output);
  }

  // uint32 highest_sequence = 4;
  if (this->highest_sequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->highest_sequence(), output);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops_total = 5;
  if (this->has_max_spend_drops_total()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::max_spend_drops_total(this), output);
  }

  // repeated .org.xrpl.rpc.v1.QueuedTransaction transactions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->transactions(static_cast<int>(i)),
      output);
  }

  // uint32 lowest_ticket = 7;
  if (this->lowest_ticket() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->lowest_ticket(), output);
  }

  // uint32 highest_ticket = 8;
  if (this->highest_ticket() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->highest_ticket(), output);
  }

  // uint32 sequence_count = 9;
  if (this->sequence_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->sequence_count(), output);
  }

  // uint32 ticket_count = 10;
  if (this->ticket_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->ticket_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.QueueData)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.QueueData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 txn_count = 1;
  if (this->txn_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->txn_count(), target);
  }

  // bool auth_change_queued = 2;
  if (this->auth_change_queued() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->auth_change_queued(), target);
  }

  // uint32 lowest_sequence = 3;
  if (this->lowest_sequence() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->lowest_sequence(), target);
  }

  // uint32 highest_sequence = 4;
  if (this->highest_sequence() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->highest_sequence(), target);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops_total = 5;
  if (this->has_max_spend_drops_total()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::max_spend_drops_total(this), target);
  }

  // repeated .org.xrpl.rpc.v1.QueuedTransaction transactions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->transactions(static_cast<int>(i)), target);
  }

  // uint32 lowest_ticket = 7;
  if (this->lowest_ticket() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->lowest_ticket(), target);
  }

  // uint32 highest_ticket = 8;
  if (this->highest_ticket() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->highest_ticket(), target);
  }

  // uint32 sequence_count = 9;
  if (this->sequence_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->sequence_count(), target);
  }

  // uint32 ticket_count = 10;
  if (this->ticket_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->ticket_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.QueueData)
  return target;
}

size_t QueueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.QueueData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.QueuedTransaction transactions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops_total = 5;
  if (this->has_max_spend_drops_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_spend_drops_total_);
  }

  // uint32 txn_count = 1;
  if (this->txn_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->txn_count());
  }

  // bool auth_change_queued = 2;
  if (this->auth_change_queued() != 0) {
    total_size += 1 + 1;
  }

  // uint32 lowest_sequence = 3;
  if (this->lowest_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lowest_sequence());
  }

  // uint32 highest_sequence = 4;
  if (this->highest_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->highest_sequence());
  }

  // uint32 lowest_ticket = 7;
  if (this->lowest_ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lowest_ticket());
  }

  // uint32 highest_ticket = 8;
  if (this->highest_ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->highest_ticket());
  }

  // uint32 sequence_count = 9;
  if (this->sequence_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sequence_count());
  }

  // uint32 ticket_count = 10;
  if (this->ticket_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ticket_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.QueueData)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.QueueData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.QueueData)
    MergeFrom(*source);
  }
}

void QueueData::MergeFrom(const QueueData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.QueueData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.has_max_spend_drops_total()) {
    mutable_max_spend_drops_total()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.max_spend_drops_total());
  }
  if (from.txn_count() != 0) {
    set_txn_count(from.txn_count());
  }
  if (from.auth_change_queued() != 0) {
    set_auth_change_queued(from.auth_change_queued());
  }
  if (from.lowest_sequence() != 0) {
    set_lowest_sequence(from.lowest_sequence());
  }
  if (from.highest_sequence() != 0) {
    set_highest_sequence(from.highest_sequence());
  }
  if (from.lowest_ticket() != 0) {
    set_lowest_ticket(from.lowest_ticket());
  }
  if (from.highest_ticket() != 0) {
    set_highest_ticket(from.highest_ticket());
  }
  if (from.sequence_count() != 0) {
    set_sequence_count(from.sequence_count());
  }
  if (from.ticket_count() != 0) {
    set_ticket_count(from.ticket_count());
  }
}

void QueueData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.QueueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueData::CopyFrom(const QueueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.QueueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueData::IsInitialized() const {
  return true;
}

void QueueData::Swap(QueueData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueueData::InternalSwap(QueueData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
  swap(max_spend_drops_total_, other->max_spend_drops_total_);
  swap(txn_count_, other->txn_count_);
  swap(auth_change_queued_, other->auth_change_queued_);
  swap(lowest_sequence_, other->lowest_sequence_);
  swap(highest_sequence_, other->highest_sequence_);
  swap(lowest_ticket_, other->lowest_ticket_);
  swap(highest_ticket_, other->highest_ticket_);
  swap(sequence_count_, other->sequence_count_);
  swap(ticket_count_, other->ticket_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueuedTransaction::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_QueuedTransaction_default_instance_._instance.get_mutable()->fee_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_QueuedTransaction_default_instance_._instance.get_mutable()->max_spend_drops_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_QueuedTransaction_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::org::xrpl::rpc::v1::Sequence*>(
      ::org::xrpl::rpc::v1::Sequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_QueuedTransaction_default_instance_._instance.get_mutable()->last_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::LastLedgerSequence*>(
      ::org::xrpl::rpc::v1::LastLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_QueuedTransaction_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::org::xrpl::rpc::v1::Ticket*>(
      ::org::xrpl::rpc::v1::Ticket::internal_default_instance());
}
class QueuedTransaction::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& fee(const QueuedTransaction* msg);
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& max_spend_drops(const QueuedTransaction* msg);
  static const ::org::xrpl::rpc::v1::Sequence& sequence(const QueuedTransaction* msg);
  static const ::org::xrpl::rpc::v1::LastLedgerSequence& last_ledger_sequence(const QueuedTransaction* msg);
  static const ::org::xrpl::rpc::v1::Ticket& ticket(const QueuedTransaction* msg);
};

const ::org::xrpl::rpc::v1::XRPDropsAmount&
QueuedTransaction::HasBitSetters::fee(const QueuedTransaction* msg) {
  return *msg->fee_;
}
const ::org::xrpl::rpc::v1::XRPDropsAmount&
QueuedTransaction::HasBitSetters::max_spend_drops(const QueuedTransaction* msg) {
  return *msg->max_spend_drops_;
}
const ::org::xrpl::rpc::v1::Sequence&
QueuedTransaction::HasBitSetters::sequence(const QueuedTransaction* msg) {
  return *msg->sequence_;
}
const ::org::xrpl::rpc::v1::LastLedgerSequence&
QueuedTransaction::HasBitSetters::last_ledger_sequence(const QueuedTransaction* msg) {
  return *msg->last_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::Ticket&
QueuedTransaction::HasBitSetters::ticket(const QueuedTransaction* msg) {
  return *msg->ticket_;
}
void QueuedTransaction::clear_fee() {
  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
void QueuedTransaction::clear_max_spend_drops() {
  if (GetArenaNoVirtual() == nullptr && max_spend_drops_ != nullptr) {
    delete max_spend_drops_;
  }
  max_spend_drops_ = nullptr;
}
void QueuedTransaction::clear_sequence() {
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
}
void QueuedTransaction::clear_last_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && last_ledger_sequence_ != nullptr) {
    delete last_ledger_sequence_;
  }
  last_ledger_sequence_ = nullptr;
}
void QueuedTransaction::clear_ticket() {
  if (GetArenaNoVirtual() == nullptr && ticket_ != nullptr) {
    delete ticket_;
  }
  ticket_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueuedTransaction::kAuthChangeFieldNumber;
const int QueuedTransaction::kFeeFieldNumber;
const int QueuedTransaction::kFeeLevelFieldNumber;
const int QueuedTransaction::kMaxSpendDropsFieldNumber;
const int QueuedTransaction::kSequenceFieldNumber;
const int QueuedTransaction::kLastLedgerSequenceFieldNumber;
const int QueuedTransaction::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueuedTransaction::QueuedTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.QueuedTransaction)
}
QueuedTransaction::QueuedTransaction(const QueuedTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fee()) {
    fee_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  if (from.has_max_spend_drops()) {
    max_spend_drops_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.max_spend_drops_);
  } else {
    max_spend_drops_ = nullptr;
  }
  if (from.has_sequence()) {
    sequence_ = new ::org::xrpl::rpc::v1::Sequence(*from.sequence_);
  } else {
    sequence_ = nullptr;
  }
  if (from.has_last_ledger_sequence()) {
    last_ledger_sequence_ = new ::org::xrpl::rpc::v1::LastLedgerSequence(*from.last_ledger_sequence_);
  } else {
    last_ledger_sequence_ = nullptr;
  }
  if (from.has_ticket()) {
    ticket_ = new ::org::xrpl::rpc::v1::Ticket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  ::memcpy(&fee_level_, &from.fee_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_change_) -
    reinterpret_cast<char*>(&fee_level_)) + sizeof(auth_change_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.QueuedTransaction)
}

void QueuedTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_change_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(auth_change_));
}

QueuedTransaction::~QueuedTransaction() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.QueuedTransaction)
  SharedDtor();
}

void QueuedTransaction::SharedDtor() {
  if (this != internal_default_instance()) delete fee_;
  if (this != internal_default_instance()) delete max_spend_drops_;
  if (this != internal_default_instance()) delete sequence_;
  if (this != internal_default_instance()) delete last_ledger_sequence_;
  if (this != internal_default_instance()) delete ticket_;
}

void QueuedTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueuedTransaction& QueuedTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueuedTransaction_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5finfo_2eproto.base);
  return *internal_default_instance();
}


void QueuedTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.QueuedTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_spend_drops_ != nullptr) {
    delete max_spend_drops_;
  }
  max_spend_drops_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_ledger_sequence_ != nullptr) {
    delete last_ledger_sequence_;
  }
  last_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ticket_ != nullptr) {
    delete ticket_;
  }
  ticket_ = nullptr;
  ::memset(&fee_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_change_) -
      reinterpret_cast<char*>(&fee_level_)) + sizeof(auth_change_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueuedTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool auth_change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auth_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fee_level = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_max_spend_drops(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Sequence sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_last_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Ticket ticket = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueuedTransaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.QueuedTransaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool auth_change = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auth_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fee_level = 3 [jstype = JS_STRING];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_spend_drops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Sequence sequence = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Ticket ticket = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.QueuedTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.QueuedTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueuedTransaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.QueuedTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool auth_change = 1;
  if (this->auth_change() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->auth_change(), output);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
  if (this->has_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::fee(this), output);
  }

  // uint64 fee_level = 3 [jstype = JS_STRING];
  if (this->fee_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->fee_level(), output);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops = 4;
  if (this->has_max_spend_drops()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::max_spend_drops(this), output);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 5;
  if (this->has_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sequence(this), output);
  }

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 6;
  if (this->has_last_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::last_ledger_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.Ticket ticket = 7;
  if (this->has_ticket()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::ticket(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.QueuedTransaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueuedTransaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.QueuedTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool auth_change = 1;
  if (this->auth_change() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->auth_change(), target);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
  if (this->has_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::fee(this), target);
  }

  // uint64 fee_level = 3 [jstype = JS_STRING];
  if (this->fee_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->fee_level(), target);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops = 4;
  if (this->has_max_spend_drops()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::max_spend_drops(this), target);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 5;
  if (this->has_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sequence(this), target);
  }

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 6;
  if (this->has_last_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::last_ledger_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.Ticket ticket = 7;
  if (this->has_ticket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::ticket(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.QueuedTransaction)
  return target;
}

size_t QueuedTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.QueuedTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount max_spend_drops = 4;
  if (this->has_max_spend_drops()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_spend_drops_);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 5;
  if (this->has_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequence_);
  }

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 6;
  if (this->has_last_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.Ticket ticket = 7;
  if (this->has_ticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  // uint64 fee_level = 3 [jstype = JS_STRING];
  if (this->fee_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fee_level());
  }

  // bool auth_change = 1;
  if (this->auth_change() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueuedTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.QueuedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const QueuedTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueuedTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.QueuedTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.QueuedTransaction)
    MergeFrom(*source);
  }
}

void QueuedTransaction::MergeFrom(const QueuedTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.QueuedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fee()) {
    mutable_fee()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.fee());
  }
  if (from.has_max_spend_drops()) {
    mutable_max_spend_drops()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.max_spend_drops());
  }
  if (from.has_sequence()) {
    mutable_sequence()->::org::xrpl::rpc::v1::Sequence::MergeFrom(from.sequence());
  }
  if (from.has_last_ledger_sequence()) {
    mutable_last_ledger_sequence()->::org::xrpl::rpc::v1::LastLedgerSequence::MergeFrom(from.last_ledger_sequence());
  }
  if (from.has_ticket()) {
    mutable_ticket()->::org::xrpl::rpc::v1::Ticket::MergeFrom(from.ticket());
  }
  if (from.fee_level() != 0) {
    set_fee_level(from.fee_level());
  }
  if (from.auth_change() != 0) {
    set_auth_change(from.auth_change());
  }
}

void QueuedTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.QueuedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueuedTransaction::CopyFrom(const QueuedTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.QueuedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueuedTransaction::IsInitialized() const {
  return true;
}

void QueuedTransaction::Swap(QueuedTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueuedTransaction::InternalSwap(QueuedTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fee_, other->fee_);
  swap(max_spend_drops_, other->max_spend_drops_);
  swap(sequence_, other->sequence_);
  swap(last_ledger_sequence_, other->last_ledger_sequence_);
  swap(ticket_, other->ticket_);
  swap(fee_level_, other->fee_level_);
  swap(auth_change_, other->auth_change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueuedTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetAccountInfoRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetAccountInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetAccountInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetAccountInfoResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetAccountInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetAccountInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::QueueData* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::QueueData >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::QueueData >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::QueuedTransaction* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::QueuedTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::QueuedTransaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
