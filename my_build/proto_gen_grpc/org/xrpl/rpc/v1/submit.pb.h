// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/submit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class SubmitTransactionRequest;
class SubmitTransactionRequestDefaultTypeInternal;
extern SubmitTransactionRequestDefaultTypeInternal _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponse;
class SubmitTransactionResponseDefaultTypeInternal;
extern SubmitTransactionResponseDefaultTypeInternal _SubmitTransactionResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::SubmitTransactionRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::SubmitTransactionRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::SubmitTransactionResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::SubmitTransactionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class SubmitTransactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.SubmitTransactionRequest) */ {
 public:
  SubmitTransactionRequest();
  virtual ~SubmitTransactionRequest();

  SubmitTransactionRequest(const SubmitTransactionRequest& from);
  SubmitTransactionRequest(SubmitTransactionRequest&& from) noexcept
    : SubmitTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionRequest& operator=(const SubmitTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionRequest& operator=(SubmitTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionRequest*>(
               &_SubmitTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SubmitTransactionRequest* other);
  friend void swap(SubmitTransactionRequest& a, SubmitTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionRequest* New() const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(nullptr);
  }

  SubmitTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionRequest& from);
  void MergeFrom(const SubmitTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.SubmitTransactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signed_transaction = 1;
  void clear_signed_transaction();
  static const int kSignedTransactionFieldNumber = 1;
  const std::string& signed_transaction() const;
  void set_signed_transaction(const std::string& value);
  void set_signed_transaction(std::string&& value);
  void set_signed_transaction(const char* value);
  void set_signed_transaction(const void* value, size_t size);
  std::string* mutable_signed_transaction();
  std::string* release_signed_transaction();
  void set_allocated_signed_transaction(std::string* signed_transaction);

  // string client_ip = 3;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 3;
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // bool fail_hard = 2;
  void clear_fail_hard();
  static const int kFailHardFieldNumber = 2;
  bool fail_hard() const;
  void set_fail_hard(bool value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.SubmitTransactionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_transaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  bool fail_hard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.SubmitTransactionResponse) */ {
 public:
  SubmitTransactionResponse();
  virtual ~SubmitTransactionResponse();

  SubmitTransactionResponse(const SubmitTransactionResponse& from);
  SubmitTransactionResponse(SubmitTransactionResponse&& from) noexcept
    : SubmitTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionResponse& operator=(const SubmitTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionResponse& operator=(SubmitTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionResponse*>(
               &_SubmitTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubmitTransactionResponse* other);
  friend void swap(SubmitTransactionResponse& a, SubmitTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionResponse* New() const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(nullptr);
  }

  SubmitTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionResponse& from);
  void MergeFrom(const SubmitTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.SubmitTransactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string engine_result_message = 3;
  void clear_engine_result_message();
  static const int kEngineResultMessageFieldNumber = 3;
  const std::string& engine_result_message() const;
  void set_engine_result_message(const std::string& value);
  void set_engine_result_message(std::string&& value);
  void set_engine_result_message(const char* value);
  void set_engine_result_message(const char* value, size_t size);
  std::string* mutable_engine_result_message();
  std::string* release_engine_result_message();
  void set_allocated_engine_result_message(std::string* engine_result_message);

  // bytes hash = 4;
  void clear_hash();
  static const int kHashFieldNumber = 4;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // .org.xrpl.rpc.v1.TransactionResult engine_result = 1;
  bool has_engine_result() const;
  void clear_engine_result();
  static const int kEngineResultFieldNumber = 1;
  const ::org::xrpl::rpc::v1::TransactionResult& engine_result() const;
  ::org::xrpl::rpc::v1::TransactionResult* release_engine_result();
  ::org::xrpl::rpc::v1::TransactionResult* mutable_engine_result();
  void set_allocated_engine_result(::org::xrpl::rpc::v1::TransactionResult* engine_result);

  // int64 engine_result_code = 2;
  void clear_engine_result_code();
  static const int kEngineResultCodeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 engine_result_code() const;
  void set_engine_result_code(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.SubmitTransactionResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_result_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::org::xrpl::rpc::v1::TransactionResult* engine_result_;
  ::PROTOBUF_NAMESPACE_ID::int64 engine_result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitTransactionRequest

// bytes signed_transaction = 1;
inline void SubmitTransactionRequest::clear_signed_transaction() {
  signed_transaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubmitTransactionRequest::signed_transaction() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
  return signed_transaction_.GetNoArena();
}
inline void SubmitTransactionRequest::set_signed_transaction(const std::string& value) {
  
  signed_transaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
}
inline void SubmitTransactionRequest::set_signed_transaction(std::string&& value) {
  
  signed_transaction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
}
inline void SubmitTransactionRequest::set_signed_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_transaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
}
inline void SubmitTransactionRequest::set_signed_transaction(const void* value, size_t size) {
  
  signed_transaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
}
inline std::string* SubmitTransactionRequest::mutable_signed_transaction() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
  return signed_transaction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubmitTransactionRequest::release_signed_transaction() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
  
  return signed_transaction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitTransactionRequest::set_allocated_signed_transaction(std::string* signed_transaction) {
  if (signed_transaction != nullptr) {
    
  } else {
    
  }
  signed_transaction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_transaction);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SubmitTransactionRequest.signed_transaction)
}

// bool fail_hard = 2;
inline void SubmitTransactionRequest::clear_fail_hard() {
  fail_hard_ = false;
}
inline bool SubmitTransactionRequest::fail_hard() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitTransactionRequest.fail_hard)
  return fail_hard_;
}
inline void SubmitTransactionRequest::set_fail_hard(bool value) {
  
  fail_hard_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitTransactionRequest.fail_hard)
}

// string client_ip = 3;
inline void SubmitTransactionRequest::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubmitTransactionRequest::client_ip() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
  return client_ip_.GetNoArena();
}
inline void SubmitTransactionRequest::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
}
inline void SubmitTransactionRequest::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
}
inline void SubmitTransactionRequest::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
}
inline void SubmitTransactionRequest::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
}
inline std::string* SubmitTransactionRequest::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubmitTransactionRequest::release_client_ip() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitTransactionRequest::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SubmitTransactionRequest.client_ip)
}

// -------------------------------------------------------------------

// SubmitTransactionResponse

// .org.xrpl.rpc.v1.TransactionResult engine_result = 1;
inline bool SubmitTransactionResponse::has_engine_result() const {
  return this != internal_default_instance() && engine_result_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::TransactionResult& SubmitTransactionResponse::engine_result() const {
  const ::org::xrpl::rpc::v1::TransactionResult* p = engine_result_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::TransactionResult*>(
      &::org::xrpl::rpc::v1::_TransactionResult_default_instance_);
}
inline ::org::xrpl::rpc::v1::TransactionResult* SubmitTransactionResponse::release_engine_result() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result)
  
  ::org::xrpl::rpc::v1::TransactionResult* temp = engine_result_;
  engine_result_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::TransactionResult* SubmitTransactionResponse::mutable_engine_result() {
  
  if (engine_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionResult>(GetArenaNoVirtual());
    engine_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result)
  return engine_result_;
}
inline void SubmitTransactionResponse::set_allocated_engine_result(::org::xrpl::rpc::v1::TransactionResult* engine_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(engine_result_);
  }
  if (engine_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      engine_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engine_result, submessage_arena);
    }
    
  } else {
    
  }
  engine_result_ = engine_result;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result)
}

// int64 engine_result_code = 2;
inline void SubmitTransactionResponse::clear_engine_result_code() {
  engine_result_code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubmitTransactionResponse::engine_result_code() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_code)
  return engine_result_code_;
}
inline void SubmitTransactionResponse::set_engine_result_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  engine_result_code_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_code)
}

// string engine_result_message = 3;
inline void SubmitTransactionResponse::clear_engine_result_message() {
  engine_result_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubmitTransactionResponse::engine_result_message() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
  return engine_result_message_.GetNoArena();
}
inline void SubmitTransactionResponse::set_engine_result_message(const std::string& value) {
  
  engine_result_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
}
inline void SubmitTransactionResponse::set_engine_result_message(std::string&& value) {
  
  engine_result_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
}
inline void SubmitTransactionResponse::set_engine_result_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  engine_result_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
}
inline void SubmitTransactionResponse::set_engine_result_message(const char* value, size_t size) {
  
  engine_result_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
}
inline std::string* SubmitTransactionResponse::mutable_engine_result_message() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
  return engine_result_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubmitTransactionResponse::release_engine_result_message() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
  
  return engine_result_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitTransactionResponse::set_allocated_engine_result_message(std::string* engine_result_message) {
  if (engine_result_message != nullptr) {
    
  } else {
    
  }
  engine_result_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engine_result_message);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SubmitTransactionResponse.engine_result_message)
}

// bytes hash = 4;
inline void SubmitTransactionResponse::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubmitTransactionResponse::hash() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
  return hash_.GetNoArena();
}
inline void SubmitTransactionResponse::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
}
inline void SubmitTransactionResponse::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
}
inline void SubmitTransactionResponse::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
}
inline void SubmitTransactionResponse::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
}
inline std::string* SubmitTransactionResponse::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubmitTransactionResponse::release_hash() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitTransactionResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.SubmitTransactionResponse.hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fsubmit_2eproto
