// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/amount.proto

#include "org/xrpl/rpc/v1/amount.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2faccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class CurrencyAmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrencyAmount> _instance;
  const ::org::xrpl::rpc::v1::XRPDropsAmount* xrp_amount_;
  const ::org::xrpl::rpc::v1::IssuedCurrencyAmount* issued_currency_amount_;
} _CurrencyAmount_default_instance_;
class XRPDropsAmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XRPDropsAmount> _instance;
} _XRPDropsAmount_default_instance_;
class IssuedCurrencyAmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IssuedCurrencyAmount> _instance;
} _IssuedCurrencyAmount_default_instance_;
class CurrencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Currency> _instance;
} _Currency_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Currency_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Currency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Currency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto}, {}};

static void InitDefaultsscc_info_CurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_CurrencyAmount_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::CurrencyAmount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::CurrencyAmount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto}, {
      &scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
      &scc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,}};

static void InitDefaultsscc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_IssuedCurrencyAmount_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::IssuedCurrencyAmount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::IssuedCurrencyAmount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto}, {
      &scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
      &scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto.base,}};

static void InitDefaultsscc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::XRPDropsAmount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::XRPDropsAmount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2famount_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2famount_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2famount_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2famount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CurrencyAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CurrencyAmount, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::org::xrpl::rpc::v1::CurrencyAmountDefaultTypeInternal, xrp_amount_),
  offsetof(::org::xrpl::rpc::v1::CurrencyAmountDefaultTypeInternal, issued_currency_amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CurrencyAmount, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::XRPDropsAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::XRPDropsAmount, drops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::IssuedCurrencyAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::IssuedCurrencyAmount, currency_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::IssuedCurrencyAmount, value_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::IssuedCurrencyAmount, issuer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Currency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Currency, name_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Currency, code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::CurrencyAmount)},
  { 8, -1, sizeof(::org::xrpl::rpc::v1::XRPDropsAmount)},
  { 14, -1, sizeof(::org::xrpl::rpc::v1::IssuedCurrencyAmount)},
  { 22, -1, sizeof(::org::xrpl::rpc::v1::Currency)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_CurrencyAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_IssuedCurrencyAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Currency_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2famount_2eproto[] =
  "\n\034org/xrpl/rpc/v1/amount.proto\022\017org.xrpl"
  ".rpc.v1\032\035org/xrpl/rpc/v1/account.proto\"\232"
  "\001\n\016CurrencyAmount\0225\n\nxrp_amount\030\001 \001(\0132\037."
  "org.xrpl.rpc.v1.XRPDropsAmountH\000\022G\n\026issu"
  "ed_currency_amount\030\002 \001(\0132%.org.xrpl.rpc."
  "v1.IssuedCurrencyAmountH\000B\010\n\006amount\"#\n\016X"
  "RPDropsAmount\022\021\n\005drops\030\001 \001(\004B\0020\001\"\203\001\n\024Iss"
  "uedCurrencyAmount\022+\n\010currency\030\001 \001(\0132\031.or"
  "g.xrpl.rpc.v1.Currency\022\r\n\005value\030\002 \001(\t\022/\n"
  "\006issuer\030\003 \001(\0132\037.org.xrpl.rpc.v1.AccountA"
  "ddress\"&\n\010Currency\022\014\n\004name\030\001 \001(\t\022\014\n\004code"
  "\030\002 \001(\014B\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2faccount_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_sccs[4] = {
  &scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
  &scc_info_CurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
  &scc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
  &scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2famount_2eproto, "org/xrpl/rpc/v1/amount.proto", 475,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2famount_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2famount_2eproto, 4, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2famount_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2famount_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2famount_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void CurrencyAmount::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_CurrencyAmount_default_instance_.xrp_amount_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_CurrencyAmount_default_instance_.issued_currency_amount_ = const_cast< ::org::xrpl::rpc::v1::IssuedCurrencyAmount*>(
      ::org::xrpl::rpc::v1::IssuedCurrencyAmount::internal_default_instance());
}
class CurrencyAmount::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& xrp_amount(const CurrencyAmount* msg);
  static const ::org::xrpl::rpc::v1::IssuedCurrencyAmount& issued_currency_amount(const CurrencyAmount* msg);
};

const ::org::xrpl::rpc::v1::XRPDropsAmount&
CurrencyAmount::HasBitSetters::xrp_amount(const CurrencyAmount* msg) {
  return *msg->amount_.xrp_amount_;
}
const ::org::xrpl::rpc::v1::IssuedCurrencyAmount&
CurrencyAmount::HasBitSetters::issued_currency_amount(const CurrencyAmount* msg) {
  return *msg->amount_.issued_currency_amount_;
}
void CurrencyAmount::set_allocated_xrp_amount(::org::xrpl::rpc::v1::XRPDropsAmount* xrp_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_amount();
  if (xrp_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      xrp_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xrp_amount, submessage_arena);
    }
    set_has_xrp_amount();
    amount_.xrp_amount_ = xrp_amount;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CurrencyAmount.xrp_amount)
}
void CurrencyAmount::set_allocated_issued_currency_amount(::org::xrpl::rpc::v1::IssuedCurrencyAmount* issued_currency_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_amount();
  if (issued_currency_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      issued_currency_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, issued_currency_amount, submessage_arena);
    }
    set_has_issued_currency_amount();
    amount_.issued_currency_amount_ = issued_currency_amount;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CurrencyAmount.issued_currency_amount)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyAmount::kXrpAmountFieldNumber;
const int CurrencyAmount::kIssuedCurrencyAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyAmount::CurrencyAmount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.CurrencyAmount)
}
CurrencyAmount::CurrencyAmount(const CurrencyAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_amount();
  switch (from.amount_case()) {
    case kXrpAmount: {
      mutable_xrp_amount()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.xrp_amount());
      break;
    }
    case kIssuedCurrencyAmount: {
      mutable_issued_currency_amount()->::org::xrpl::rpc::v1::IssuedCurrencyAmount::MergeFrom(from.issued_currency_amount());
      break;
    }
    case AMOUNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.CurrencyAmount)
}

void CurrencyAmount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base);
  clear_has_amount();
}

CurrencyAmount::~CurrencyAmount() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.CurrencyAmount)
  SharedDtor();
}

void CurrencyAmount::SharedDtor() {
  if (has_amount()) {
    clear_amount();
  }
}

void CurrencyAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrencyAmount& CurrencyAmount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base);
  return *internal_default_instance();
}


void CurrencyAmount::clear_amount() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.CurrencyAmount)
  switch (amount_case()) {
    case kXrpAmount: {
      delete amount_.xrp_amount_;
      break;
    }
    case kIssuedCurrencyAmount: {
      delete amount_.issued_currency_amount_;
      break;
    }
    case AMOUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AMOUNT_NOT_SET;
}


void CurrencyAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.CurrencyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_amount();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CurrencyAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.XRPDropsAmount xrp_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_xrp_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.IssuedCurrencyAmount issued_currency_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_issued_currency_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CurrencyAmount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.CurrencyAmount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.XRPDropsAmount xrp_amount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_xrp_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.IssuedCurrencyAmount issued_currency_amount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_issued_currency_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.CurrencyAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.CurrencyAmount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CurrencyAmount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.CurrencyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.XRPDropsAmount xrp_amount = 1;
  if (has_xrp_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::xrp_amount(this), output);
  }

  // .org.xrpl.rpc.v1.IssuedCurrencyAmount issued_currency_amount = 2;
  if (has_issued_currency_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::issued_currency_amount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.CurrencyAmount)
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrencyAmount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.CurrencyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.XRPDropsAmount xrp_amount = 1;
  if (has_xrp_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::xrp_amount(this), target);
  }

  // .org.xrpl.rpc.v1.IssuedCurrencyAmount issued_currency_amount = 2;
  if (has_issued_currency_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::issued_currency_amount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.CurrencyAmount)
  return target;
}

size_t CurrencyAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.CurrencyAmount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (amount_case()) {
    // .org.xrpl.rpc.v1.XRPDropsAmount xrp_amount = 1;
    case kXrpAmount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *amount_.xrp_amount_);
      break;
    }
    // .org.xrpl.rpc.v1.IssuedCurrencyAmount issued_currency_amount = 2;
    case kIssuedCurrencyAmount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *amount_.issued_currency_amount_);
      break;
    }
    case AMOUNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.CurrencyAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrencyAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.CurrencyAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.CurrencyAmount)
    MergeFrom(*source);
  }
}

void CurrencyAmount::MergeFrom(const CurrencyAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.CurrencyAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.amount_case()) {
    case kXrpAmount: {
      mutable_xrp_amount()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.xrp_amount());
      break;
    }
    case kIssuedCurrencyAmount: {
      mutable_issued_currency_amount()->::org::xrpl::rpc::v1::IssuedCurrencyAmount::MergeFrom(from.issued_currency_amount());
      break;
    }
    case AMOUNT_NOT_SET: {
      break;
    }
  }
}

void CurrencyAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.CurrencyAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyAmount::CopyFrom(const CurrencyAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.CurrencyAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyAmount::IsInitialized() const {
  return true;
}

void CurrencyAmount::Swap(CurrencyAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyAmount::InternalSwap(CurrencyAmount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XRPDropsAmount::InitAsDefaultInstance() {
}
class XRPDropsAmount::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XRPDropsAmount::kDropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XRPDropsAmount::XRPDropsAmount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.XRPDropsAmount)
}
XRPDropsAmount::XRPDropsAmount(const XRPDropsAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  drops_ = from.drops_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.XRPDropsAmount)
}

void XRPDropsAmount::SharedCtor() {
  drops_ = PROTOBUF_ULONGLONG(0);
}

XRPDropsAmount::~XRPDropsAmount() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.XRPDropsAmount)
  SharedDtor();
}

void XRPDropsAmount::SharedDtor() {
}

void XRPDropsAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XRPDropsAmount& XRPDropsAmount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base);
  return *internal_default_instance();
}


void XRPDropsAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.XRPDropsAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drops_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XRPDropsAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 drops = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          drops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XRPDropsAmount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.XRPDropsAmount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 drops = 1 [jstype = JS_STRING];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &drops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.XRPDropsAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.XRPDropsAmount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XRPDropsAmount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.XRPDropsAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 drops = 1 [jstype = JS_STRING];
  if (this->drops() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->drops(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.XRPDropsAmount)
}

::PROTOBUF_NAMESPACE_ID::uint8* XRPDropsAmount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.XRPDropsAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 drops = 1 [jstype = JS_STRING];
  if (this->drops() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->drops(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.XRPDropsAmount)
  return target;
}

size_t XRPDropsAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.XRPDropsAmount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 drops = 1 [jstype = JS_STRING];
  if (this->drops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->drops());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XRPDropsAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.XRPDropsAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const XRPDropsAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XRPDropsAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.XRPDropsAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.XRPDropsAmount)
    MergeFrom(*source);
  }
}

void XRPDropsAmount::MergeFrom(const XRPDropsAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.XRPDropsAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.drops() != 0) {
    set_drops(from.drops());
  }
}

void XRPDropsAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.XRPDropsAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XRPDropsAmount::CopyFrom(const XRPDropsAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.XRPDropsAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XRPDropsAmount::IsInitialized() const {
  return true;
}

void XRPDropsAmount::Swap(XRPDropsAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XRPDropsAmount::InternalSwap(XRPDropsAmount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(drops_, other->drops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XRPDropsAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IssuedCurrencyAmount::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_IssuedCurrencyAmount_default_instance_._instance.get_mutable()->currency_ = const_cast< ::org::xrpl::rpc::v1::Currency*>(
      ::org::xrpl::rpc::v1::Currency::internal_default_instance());
  ::org::xrpl::rpc::v1::_IssuedCurrencyAmount_default_instance_._instance.get_mutable()->issuer_ = const_cast< ::org::xrpl::rpc::v1::AccountAddress*>(
      ::org::xrpl::rpc::v1::AccountAddress::internal_default_instance());
}
class IssuedCurrencyAmount::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Currency& currency(const IssuedCurrencyAmount* msg);
  static const ::org::xrpl::rpc::v1::AccountAddress& issuer(const IssuedCurrencyAmount* msg);
};

const ::org::xrpl::rpc::v1::Currency&
IssuedCurrencyAmount::HasBitSetters::currency(const IssuedCurrencyAmount* msg) {
  return *msg->currency_;
}
const ::org::xrpl::rpc::v1::AccountAddress&
IssuedCurrencyAmount::HasBitSetters::issuer(const IssuedCurrencyAmount* msg) {
  return *msg->issuer_;
}
void IssuedCurrencyAmount::clear_issuer() {
  if (GetArenaNoVirtual() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IssuedCurrencyAmount::kCurrencyFieldNumber;
const int IssuedCurrencyAmount::kValueFieldNumber;
const int IssuedCurrencyAmount::kIssuerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IssuedCurrencyAmount::IssuedCurrencyAmount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.IssuedCurrencyAmount)
}
IssuedCurrencyAmount::IssuedCurrencyAmount(const IssuedCurrencyAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_currency()) {
    currency_ = new ::org::xrpl::rpc::v1::Currency(*from.currency_);
  } else {
    currency_ = nullptr;
  }
  if (from.has_issuer()) {
    issuer_ = new ::org::xrpl::rpc::v1::AccountAddress(*from.issuer_);
  } else {
    issuer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.IssuedCurrencyAmount)
}

void IssuedCurrencyAmount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&currency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuer_) -
      reinterpret_cast<char*>(&currency_)) + sizeof(issuer_));
}

IssuedCurrencyAmount::~IssuedCurrencyAmount() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  SharedDtor();
}

void IssuedCurrencyAmount::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete currency_;
  if (this != internal_default_instance()) delete issuer_;
}

void IssuedCurrencyAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IssuedCurrencyAmount& IssuedCurrencyAmount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IssuedCurrencyAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base);
  return *internal_default_instance();
}


void IssuedCurrencyAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && currency_ != nullptr) {
    delete currency_;
  }
  currency_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IssuedCurrencyAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Currency currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_currency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "org.xrpl.rpc.v1.IssuedCurrencyAmount.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_issuer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IssuedCurrencyAmount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Currency currency = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_currency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.IssuedCurrencyAmount.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_issuer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IssuedCurrencyAmount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Currency currency = 1;
  if (this->has_currency()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::currency(this), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.IssuedCurrencyAmount.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  if (this->has_issuer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::issuer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.IssuedCurrencyAmount)
}

::PROTOBUF_NAMESPACE_ID::uint8* IssuedCurrencyAmount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Currency currency = 1;
  if (this->has_currency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::currency(this), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.IssuedCurrencyAmount.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  if (this->has_issuer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::issuer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  return target;
}

size_t IssuedCurrencyAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .org.xrpl.rpc.v1.Currency currency = 1;
  if (this->has_currency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currency_);
  }

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  if (this->has_issuer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *issuer_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IssuedCurrencyAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const IssuedCurrencyAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IssuedCurrencyAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.IssuedCurrencyAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.IssuedCurrencyAmount)
    MergeFrom(*source);
  }
}

void IssuedCurrencyAmount::MergeFrom(const IssuedCurrencyAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_currency()) {
    mutable_currency()->::org::xrpl::rpc::v1::Currency::MergeFrom(from.currency());
  }
  if (from.has_issuer()) {
    mutable_issuer()->::org::xrpl::rpc::v1::AccountAddress::MergeFrom(from.issuer());
  }
}

void IssuedCurrencyAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssuedCurrencyAmount::CopyFrom(const IssuedCurrencyAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.IssuedCurrencyAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssuedCurrencyAmount::IsInitialized() const {
  return true;
}

void IssuedCurrencyAmount::Swap(IssuedCurrencyAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IssuedCurrencyAmount::InternalSwap(IssuedCurrencyAmount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(currency_, other->currency_);
  swap(issuer_, other->issuer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IssuedCurrencyAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Currency::InitAsDefaultInstance() {
}
class Currency::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Currency::kNameFieldNumber;
const int Currency::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Currency::Currency()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Currency)
}
Currency::Currency(const Currency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Currency)
}

void Currency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Currency::~Currency() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Currency)
  SharedDtor();
}

void Currency::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Currency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Currency& Currency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base);
  return *internal_default_instance();
}


void Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Currency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Currency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "org.xrpl.rpc.v1.Currency.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Currency::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Currency)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.Currency.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Currency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Currency)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Currency::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Currency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.Currency.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Currency)
}

::PROTOBUF_NAMESPACE_ID::uint8* Currency::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Currency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.Currency.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bytes code = 2;
  if (this->code().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Currency)
  return target;
}

size_t Currency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Currency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Currency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Currency)
  GOOGLE_DCHECK_NE(&from, this);
  const Currency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Currency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Currency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Currency)
    MergeFrom(*source);
  }
}

void Currency::MergeFrom(const Currency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Currency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void Currency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Currency::CopyFrom(const Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Currency::IsInitialized() const {
  return true;
}

void Currency::Swap(Currency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Currency::InternalSwap(Currency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Currency::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::CurrencyAmount* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::CurrencyAmount >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::CurrencyAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::XRPDropsAmount* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::XRPDropsAmount >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::XRPDropsAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::IssuedCurrencyAmount* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::IssuedCurrencyAmount >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::IssuedCurrencyAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Currency* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Currency >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Currency >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
