// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger_entry.proto

#include "org/xrpl/rpc/v1/get_ledger_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetLedgerEntryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLedgerEntryRequest> _instance;
} _GetLedgerEntryRequest_default_instance_;
class GetLedgerEntryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLedgerEntryResponse> _instance;
} _GetLedgerEntryResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_GetLedgerEntryRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetLedgerEntryRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetLedgerEntryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetLedgerEntryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLedgerEntryRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetLedgerEntryRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto}, {
      &scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static void InitDefaultsscc_info_GetLedgerEntryResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetLedgerEntryResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetLedgerEntryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetLedgerEntryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLedgerEntryResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetLedgerEntryResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto}, {
      &scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,
      &scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryResponse, ledger_object_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryResponse, ledger_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerEntryRequest)},
  { 8, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerEntryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetLedgerEntryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetLedgerEntryResponse_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto[] =
  "\n&org/xrpl/rpc/v1/get_ledger_entry.proto"
  "\022\017org.xrpl.rpc.v1\032\034org/xrpl/rpc/v1/ledge"
  "r.proto\"i\n\025GetLedgerEntryRequest\022\013\n\003key\030"
  "\001 \001(\014\0220\n\006ledger\030\002 \001(\0132 .org.xrpl.rpc.v1."
  "LedgerSpecifier\022\021\n\tclient_ip\030\003 \001(\t\"\203\001\n\026G"
  "etLedgerEntryResponse\0227\n\rledger_object\030\001"
  " \001(\0132 .org.xrpl.rpc.v1.RawLedgerObject\0220"
  "\n\006ledger\030\002 \001(\0132 .org.xrpl.rpc.v1.LedgerS"
  "pecifierB\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_sccs[2] = {
  &scc_info_GetLedgerEntryRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.base,
  &scc_info_GetLedgerEntryResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto, "org/xrpl/rpc/v1/get_ledger_entry.proto", 357,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto, 2, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void GetLedgerEntryRequest::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetLedgerEntryRequest_default_instance_._instance.get_mutable()->ledger_ = const_cast< ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      ::org::xrpl::rpc::v1::LedgerSpecifier::internal_default_instance());
}
class GetLedgerEntryRequest::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetLedgerEntryRequest* msg);
};

const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerEntryRequest::HasBitSetters::ledger(const GetLedgerEntryRequest* msg) {
  return *msg->ledger_;
}
void GetLedgerEntryRequest::clear_ledger() {
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgerEntryRequest::kKeyFieldNumber;
const int GetLedgerEntryRequest::kLedgerFieldNumber;
const int GetLedgerEntryRequest::kClientIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgerEntryRequest::GetLedgerEntryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetLedgerEntryRequest)
}
GetLedgerEntryRequest::GetLedgerEntryRequest(const GetLedgerEntryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_ledger()) {
    ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from.ledger_);
  } else {
    ledger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerEntryRequest)
}

void GetLedgerEntryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLedgerEntryRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ledger_ = nullptr;
}

GetLedgerEntryRequest::~GetLedgerEntryRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  SharedDtor();
}

void GetLedgerEntryRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ledger_;
}

void GetLedgerEntryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLedgerEntryRequest& GetLedgerEntryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLedgerEntryRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.base);
  return *internal_default_instance();
}


void GetLedgerEntryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLedgerEntryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ledger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_ip(), ptr, ctx, "org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLedgerEntryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), static_cast<int>(this->client_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLedgerEntryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ledger(this), output);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetLedgerEntryRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLedgerEntryRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ledger(this), target);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->client_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  return target;
}

size_t GetLedgerEntryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLedgerEntryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLedgerEntryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLedgerEntryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetLedgerEntryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetLedgerEntryRequest)
    MergeFrom(*source);
  }
}

void GetLedgerEntryRequest::MergeFrom(const GetLedgerEntryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.has_ledger()) {
    mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(from.ledger());
  }
}

void GetLedgerEntryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgerEntryRequest::CopyFrom(const GetLedgerEntryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerEntryRequest::IsInitialized() const {
  return true;
}

void GetLedgerEntryRequest::Swap(GetLedgerEntryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgerEntryRequest::InternalSwap(GetLedgerEntryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ledger_, other->ledger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerEntryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLedgerEntryResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetLedgerEntryResponse_default_instance_._instance.get_mutable()->ledger_object_ = const_cast< ::org::xrpl::rpc::v1::RawLedgerObject*>(
      ::org::xrpl::rpc::v1::RawLedgerObject::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetLedgerEntryResponse_default_instance_._instance.get_mutable()->ledger_ = const_cast< ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      ::org::xrpl::rpc::v1::LedgerSpecifier::internal_default_instance());
}
class GetLedgerEntryResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::RawLedgerObject& ledger_object(const GetLedgerEntryResponse* msg);
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetLedgerEntryResponse* msg);
};

const ::org::xrpl::rpc::v1::RawLedgerObject&
GetLedgerEntryResponse::HasBitSetters::ledger_object(const GetLedgerEntryResponse* msg) {
  return *msg->ledger_object_;
}
const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerEntryResponse::HasBitSetters::ledger(const GetLedgerEntryResponse* msg) {
  return *msg->ledger_;
}
void GetLedgerEntryResponse::clear_ledger_object() {
  if (GetArenaNoVirtual() == nullptr && ledger_object_ != nullptr) {
    delete ledger_object_;
  }
  ledger_object_ = nullptr;
}
void GetLedgerEntryResponse::clear_ledger() {
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgerEntryResponse::kLedgerObjectFieldNumber;
const int GetLedgerEntryResponse::kLedgerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgerEntryResponse::GetLedgerEntryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetLedgerEntryResponse)
}
GetLedgerEntryResponse::GetLedgerEntryResponse(const GetLedgerEntryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ledger_object()) {
    ledger_object_ = new ::org::xrpl::rpc::v1::RawLedgerObject(*from.ledger_object_);
  } else {
    ledger_object_ = nullptr;
  }
  if (from.has_ledger()) {
    ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from.ledger_);
  } else {
    ledger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerEntryResponse)
}

void GetLedgerEntryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLedgerEntryResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.base);
  ::memset(&ledger_object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ledger_) -
      reinterpret_cast<char*>(&ledger_object_)) + sizeof(ledger_));
}

GetLedgerEntryResponse::~GetLedgerEntryResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  SharedDtor();
}

void GetLedgerEntryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ledger_object_;
  if (this != internal_default_instance()) delete ledger_;
}

void GetLedgerEntryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLedgerEntryResponse& GetLedgerEntryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLedgerEntryResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto.base);
  return *internal_default_instance();
}


void GetLedgerEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ledger_object_ != nullptr) {
    delete ledger_object_;
  }
  ledger_object_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLedgerEntryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ledger_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ledger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLedgerEntryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLedgerEntryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
  if (this->has_ledger_object()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ledger_object(this), output);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ledger(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetLedgerEntryResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLedgerEntryResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
  if (this->has_ledger_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ledger_object(this), target);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ledger(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  return target;
}

size_t GetLedgerEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
  if (this->has_ledger_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_object_);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLedgerEntryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLedgerEntryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLedgerEntryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetLedgerEntryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetLedgerEntryResponse)
    MergeFrom(*source);
  }
}

void GetLedgerEntryResponse::MergeFrom(const GetLedgerEntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ledger_object()) {
    mutable_ledger_object()->::org::xrpl::rpc::v1::RawLedgerObject::MergeFrom(from.ledger_object());
  }
  if (from.has_ledger()) {
    mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(from.ledger());
  }
}

void GetLedgerEntryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgerEntryResponse::CopyFrom(const GetLedgerEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerEntryResponse::IsInitialized() const {
  return true;
}

void GetLedgerEntryResponse::Swap(GetLedgerEntryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgerEntryResponse::InternalSwap(GetLedgerEntryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ledger_object_, other->ledger_object_);
  swap(ledger_, other->ledger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerEntryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerEntryRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerEntryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetLedgerEntryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerEntryResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerEntryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetLedgerEntryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
