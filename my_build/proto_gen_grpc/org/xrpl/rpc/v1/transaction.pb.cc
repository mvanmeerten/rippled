// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/transaction.proto

#include "org/xrpl/rpc/v1/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2faccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Authorize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Balance_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Channel_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearFlag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeliverMin_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Domain_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmailHash_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinishAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fulfillment_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LimitAmount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoData_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoFormat_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoType_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OfferSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Owner_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentChannelSignature_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QualityIn_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QualityOut_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegularKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMax_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetFlag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleDelay_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignerEntry_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignerQuorum_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningPublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TakerGets_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TakerPays_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TickSize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TicketCount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TicketSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionSignature_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferRate_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Unauthorize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2famount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
  const ::org::xrpl::rpc::v1::Payment* payment_;
  const ::org::xrpl::rpc::v1::AccountSet* account_set_;
  const ::org::xrpl::rpc::v1::AccountDelete* account_delete_;
  const ::org::xrpl::rpc::v1::CheckCancel* check_cancel_;
  const ::org::xrpl::rpc::v1::CheckCash* check_cash_;
  const ::org::xrpl::rpc::v1::CheckCreate* check_create_;
  const ::org::xrpl::rpc::v1::DepositPreauth* deposit_preauth_;
  const ::org::xrpl::rpc::v1::EscrowCancel* escrow_cancel_;
  const ::org::xrpl::rpc::v1::EscrowCreate* escrow_create_;
  const ::org::xrpl::rpc::v1::EscrowFinish* escrow_finish_;
  const ::org::xrpl::rpc::v1::OfferCancel* offer_cancel_;
  const ::org::xrpl::rpc::v1::OfferCreate* offer_create_;
  const ::org::xrpl::rpc::v1::PaymentChannelClaim* payment_channel_claim_;
  const ::org::xrpl::rpc::v1::PaymentChannelCreate* payment_channel_create_;
  const ::org::xrpl::rpc::v1::PaymentChannelFund* payment_channel_fund_;
  const ::org::xrpl::rpc::v1::SetRegularKey* set_regular_key_;
  const ::org::xrpl::rpc::v1::SignerListSet* signer_list_set_;
  const ::org::xrpl::rpc::v1::TicketCreate* ticket_create_;
  const ::org::xrpl::rpc::v1::TrustSet* trust_set_;
} _Transaction_default_instance_;
class MemoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Memo> _instance;
} _Memo_default_instance_;
class SignerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signer> _instance;
} _Signer_default_instance_;
class AccountSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountSet> _instance;
} _AccountSet_default_instance_;
class AccountDeleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountDelete> _instance;
} _AccountDelete_default_instance_;
class CheckCancelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckCancel> _instance;
} _CheckCancel_default_instance_;
class CheckCashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckCash> _instance;
  const ::org::xrpl::rpc::v1::Amount* amount_;
  const ::org::xrpl::rpc::v1::DeliverMin* deliver_min_;
} _CheckCash_default_instance_;
class CheckCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckCreate> _instance;
} _CheckCreate_default_instance_;
class DepositPreauthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositPreauth> _instance;
  const ::org::xrpl::rpc::v1::Authorize* authorize_;
  const ::org::xrpl::rpc::v1::Unauthorize* unauthorize_;
} _DepositPreauth_default_instance_;
class EscrowCancelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EscrowCancel> _instance;
} _EscrowCancel_default_instance_;
class EscrowCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EscrowCreate> _instance;
} _EscrowCreate_default_instance_;
class EscrowFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EscrowFinish> _instance;
} _EscrowFinish_default_instance_;
class OfferCancelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OfferCancel> _instance;
} _OfferCancel_default_instance_;
class OfferCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OfferCreate> _instance;
} _OfferCreate_default_instance_;
class Payment_PathElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payment_PathElement> _instance;
} _Payment_PathElement_default_instance_;
class Payment_PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payment_Path> _instance;
} _Payment_Path_default_instance_;
class PaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payment> _instance;
} _Payment_default_instance_;
class PaymentChannelClaimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentChannelClaim> _instance;
} _PaymentChannelClaim_default_instance_;
class PaymentChannelCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentChannelCreate> _instance;
} _PaymentChannelCreate_default_instance_;
class PaymentChannelFundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentChannelFund> _instance;
} _PaymentChannelFund_default_instance_;
class SetRegularKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRegularKey> _instance;
} _SetRegularKey_default_instance_;
class SignerListSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignerListSet> _instance;
} _SignerListSet_default_instance_;
class TicketCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TicketCreate> _instance;
} _TicketCreate_default_instance_;
class TrustSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrustSet> _instance;
} _TrustSet_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_AccountDelete_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::AccountDelete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::AccountDelete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_AccountSet_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::AccountSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::AccountSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_ClearFlag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Domain_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_EmailHash_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_MessageKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SetFlag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TransferRate_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TickSize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_CheckCancel_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::CheckCancel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::CheckCancel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_CheckID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_CheckCash_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::CheckCash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::CheckCash::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_CheckID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DeliverMin_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_CheckCreate_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::CheckCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::CheckCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SendMax_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_InvoiceID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_DepositPreauth_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::DepositPreauth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::DepositPreauth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Authorize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Unauthorize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_EscrowCancel_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::EscrowCancel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::EscrowCancel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Owner_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OfferSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_EscrowCreate_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::EscrowCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::EscrowCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_CancelAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_FinishAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Condition_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_EscrowFinish_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::EscrowFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::EscrowFinish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Owner_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OfferSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Condition_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Fulfillment_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Memo_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Memo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Memo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_MemoData_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_MemoFormat_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_MemoType_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_OfferCancel_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::OfferCancel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::OfferCancel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_OfferSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_OfferCreate_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::OfferCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::OfferCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OfferSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerGets_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerPays_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Payment_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Payment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Payment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_InvoiceID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_SendMax_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DeliverMin_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Payment_Path_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Payment_Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Payment_Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Payment_PathElement_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Payment_PathElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Payment_PathElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_AccountAddress_org_2fxrpl_2frpc_2fv1_2faccount_2eproto.base,
      &scc_info_Currency_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,}};

static void InitDefaultsscc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::PaymentChannelClaim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::PaymentChannelClaim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Channel_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Balance_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PaymentChannelSignature_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::PaymentChannelCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::PaymentChannelCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SettleDelay_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_CancelAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_PaymentChannelFund_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::PaymentChannelFund();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::PaymentChannelFund::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Channel_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_SetRegularKey_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::SetRegularKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::SetRegularKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_RegularKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Signer_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Signer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Signer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TransactionSignature_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SigningPublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_SignerListSet_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::SignerListSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::SignerListSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_SignerQuorum_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SignerEntry_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_TicketCreate_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::TicketCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::TicketCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_TicketCount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Transaction_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 31, InitDefaultsscc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_XRPDropsAmount_org_2fxrpl_2frpc_2fv1_2famount_2eproto.base,
      &scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_SigningPublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TransactionSignature_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_LastLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SourceTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
      &scc_info_AccountTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TicketSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_TrustSet_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::TrustSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::TrustSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto}, {
      &scc_info_LimitAmount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_QualityIn_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_QualityOut_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, fee_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, sequence_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, payment_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, account_set_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, account_delete_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, check_cancel_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, check_cash_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, check_create_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, deposit_preauth_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, escrow_cancel_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, escrow_create_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, escrow_finish_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, offer_cancel_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, offer_create_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, payment_channel_claim_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, payment_channel_create_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, payment_channel_fund_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, set_regular_key_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, signer_list_set_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, ticket_create_),
  offsetof(::org::xrpl::rpc::v1::TransactionDefaultTypeInternal, trust_set_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, signing_public_key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, transaction_signature_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, last_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, source_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, memos_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, signers_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, account_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, ticket_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Transaction, transaction_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Memo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Memo, memo_data_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Memo, memo_format_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Memo, memo_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Signer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Signer, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Signer, transaction_signature_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Signer, signing_public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, clear_flag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, domain_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, email_hash_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, message_key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, set_flag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, transfer_rate_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountSet, tick_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountDelete, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountDelete, destination_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCancel, check_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCash, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCash, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCash, check_id_),
  offsetof(::org::xrpl::rpc::v1::CheckCashDefaultTypeInternal, amount_),
  offsetof(::org::xrpl::rpc::v1::CheckCashDefaultTypeInternal, deliver_min_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCash, amount_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCreate, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCreate, send_max_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCreate, destination_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCreate, expiration_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CheckCreate, invoice_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauth, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauth, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::org::xrpl::rpc::v1::DepositPreauthDefaultTypeInternal, authorize_),
  offsetof(::org::xrpl::rpc::v1::DepositPreauthDefaultTypeInternal, unauthorize_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauth, authorization_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCancel, owner_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCancel, offer_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCreate, amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCreate, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCreate, cancel_after_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCreate, finish_after_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCreate, condition_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowCreate, destination_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowFinish, owner_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowFinish, offer_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowFinish, condition_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::EscrowFinish, fulfillment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::OfferCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::OfferCancel, offer_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::OfferCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::OfferCreate, expiration_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::OfferCreate, offer_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::OfferCreate, taker_gets_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::OfferCreate, taker_pays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment_PathElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment_PathElement, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment_PathElement, currency_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment_PathElement, issuer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment_Path, elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, destination_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, invoice_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, paths_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, send_max_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Payment, deliver_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelClaim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelClaim, channel_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelClaim, balance_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelClaim, amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelClaim, payment_channel_signature_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelClaim, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelCreate, amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelCreate, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelCreate, settle_delay_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelCreate, public_key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelCreate, cancel_after_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelCreate, destination_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelFund, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelFund, channel_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelFund, amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PaymentChannelFund, expiration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SetRegularKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SetRegularKey, regular_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerListSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerListSet, signer_quorum_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerListSet, signer_entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketCreate, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TrustSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TrustSet, limit_amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TrustSet, quality_in_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TrustSet, quality_out_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::Transaction)},
  { 37, -1, sizeof(::org::xrpl::rpc::v1::Memo)},
  { 45, -1, sizeof(::org::xrpl::rpc::v1::Signer)},
  { 53, -1, sizeof(::org::xrpl::rpc::v1::AccountSet)},
  { 65, -1, sizeof(::org::xrpl::rpc::v1::AccountDelete)},
  { 72, -1, sizeof(::org::xrpl::rpc::v1::CheckCancel)},
  { 78, -1, sizeof(::org::xrpl::rpc::v1::CheckCash)},
  { 87, -1, sizeof(::org::xrpl::rpc::v1::CheckCreate)},
  { 97, -1, sizeof(::org::xrpl::rpc::v1::DepositPreauth)},
  { 105, -1, sizeof(::org::xrpl::rpc::v1::EscrowCancel)},
  { 112, -1, sizeof(::org::xrpl::rpc::v1::EscrowCreate)},
  { 123, -1, sizeof(::org::xrpl::rpc::v1::EscrowFinish)},
  { 132, -1, sizeof(::org::xrpl::rpc::v1::OfferCancel)},
  { 138, -1, sizeof(::org::xrpl::rpc::v1::OfferCreate)},
  { 147, -1, sizeof(::org::xrpl::rpc::v1::Payment_PathElement)},
  { 155, -1, sizeof(::org::xrpl::rpc::v1::Payment_Path)},
  { 161, -1, sizeof(::org::xrpl::rpc::v1::Payment)},
  { 173, -1, sizeof(::org::xrpl::rpc::v1::PaymentChannelClaim)},
  { 183, -1, sizeof(::org::xrpl::rpc::v1::PaymentChannelCreate)},
  { 194, -1, sizeof(::org::xrpl::rpc::v1::PaymentChannelFund)},
  { 202, -1, sizeof(::org::xrpl::rpc::v1::SetRegularKey)},
  { 208, -1, sizeof(::org::xrpl::rpc::v1::SignerListSet)},
  { 215, -1, sizeof(::org::xrpl::rpc::v1::TicketCreate)},
  { 221, -1, sizeof(::org::xrpl::rpc::v1::TrustSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Memo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Signer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_AccountSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_AccountDelete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_CheckCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_CheckCash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_CheckCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_DepositPreauth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_EscrowCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_EscrowCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_EscrowFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_OfferCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_OfferCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Payment_PathElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Payment_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_PaymentChannelFund_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_SetRegularKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_SignerListSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_TicketCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_TrustSet_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto[] =
  "\n!org/xrpl/rpc/v1/transaction.proto\022\017org"
  ".xrpl.rpc.v1\032\034org/xrpl/rpc/v1/common.pro"
  "to\032\034org/xrpl/rpc/v1/amount.proto\032\035org/xr"
  "pl/rpc/v1/account.proto\"\323\r\n\013Transaction\022"
  ")\n\007account\030\001 \001(\0132\030.org.xrpl.rpc.v1.Accou"
  "nt\022,\n\003fee\030\002 \001(\0132\037.org.xrpl.rpc.v1.XRPDro"
  "psAmount\022+\n\010sequence\030\003 \001(\0132\031.org.xrpl.rp"
  "c.v1.Sequence\022+\n\007payment\030\004 \001(\0132\030.org.xrp"
  "l.rpc.v1.PaymentH\000\0222\n\013account_set\030\r \001(\0132"
  "\033.org.xrpl.rpc.v1.AccountSetH\000\0228\n\016accoun"
  "t_delete\030\016 \001(\0132\036.org.xrpl.rpc.v1.Account"
  "DeleteH\000\0224\n\014check_cancel\030\017 \001(\0132\034.org.xrp"
  "l.rpc.v1.CheckCancelH\000\0220\n\ncheck_cash\030\020 \001"
  "(\0132\032.org.xrpl.rpc.v1.CheckCashH\000\0224\n\014chec"
  "k_create\030\021 \001(\0132\034.org.xrpl.rpc.v1.CheckCr"
  "eateH\000\022:\n\017deposit_preauth\030\022 \001(\0132\037.org.xr"
  "pl.rpc.v1.DepositPreauthH\000\0226\n\rescrow_can"
  "cel\030\023 \001(\0132\035.org.xrpl.rpc.v1.EscrowCancel"
  "H\000\0226\n\rescrow_create\030\024 \001(\0132\035.org.xrpl.rpc"
  ".v1.EscrowCreateH\000\0226\n\rescrow_finish\030\025 \001("
  "\0132\035.org.xrpl.rpc.v1.EscrowFinishH\000\0224\n\014of"
  "fer_cancel\030\026 \001(\0132\034.org.xrpl.rpc.v1.Offer"
  "CancelH\000\0224\n\014offer_create\030\027 \001(\0132\034.org.xrp"
  "l.rpc.v1.OfferCreateH\000\022E\n\025payment_channe"
  "l_claim\030\030 \001(\0132$.org.xrpl.rpc.v1.PaymentC"
  "hannelClaimH\000\022G\n\026payment_channel_create\030"
  "\031 \001(\0132%.org.xrpl.rpc.v1.PaymentChannelCr"
  "eateH\000\022C\n\024payment_channel_fund\030\032 \001(\0132#.o"
  "rg.xrpl.rpc.v1.PaymentChannelFundH\000\0229\n\017s"
  "et_regular_key\030\033 \001(\0132\036.org.xrpl.rpc.v1.S"
  "etRegularKeyH\000\0229\n\017signer_list_set\030\034 \001(\0132"
  "\036.org.xrpl.rpc.v1.SignerListSetH\000\0226\n\rtic"
  "ket_create\030\036 \001(\0132\035.org.xrpl.rpc.v1.Ticke"
  "tCreateH\000\022.\n\ttrust_set\030\035 \001(\0132\031.org.xrpl."
  "rpc.v1.TrustSetH\000\022=\n\022signing_public_key\030"
  "\005 \001(\0132!.org.xrpl.rpc.v1.SigningPublicKey"
  "\022D\n\025transaction_signature\030\006 \001(\0132%.org.xr"
  "pl.rpc.v1.TransactionSignature\022%\n\005flags\030"
  "\007 \001(\0132\026.org.xrpl.rpc.v1.Flags\022A\n\024last_le"
  "dger_sequence\030\010 \001(\0132#.org.xrpl.rpc.v1.La"
  "stLedgerSequence\022.\n\nsource_tag\030\t \001(\0132\032.o"
  "rg.xrpl.rpc.v1.SourceTag\022$\n\005memos\030\n \003(\0132"
  "\025.org.xrpl.rpc.v1.Memo\022(\n\007signers\030\013 \003(\0132"
  "\027.org.xrpl.rpc.v1.Signer\022E\n\026account_tran"
  "saction_id\030\014 \001(\0132%.org.xrpl.rpc.v1.Accou"
  "ntTransactionID\0228\n\017ticket_sequence\030\037 \001(\013"
  "2\037.org.xrpl.rpc.v1.TicketSequenceB\022\n\020tra"
  "nsaction_data\"\224\001\n\004Memo\022,\n\tmemo_data\030\001 \001("
  "\0132\031.org.xrpl.rpc.v1.MemoData\0220\n\013memo_for"
  "mat\030\002 \001(\0132\033.org.xrpl.rpc.v1.MemoFormat\022,"
  "\n\tmemo_type\030\003 \001(\0132\031.org.xrpl.rpc.v1.Memo"
  "Type\"\270\001\n\006Signer\022)\n\007account\030\001 \001(\0132\030.org.x"
  "rpl.rpc.v1.Account\022D\n\025transaction_signat"
  "ure\030\002 \001(\0132%.org.xrpl.rpc.v1.TransactionS"
  "ignature\022=\n\022signing_public_key\030\003 \001(\0132!.o"
  "rg.xrpl.rpc.v1.SigningPublicKey\"\327\002\n\nAcco"
  "untSet\022.\n\nclear_flag\030\001 \001(\0132\032.org.xrpl.rp"
  "c.v1.ClearFlag\022\'\n\006domain\030\002 \001(\0132\027.org.xrp"
  "l.rpc.v1.Domain\022.\n\nemail_hash\030\003 \001(\0132\032.or"
  "g.xrpl.rpc.v1.EmailHash\0220\n\013message_key\030\004"
  " \001(\0132\033.org.xrpl.rpc.v1.MessageKey\022*\n\010set"
  "_flag\030\005 \001(\0132\030.org.xrpl.rpc.v1.SetFlag\0224\n"
  "\rtransfer_rate\030\006 \001(\0132\035.org.xrpl.rpc.v1.T"
  "ransferRate\022,\n\ttick_size\030\007 \001(\0132\031.org.xrp"
  "l.rpc.v1.TickSize\"|\n\rAccountDelete\0221\n\013de"
  "stination\030\001 \001(\0132\034.org.xrpl.rpc.v1.Destin"
  "ation\0228\n\017destination_tag\030\002 \001(\0132\037.org.xrp"
  "l.rpc.v1.DestinationTag\"9\n\013CheckCancel\022*"
  "\n\010check_id\030\001 \001(\0132\030.org.xrpl.rpc.v1.Check"
  "ID\"\246\001\n\tCheckCash\022*\n\010check_id\030\001 \001(\0132\030.org"
  ".xrpl.rpc.v1.CheckID\022)\n\006amount\030\002 \001(\0132\027.o"
  "rg.xrpl.rpc.v1.AmountH\000\0222\n\013deliver_min\030\003"
  " \001(\0132\033.org.xrpl.rpc.v1.DeliverMinH\000B\016\n\014a"
  "mount_oneof\"\207\002\n\013CheckCreate\0221\n\013destinati"
  "on\030\001 \001(\0132\034.org.xrpl.rpc.v1.Destination\022*"
  "\n\010send_max\030\002 \001(\0132\030.org.xrpl.rpc.v1.SendM"
  "ax\0228\n\017destination_tag\030\003 \001(\0132\037.org.xrpl.r"
  "pc.v1.DestinationTag\022/\n\nexpiration\030\004 \001(\013"
  "2\033.org.xrpl.rpc.v1.Expiration\022.\n\ninvoice"
  "_id\030\005 \001(\0132\032.org.xrpl.rpc.v1.InvoiceID\"\215\001"
  "\n\016DepositPreauth\022/\n\tauthorize\030\001 \001(\0132\032.or"
  "g.xrpl.rpc.v1.AuthorizeH\000\0223\n\013unauthorize"
  "\030\002 \001(\0132\034.org.xrpl.rpc.v1.UnauthorizeH\000B\025"
  "\n\023authorization_oneof\"m\n\014EscrowCancel\022%\n"
  "\005owner\030\001 \001(\0132\026.org.xrpl.rpc.v1.Owner\0226\n\016"
  "offer_sequence\030\002 \001(\0132\036.org.xrpl.rpc.v1.O"
  "fferSequence\"\273\002\n\014EscrowCreate\022\'\n\006amount\030"
  "\001 \001(\0132\027.org.xrpl.rpc.v1.Amount\0221\n\013destin"
  "ation\030\002 \001(\0132\034.org.xrpl.rpc.v1.Destinatio"
  "n\0222\n\014cancel_after\030\003 \001(\0132\034.org.xrpl.rpc.v"
  "1.CancelAfter\0222\n\014finish_after\030\004 \001(\0132\034.or"
  "g.xrpl.rpc.v1.FinishAfter\022-\n\tcondition\030\005"
  " \001(\0132\032.org.xrpl.rpc.v1.Condition\0228\n\017dest"
  "ination_tag\030\006 \001(\0132\037.org.xrpl.rpc.v1.Dest"
  "inationTag\"\317\001\n\014EscrowFinish\022%\n\005owner\030\001 \001"
  "(\0132\026.org.xrpl.rpc.v1.Owner\0226\n\016offer_sequ"
  "ence\030\002 \001(\0132\036.org.xrpl.rpc.v1.OfferSequen"
  "ce\022-\n\tcondition\030\003 \001(\0132\032.org.xrpl.rpc.v1."
  "Condition\0221\n\013fulfillment\030\004 \001(\0132\034.org.xrp"
  "l.rpc.v1.Fulfillment\"E\n\013OfferCancel\0226\n\016o"
  "ffer_sequence\030\001 \001(\0132\036.org.xrpl.rpc.v1.Of"
  "ferSequence\"\326\001\n\013OfferCreate\022/\n\nexpiratio"
  "n\030\001 \001(\0132\033.org.xrpl.rpc.v1.Expiration\0226\n\016"
  "offer_sequence\030\002 \001(\0132\036.org.xrpl.rpc.v1.O"
  "fferSequence\022.\n\ntaker_gets\030\003 \001(\0132\032.org.x"
  "rpl.rpc.v1.TakerGets\022.\n\ntaker_pays\030\004 \001(\013"
  "2\032.org.xrpl.rpc.v1.TakerPays\"\273\004\n\007Payment"
  "\022\'\n\006amount\030\001 \001(\0132\027.org.xrpl.rpc.v1.Amoun"
  "t\0221\n\013destination\030\002 \001(\0132\034.org.xrpl.rpc.v1"
  ".Destination\0228\n\017destination_tag\030\003 \001(\0132\037."
  "org.xrpl.rpc.v1.DestinationTag\022.\n\ninvoic"
  "e_id\030\004 \001(\0132\032.org.xrpl.rpc.v1.InvoiceID\022,"
  "\n\005paths\030\005 \003(\0132\035.org.xrpl.rpc.v1.Payment."
  "Path\022*\n\010send_max\030\006 \001(\0132\030.org.xrpl.rpc.v1"
  ".SendMax\0220\n\013deliver_min\030\007 \001(\0132\033.org.xrpl"
  ".rpc.v1.DeliverMin\032\235\001\n\013PathElement\0220\n\007ac"
  "count\030\001 \001(\0132\037.org.xrpl.rpc.v1.AccountAdd"
  "ress\022+\n\010currency\030\002 \001(\0132\031.org.xrpl.rpc.v1"
  ".Currency\022/\n\006issuer\030\003 \001(\0132\037.org.xrpl.rpc"
  ".v1.AccountAddress\032>\n\004Path\0226\n\010elements\030\001"
  " \003(\0132$.org.xrpl.rpc.v1.Payment.PathEleme"
  "nt\"\221\002\n\023PaymentChannelClaim\022)\n\007channel\030\001 "
  "\001(\0132\030.org.xrpl.rpc.v1.Channel\022)\n\007balance"
  "\030\002 \001(\0132\030.org.xrpl.rpc.v1.Balance\022\'\n\006amou"
  "nt\030\003 \001(\0132\027.org.xrpl.rpc.v1.Amount\022K\n\031pay"
  "ment_channel_signature\030\004 \001(\0132(.org.xrpl."
  "rpc.v1.PaymentChannelSignature\022.\n\npublic"
  "_key\030\005 \001(\0132\032.org.xrpl.rpc.v1.PublicKey\"\304"
  "\002\n\024PaymentChannelCreate\022\'\n\006amount\030\001 \001(\0132"
  "\027.org.xrpl.rpc.v1.Amount\0221\n\013destination\030"
  "\002 \001(\0132\034.org.xrpl.rpc.v1.Destination\0222\n\014s"
  "ettle_delay\030\003 \001(\0132\034.org.xrpl.rpc.v1.Sett"
  "leDelay\022.\n\npublic_key\030\004 \001(\0132\032.org.xrpl.r"
  "pc.v1.PublicKey\0222\n\014cancel_after\030\005 \001(\0132\034."
  "org.xrpl.rpc.v1.CancelAfter\0228\n\017destinati"
  "on_tag\030\006 \001(\0132\037.org.xrpl.rpc.v1.Destinati"
  "onTag\"\231\001\n\022PaymentChannelFund\022)\n\007channel\030"
  "\001 \001(\0132\030.org.xrpl.rpc.v1.Channel\022\'\n\006amoun"
  "t\030\002 \001(\0132\027.org.xrpl.rpc.v1.Amount\022/\n\nexpi"
  "ration\030\003 \001(\0132\033.org.xrpl.rpc.v1.Expiratio"
  "n\"A\n\rSetRegularKey\0220\n\013regular_key\030\001 \001(\0132"
  "\033.org.xrpl.rpc.v1.RegularKey\"{\n\rSignerLi"
  "stSet\0224\n\rsigner_quorum\030\001 \001(\0132\035.org.xrpl."
  "rpc.v1.SignerQuorum\0224\n\016signer_entries\030\002 "
  "\003(\0132\034.org.xrpl.rpc.v1.SignerEntry\";\n\014Tic"
  "ketCreate\022+\n\005count\030\001 \001(\0132\034.org.xrpl.rpc."
  "v1.TicketCount\"\240\001\n\010TrustSet\0222\n\014limit_amo"
  "unt\030\001 \001(\0132\034.org.xrpl.rpc.v1.LimitAmount\022"
  ".\n\nquality_in\030\002 \001(\0132\032.org.xrpl.rpc.v1.Qu"
  "alityIn\0220\n\013quality_out\030\003 \001(\0132\033.org.xrpl."
  "rpc.v1.QualityOutB\023\n\017org.xrpl.rpc.v1P\001b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_deps[3] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2faccount_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2famount_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_sccs[24] = {
  &scc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
  &scc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto, "org/xrpl/rpc/v1/transaction.proto", 6046,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto_deps, 24, 3,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto, 24, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->fee_ = const_cast< ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      ::org::xrpl::rpc::v1::XRPDropsAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::org::xrpl::rpc::v1::Sequence*>(
      ::org::xrpl::rpc::v1::Sequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.payment_ = const_cast< ::org::xrpl::rpc::v1::Payment*>(
      ::org::xrpl::rpc::v1::Payment::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.account_set_ = const_cast< ::org::xrpl::rpc::v1::AccountSet*>(
      ::org::xrpl::rpc::v1::AccountSet::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.account_delete_ = const_cast< ::org::xrpl::rpc::v1::AccountDelete*>(
      ::org::xrpl::rpc::v1::AccountDelete::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.check_cancel_ = const_cast< ::org::xrpl::rpc::v1::CheckCancel*>(
      ::org::xrpl::rpc::v1::CheckCancel::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.check_cash_ = const_cast< ::org::xrpl::rpc::v1::CheckCash*>(
      ::org::xrpl::rpc::v1::CheckCash::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.check_create_ = const_cast< ::org::xrpl::rpc::v1::CheckCreate*>(
      ::org::xrpl::rpc::v1::CheckCreate::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.deposit_preauth_ = const_cast< ::org::xrpl::rpc::v1::DepositPreauth*>(
      ::org::xrpl::rpc::v1::DepositPreauth::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.escrow_cancel_ = const_cast< ::org::xrpl::rpc::v1::EscrowCancel*>(
      ::org::xrpl::rpc::v1::EscrowCancel::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.escrow_create_ = const_cast< ::org::xrpl::rpc::v1::EscrowCreate*>(
      ::org::xrpl::rpc::v1::EscrowCreate::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.escrow_finish_ = const_cast< ::org::xrpl::rpc::v1::EscrowFinish*>(
      ::org::xrpl::rpc::v1::EscrowFinish::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.offer_cancel_ = const_cast< ::org::xrpl::rpc::v1::OfferCancel*>(
      ::org::xrpl::rpc::v1::OfferCancel::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.offer_create_ = const_cast< ::org::xrpl::rpc::v1::OfferCreate*>(
      ::org::xrpl::rpc::v1::OfferCreate::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.payment_channel_claim_ = const_cast< ::org::xrpl::rpc::v1::PaymentChannelClaim*>(
      ::org::xrpl::rpc::v1::PaymentChannelClaim::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.payment_channel_create_ = const_cast< ::org::xrpl::rpc::v1::PaymentChannelCreate*>(
      ::org::xrpl::rpc::v1::PaymentChannelCreate::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.payment_channel_fund_ = const_cast< ::org::xrpl::rpc::v1::PaymentChannelFund*>(
      ::org::xrpl::rpc::v1::PaymentChannelFund::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.set_regular_key_ = const_cast< ::org::xrpl::rpc::v1::SetRegularKey*>(
      ::org::xrpl::rpc::v1::SetRegularKey::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.signer_list_set_ = const_cast< ::org::xrpl::rpc::v1::SignerListSet*>(
      ::org::xrpl::rpc::v1::SignerListSet::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.ticket_create_ = const_cast< ::org::xrpl::rpc::v1::TicketCreate*>(
      ::org::xrpl::rpc::v1::TicketCreate::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_.trust_set_ = const_cast< ::org::xrpl::rpc::v1::TrustSet*>(
      ::org::xrpl::rpc::v1::TrustSet::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->signing_public_key_ = const_cast< ::org::xrpl::rpc::v1::SigningPublicKey*>(
      ::org::xrpl::rpc::v1::SigningPublicKey::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->transaction_signature_ = const_cast< ::org::xrpl::rpc::v1::TransactionSignature*>(
      ::org::xrpl::rpc::v1::TransactionSignature::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->last_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::LastLedgerSequence*>(
      ::org::xrpl::rpc::v1::LastLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->source_tag_ = const_cast< ::org::xrpl::rpc::v1::SourceTag*>(
      ::org::xrpl::rpc::v1::SourceTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->account_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::AccountTransactionID*>(
      ::org::xrpl::rpc::v1::AccountTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_Transaction_default_instance_._instance.get_mutable()->ticket_sequence_ = const_cast< ::org::xrpl::rpc::v1::TicketSequence*>(
      ::org::xrpl::rpc::v1::TicketSequence::internal_default_instance());
}
class Transaction::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::XRPDropsAmount& fee(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::Sequence& sequence(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::Payment& payment(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::AccountSet& account_set(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::AccountDelete& account_delete(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::CheckCancel& check_cancel(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::CheckCash& check_cash(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::CheckCreate& check_create(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::DepositPreauth& deposit_preauth(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::EscrowCancel& escrow_cancel(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::EscrowCreate& escrow_create(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::EscrowFinish& escrow_finish(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::OfferCancel& offer_cancel(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::OfferCreate& offer_create(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::PaymentChannelClaim& payment_channel_claim(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::PaymentChannelCreate& payment_channel_create(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::PaymentChannelFund& payment_channel_fund(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::SetRegularKey& set_regular_key(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::SignerListSet& signer_list_set(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::TicketCreate& ticket_create(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::TrustSet& trust_set(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::SigningPublicKey& signing_public_key(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::TransactionSignature& transaction_signature(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::LastLedgerSequence& last_ledger_sequence(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::SourceTag& source_tag(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::AccountTransactionID& account_transaction_id(const Transaction* msg);
  static const ::org::xrpl::rpc::v1::TicketSequence& ticket_sequence(const Transaction* msg);
};

const ::org::xrpl::rpc::v1::Account&
Transaction::HasBitSetters::account(const Transaction* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::XRPDropsAmount&
Transaction::HasBitSetters::fee(const Transaction* msg) {
  return *msg->fee_;
}
const ::org::xrpl::rpc::v1::Sequence&
Transaction::HasBitSetters::sequence(const Transaction* msg) {
  return *msg->sequence_;
}
const ::org::xrpl::rpc::v1::Payment&
Transaction::HasBitSetters::payment(const Transaction* msg) {
  return *msg->transaction_data_.payment_;
}
const ::org::xrpl::rpc::v1::AccountSet&
Transaction::HasBitSetters::account_set(const Transaction* msg) {
  return *msg->transaction_data_.account_set_;
}
const ::org::xrpl::rpc::v1::AccountDelete&
Transaction::HasBitSetters::account_delete(const Transaction* msg) {
  return *msg->transaction_data_.account_delete_;
}
const ::org::xrpl::rpc::v1::CheckCancel&
Transaction::HasBitSetters::check_cancel(const Transaction* msg) {
  return *msg->transaction_data_.check_cancel_;
}
const ::org::xrpl::rpc::v1::CheckCash&
Transaction::HasBitSetters::check_cash(const Transaction* msg) {
  return *msg->transaction_data_.check_cash_;
}
const ::org::xrpl::rpc::v1::CheckCreate&
Transaction::HasBitSetters::check_create(const Transaction* msg) {
  return *msg->transaction_data_.check_create_;
}
const ::org::xrpl::rpc::v1::DepositPreauth&
Transaction::HasBitSetters::deposit_preauth(const Transaction* msg) {
  return *msg->transaction_data_.deposit_preauth_;
}
const ::org::xrpl::rpc::v1::EscrowCancel&
Transaction::HasBitSetters::escrow_cancel(const Transaction* msg) {
  return *msg->transaction_data_.escrow_cancel_;
}
const ::org::xrpl::rpc::v1::EscrowCreate&
Transaction::HasBitSetters::escrow_create(const Transaction* msg) {
  return *msg->transaction_data_.escrow_create_;
}
const ::org::xrpl::rpc::v1::EscrowFinish&
Transaction::HasBitSetters::escrow_finish(const Transaction* msg) {
  return *msg->transaction_data_.escrow_finish_;
}
const ::org::xrpl::rpc::v1::OfferCancel&
Transaction::HasBitSetters::offer_cancel(const Transaction* msg) {
  return *msg->transaction_data_.offer_cancel_;
}
const ::org::xrpl::rpc::v1::OfferCreate&
Transaction::HasBitSetters::offer_create(const Transaction* msg) {
  return *msg->transaction_data_.offer_create_;
}
const ::org::xrpl::rpc::v1::PaymentChannelClaim&
Transaction::HasBitSetters::payment_channel_claim(const Transaction* msg) {
  return *msg->transaction_data_.payment_channel_claim_;
}
const ::org::xrpl::rpc::v1::PaymentChannelCreate&
Transaction::HasBitSetters::payment_channel_create(const Transaction* msg) {
  return *msg->transaction_data_.payment_channel_create_;
}
const ::org::xrpl::rpc::v1::PaymentChannelFund&
Transaction::HasBitSetters::payment_channel_fund(const Transaction* msg) {
  return *msg->transaction_data_.payment_channel_fund_;
}
const ::org::xrpl::rpc::v1::SetRegularKey&
Transaction::HasBitSetters::set_regular_key(const Transaction* msg) {
  return *msg->transaction_data_.set_regular_key_;
}
const ::org::xrpl::rpc::v1::SignerListSet&
Transaction::HasBitSetters::signer_list_set(const Transaction* msg) {
  return *msg->transaction_data_.signer_list_set_;
}
const ::org::xrpl::rpc::v1::TicketCreate&
Transaction::HasBitSetters::ticket_create(const Transaction* msg) {
  return *msg->transaction_data_.ticket_create_;
}
const ::org::xrpl::rpc::v1::TrustSet&
Transaction::HasBitSetters::trust_set(const Transaction* msg) {
  return *msg->transaction_data_.trust_set_;
}
const ::org::xrpl::rpc::v1::SigningPublicKey&
Transaction::HasBitSetters::signing_public_key(const Transaction* msg) {
  return *msg->signing_public_key_;
}
const ::org::xrpl::rpc::v1::TransactionSignature&
Transaction::HasBitSetters::transaction_signature(const Transaction* msg) {
  return *msg->transaction_signature_;
}
const ::org::xrpl::rpc::v1::Flags&
Transaction::HasBitSetters::flags(const Transaction* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::LastLedgerSequence&
Transaction::HasBitSetters::last_ledger_sequence(const Transaction* msg) {
  return *msg->last_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::SourceTag&
Transaction::HasBitSetters::source_tag(const Transaction* msg) {
  return *msg->source_tag_;
}
const ::org::xrpl::rpc::v1::AccountTransactionID&
Transaction::HasBitSetters::account_transaction_id(const Transaction* msg) {
  return *msg->account_transaction_id_;
}
const ::org::xrpl::rpc::v1::TicketSequence&
Transaction::HasBitSetters::ticket_sequence(const Transaction* msg) {
  return *msg->ticket_sequence_;
}
void Transaction::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void Transaction::clear_fee() {
  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
void Transaction::clear_sequence() {
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
}
void Transaction::set_allocated_payment(::org::xrpl::rpc::v1::Payment* payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    set_has_payment();
    transaction_data_.payment_ = payment;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.payment)
}
void Transaction::set_allocated_account_set(::org::xrpl::rpc::v1::AccountSet* account_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (account_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_set, submessage_arena);
    }
    set_has_account_set();
    transaction_data_.account_set_ = account_set;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.account_set)
}
void Transaction::set_allocated_account_delete(::org::xrpl::rpc::v1::AccountDelete* account_delete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (account_delete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_delete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_delete, submessage_arena);
    }
    set_has_account_delete();
    transaction_data_.account_delete_ = account_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.account_delete)
}
void Transaction::set_allocated_check_cancel(::org::xrpl::rpc::v1::CheckCancel* check_cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (check_cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_cancel, submessage_arena);
    }
    set_has_check_cancel();
    transaction_data_.check_cancel_ = check_cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.check_cancel)
}
void Transaction::set_allocated_check_cash(::org::xrpl::rpc::v1::CheckCash* check_cash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (check_cash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_cash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_cash, submessage_arena);
    }
    set_has_check_cash();
    transaction_data_.check_cash_ = check_cash;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.check_cash)
}
void Transaction::set_allocated_check_create(::org::xrpl::rpc::v1::CheckCreate* check_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (check_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_create, submessage_arena);
    }
    set_has_check_create();
    transaction_data_.check_create_ = check_create;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.check_create)
}
void Transaction::set_allocated_deposit_preauth(::org::xrpl::rpc::v1::DepositPreauth* deposit_preauth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (deposit_preauth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deposit_preauth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit_preauth, submessage_arena);
    }
    set_has_deposit_preauth();
    transaction_data_.deposit_preauth_ = deposit_preauth;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.deposit_preauth)
}
void Transaction::set_allocated_escrow_cancel(::org::xrpl::rpc::v1::EscrowCancel* escrow_cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (escrow_cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      escrow_cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, escrow_cancel, submessage_arena);
    }
    set_has_escrow_cancel();
    transaction_data_.escrow_cancel_ = escrow_cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.escrow_cancel)
}
void Transaction::set_allocated_escrow_create(::org::xrpl::rpc::v1::EscrowCreate* escrow_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (escrow_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      escrow_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, escrow_create, submessage_arena);
    }
    set_has_escrow_create();
    transaction_data_.escrow_create_ = escrow_create;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.escrow_create)
}
void Transaction::set_allocated_escrow_finish(::org::xrpl::rpc::v1::EscrowFinish* escrow_finish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (escrow_finish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      escrow_finish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, escrow_finish, submessage_arena);
    }
    set_has_escrow_finish();
    transaction_data_.escrow_finish_ = escrow_finish;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.escrow_finish)
}
void Transaction::set_allocated_offer_cancel(::org::xrpl::rpc::v1::OfferCancel* offer_cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (offer_cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offer_cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_cancel, submessage_arena);
    }
    set_has_offer_cancel();
    transaction_data_.offer_cancel_ = offer_cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.offer_cancel)
}
void Transaction::set_allocated_offer_create(::org::xrpl::rpc::v1::OfferCreate* offer_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (offer_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offer_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_create, submessage_arena);
    }
    set_has_offer_create();
    transaction_data_.offer_create_ = offer_create;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.offer_create)
}
void Transaction::set_allocated_payment_channel_claim(::org::xrpl::rpc::v1::PaymentChannelClaim* payment_channel_claim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (payment_channel_claim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_channel_claim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_channel_claim, submessage_arena);
    }
    set_has_payment_channel_claim();
    transaction_data_.payment_channel_claim_ = payment_channel_claim;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.payment_channel_claim)
}
void Transaction::set_allocated_payment_channel_create(::org::xrpl::rpc::v1::PaymentChannelCreate* payment_channel_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (payment_channel_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_channel_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_channel_create, submessage_arena);
    }
    set_has_payment_channel_create();
    transaction_data_.payment_channel_create_ = payment_channel_create;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.payment_channel_create)
}
void Transaction::set_allocated_payment_channel_fund(::org::xrpl::rpc::v1::PaymentChannelFund* payment_channel_fund) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (payment_channel_fund) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_channel_fund = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_channel_fund, submessage_arena);
    }
    set_has_payment_channel_fund();
    transaction_data_.payment_channel_fund_ = payment_channel_fund;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.payment_channel_fund)
}
void Transaction::set_allocated_set_regular_key(::org::xrpl::rpc::v1::SetRegularKey* set_regular_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (set_regular_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_regular_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_regular_key, submessage_arena);
    }
    set_has_set_regular_key();
    transaction_data_.set_regular_key_ = set_regular_key;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.set_regular_key)
}
void Transaction::set_allocated_signer_list_set(::org::xrpl::rpc::v1::SignerListSet* signer_list_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (signer_list_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signer_list_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signer_list_set, submessage_arena);
    }
    set_has_signer_list_set();
    transaction_data_.signer_list_set_ = signer_list_set;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.signer_list_set)
}
void Transaction::set_allocated_ticket_create(::org::xrpl::rpc::v1::TicketCreate* ticket_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (ticket_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ticket_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket_create, submessage_arena);
    }
    set_has_ticket_create();
    transaction_data_.ticket_create_ = ticket_create;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.ticket_create)
}
void Transaction::set_allocated_trust_set(::org::xrpl::rpc::v1::TrustSet* trust_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction_data();
  if (trust_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trust_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trust_set, submessage_arena);
    }
    set_has_trust_set();
    transaction_data_.trust_set_ = trust_set;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Transaction.trust_set)
}
void Transaction::clear_signing_public_key() {
  if (GetArenaNoVirtual() == nullptr && signing_public_key_ != nullptr) {
    delete signing_public_key_;
  }
  signing_public_key_ = nullptr;
}
void Transaction::clear_transaction_signature() {
  if (GetArenaNoVirtual() == nullptr && transaction_signature_ != nullptr) {
    delete transaction_signature_;
  }
  transaction_signature_ = nullptr;
}
void Transaction::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void Transaction::clear_last_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && last_ledger_sequence_ != nullptr) {
    delete last_ledger_sequence_;
  }
  last_ledger_sequence_ = nullptr;
}
void Transaction::clear_source_tag() {
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
}
void Transaction::clear_account_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && account_transaction_id_ != nullptr) {
    delete account_transaction_id_;
  }
  account_transaction_id_ = nullptr;
}
void Transaction::clear_ticket_sequence() {
  if (GetArenaNoVirtual() == nullptr && ticket_sequence_ != nullptr) {
    delete ticket_sequence_;
  }
  ticket_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kAccountFieldNumber;
const int Transaction::kFeeFieldNumber;
const int Transaction::kSequenceFieldNumber;
const int Transaction::kPaymentFieldNumber;
const int Transaction::kAccountSetFieldNumber;
const int Transaction::kAccountDeleteFieldNumber;
const int Transaction::kCheckCancelFieldNumber;
const int Transaction::kCheckCashFieldNumber;
const int Transaction::kCheckCreateFieldNumber;
const int Transaction::kDepositPreauthFieldNumber;
const int Transaction::kEscrowCancelFieldNumber;
const int Transaction::kEscrowCreateFieldNumber;
const int Transaction::kEscrowFinishFieldNumber;
const int Transaction::kOfferCancelFieldNumber;
const int Transaction::kOfferCreateFieldNumber;
const int Transaction::kPaymentChannelClaimFieldNumber;
const int Transaction::kPaymentChannelCreateFieldNumber;
const int Transaction::kPaymentChannelFundFieldNumber;
const int Transaction::kSetRegularKeyFieldNumber;
const int Transaction::kSignerListSetFieldNumber;
const int Transaction::kTicketCreateFieldNumber;
const int Transaction::kTrustSetFieldNumber;
const int Transaction::kSigningPublicKeyFieldNumber;
const int Transaction::kTransactionSignatureFieldNumber;
const int Transaction::kFlagsFieldNumber;
const int Transaction::kLastLedgerSequenceFieldNumber;
const int Transaction::kSourceTagFieldNumber;
const int Transaction::kMemosFieldNumber;
const int Transaction::kSignersFieldNumber;
const int Transaction::kAccountTransactionIdFieldNumber;
const int Transaction::kTicketSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      memos_(from.memos_),
      signers_(from.signers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_fee()) {
    fee_ = new ::org::xrpl::rpc::v1::XRPDropsAmount(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  if (from.has_sequence()) {
    sequence_ = new ::org::xrpl::rpc::v1::Sequence(*from.sequence_);
  } else {
    sequence_ = nullptr;
  }
  if (from.has_signing_public_key()) {
    signing_public_key_ = new ::org::xrpl::rpc::v1::SigningPublicKey(*from.signing_public_key_);
  } else {
    signing_public_key_ = nullptr;
  }
  if (from.has_transaction_signature()) {
    transaction_signature_ = new ::org::xrpl::rpc::v1::TransactionSignature(*from.transaction_signature_);
  } else {
    transaction_signature_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_last_ledger_sequence()) {
    last_ledger_sequence_ = new ::org::xrpl::rpc::v1::LastLedgerSequence(*from.last_ledger_sequence_);
  } else {
    last_ledger_sequence_ = nullptr;
  }
  if (from.has_source_tag()) {
    source_tag_ = new ::org::xrpl::rpc::v1::SourceTag(*from.source_tag_);
  } else {
    source_tag_ = nullptr;
  }
  if (from.has_account_transaction_id()) {
    account_transaction_id_ = new ::org::xrpl::rpc::v1::AccountTransactionID(*from.account_transaction_id_);
  } else {
    account_transaction_id_ = nullptr;
  }
  if (from.has_ticket_sequence()) {
    ticket_sequence_ = new ::org::xrpl::rpc::v1::TicketSequence(*from.ticket_sequence_);
  } else {
    ticket_sequence_ = nullptr;
  }
  clear_has_transaction_data();
  switch (from.transaction_data_case()) {
    case kPayment: {
      mutable_payment()->::org::xrpl::rpc::v1::Payment::MergeFrom(from.payment());
      break;
    }
    case kAccountSet: {
      mutable_account_set()->::org::xrpl::rpc::v1::AccountSet::MergeFrom(from.account_set());
      break;
    }
    case kAccountDelete: {
      mutable_account_delete()->::org::xrpl::rpc::v1::AccountDelete::MergeFrom(from.account_delete());
      break;
    }
    case kCheckCancel: {
      mutable_check_cancel()->::org::xrpl::rpc::v1::CheckCancel::MergeFrom(from.check_cancel());
      break;
    }
    case kCheckCash: {
      mutable_check_cash()->::org::xrpl::rpc::v1::CheckCash::MergeFrom(from.check_cash());
      break;
    }
    case kCheckCreate: {
      mutable_check_create()->::org::xrpl::rpc::v1::CheckCreate::MergeFrom(from.check_create());
      break;
    }
    case kDepositPreauth: {
      mutable_deposit_preauth()->::org::xrpl::rpc::v1::DepositPreauth::MergeFrom(from.deposit_preauth());
      break;
    }
    case kEscrowCancel: {
      mutable_escrow_cancel()->::org::xrpl::rpc::v1::EscrowCancel::MergeFrom(from.escrow_cancel());
      break;
    }
    case kEscrowCreate: {
      mutable_escrow_create()->::org::xrpl::rpc::v1::EscrowCreate::MergeFrom(from.escrow_create());
      break;
    }
    case kEscrowFinish: {
      mutable_escrow_finish()->::org::xrpl::rpc::v1::EscrowFinish::MergeFrom(from.escrow_finish());
      break;
    }
    case kOfferCancel: {
      mutable_offer_cancel()->::org::xrpl::rpc::v1::OfferCancel::MergeFrom(from.offer_cancel());
      break;
    }
    case kOfferCreate: {
      mutable_offer_create()->::org::xrpl::rpc::v1::OfferCreate::MergeFrom(from.offer_create());
      break;
    }
    case kPaymentChannelClaim: {
      mutable_payment_channel_claim()->::org::xrpl::rpc::v1::PaymentChannelClaim::MergeFrom(from.payment_channel_claim());
      break;
    }
    case kPaymentChannelCreate: {
      mutable_payment_channel_create()->::org::xrpl::rpc::v1::PaymentChannelCreate::MergeFrom(from.payment_channel_create());
      break;
    }
    case kPaymentChannelFund: {
      mutable_payment_channel_fund()->::org::xrpl::rpc::v1::PaymentChannelFund::MergeFrom(from.payment_channel_fund());
      break;
    }
    case kSetRegularKey: {
      mutable_set_regular_key()->::org::xrpl::rpc::v1::SetRegularKey::MergeFrom(from.set_regular_key());
      break;
    }
    case kSignerListSet: {
      mutable_signer_list_set()->::org::xrpl::rpc::v1::SignerListSet::MergeFrom(from.signer_list_set());
      break;
    }
    case kTicketCreate: {
      mutable_ticket_create()->::org::xrpl::rpc::v1::TicketCreate::MergeFrom(from.ticket_create());
      break;
    }
    case kTrustSet: {
      mutable_trust_set()->::org::xrpl::rpc::v1::TrustSet::MergeFrom(from.trust_set());
      break;
    }
    case TRANSACTION_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_sequence_) -
      reinterpret_cast<char*>(&account_)) + sizeof(ticket_sequence_));
  clear_has_transaction_data();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete fee_;
  if (this != internal_default_instance()) delete sequence_;
  if (this != internal_default_instance()) delete signing_public_key_;
  if (this != internal_default_instance()) delete transaction_signature_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete last_ledger_sequence_;
  if (this != internal_default_instance()) delete source_tag_;
  if (this != internal_default_instance()) delete account_transaction_id_;
  if (this != internal_default_instance()) delete ticket_sequence_;
  if (has_transaction_data()) {
    clear_transaction_data();
  }
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_transaction_data() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.Transaction)
  switch (transaction_data_case()) {
    case kPayment: {
      delete transaction_data_.payment_;
      break;
    }
    case kAccountSet: {
      delete transaction_data_.account_set_;
      break;
    }
    case kAccountDelete: {
      delete transaction_data_.account_delete_;
      break;
    }
    case kCheckCancel: {
      delete transaction_data_.check_cancel_;
      break;
    }
    case kCheckCash: {
      delete transaction_data_.check_cash_;
      break;
    }
    case kCheckCreate: {
      delete transaction_data_.check_create_;
      break;
    }
    case kDepositPreauth: {
      delete transaction_data_.deposit_preauth_;
      break;
    }
    case kEscrowCancel: {
      delete transaction_data_.escrow_cancel_;
      break;
    }
    case kEscrowCreate: {
      delete transaction_data_.escrow_create_;
      break;
    }
    case kEscrowFinish: {
      delete transaction_data_.escrow_finish_;
      break;
    }
    case kOfferCancel: {
      delete transaction_data_.offer_cancel_;
      break;
    }
    case kOfferCreate: {
      delete transaction_data_.offer_create_;
      break;
    }
    case kPaymentChannelClaim: {
      delete transaction_data_.payment_channel_claim_;
      break;
    }
    case kPaymentChannelCreate: {
      delete transaction_data_.payment_channel_create_;
      break;
    }
    case kPaymentChannelFund: {
      delete transaction_data_.payment_channel_fund_;
      break;
    }
    case kSetRegularKey: {
      delete transaction_data_.set_regular_key_;
      break;
    }
    case kSignerListSet: {
      delete transaction_data_.signer_list_set_;
      break;
    }
    case kTicketCreate: {
      delete transaction_data_.ticket_create_;
      break;
    }
    case kTrustSet: {
      delete transaction_data_.trust_set_;
      break;
    }
    case TRANSACTION_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_DATA_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memos_.Clear();
  signers_.Clear();
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signing_public_key_ != nullptr) {
    delete signing_public_key_;
  }
  signing_public_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transaction_signature_ != nullptr) {
    delete transaction_signature_;
  }
  transaction_signature_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_ledger_sequence_ != nullptr) {
    delete last_ledger_sequence_;
  }
  last_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && account_transaction_id_ != nullptr) {
    delete account_transaction_id_;
  }
  account_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ticket_sequence_ != nullptr) {
    delete ticket_sequence_;
  }
  ticket_sequence_ = nullptr;
  clear_transaction_data();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Sequence sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Payment payment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_signing_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_transaction_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_last_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SourceTag source_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_source_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.Memo memos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_memos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.Signer signers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_signers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_account_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.AccountSet account_set = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_account_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.AccountDelete account_delete = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_account_delete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CheckCancel check_cancel = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_check_cancel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CheckCash check_cash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_check_cash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CheckCreate check_create = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_check_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DepositPreauth deposit_preauth = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_deposit_preauth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.EscrowCancel escrow_cancel = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_escrow_cancel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.EscrowCreate escrow_create = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_escrow_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.EscrowFinish escrow_finish = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_escrow_finish(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OfferCancel offer_cancel = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_offer_cancel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OfferCreate offer_create = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_offer_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PaymentChannelClaim payment_channel_claim = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_payment_channel_claim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PaymentChannelCreate payment_channel_create = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_payment_channel_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PaymentChannelFund payment_channel_fund = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_payment_channel_fund(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SetRegularKey set_regular_key = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_set_regular_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SignerListSet signer_list_set = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_signer_list_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TrustSet trust_set = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_trust_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TicketCreate ticket_create = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_ticket_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_ticket_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Transaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Sequence sequence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Payment payment = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signing_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SourceTag source_tag = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.Memo memos = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_memos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.Signer signers = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_signers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.AccountSet account_set = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.AccountDelete account_delete = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CheckCancel check_cancel = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_cancel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CheckCash check_cash = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_cash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CheckCreate check_create = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DepositPreauth deposit_preauth = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deposit_preauth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.EscrowCancel escrow_cancel = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_escrow_cancel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.EscrowCreate escrow_create = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_escrow_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.EscrowFinish escrow_finish = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_escrow_finish()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OfferCancel offer_cancel = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offer_cancel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OfferCreate offer_create = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offer_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PaymentChannelClaim payment_channel_claim = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_payment_channel_claim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PaymentChannelCreate payment_channel_create = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_payment_channel_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PaymentChannelFund payment_channel_fund = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_payment_channel_fund()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SetRegularKey set_regular_key = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_set_regular_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SignerListSet signer_list_set = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signer_list_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TrustSet trust_set = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trust_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TicketCreate ticket_create = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Transaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
  if (this->has_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::fee(this), output);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 3;
  if (this->has_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::sequence(this), output);
  }

  // .org.xrpl.rpc.v1.Payment payment = 4;
  if (has_payment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::payment(this), output);
  }

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 5;
  if (this->has_signing_public_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::signing_public_key(this), output);
  }

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 6;
  if (this->has_transaction_signature()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::transaction_signature(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 7;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 8;
  if (this->has_last_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::last_ledger_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 9;
  if (this->has_source_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::source_tag(this), output);
  }

  // repeated .org.xrpl.rpc.v1.Memo memos = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->memos(static_cast<int>(i)),
      output);
  }

  // repeated .org.xrpl.rpc.v1.Signer signers = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->signers(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 12;
  if (this->has_account_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::account_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.AccountSet account_set = 13;
  if (has_account_set()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::account_set(this), output);
  }

  // .org.xrpl.rpc.v1.AccountDelete account_delete = 14;
  if (has_account_delete()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::account_delete(this), output);
  }

  // .org.xrpl.rpc.v1.CheckCancel check_cancel = 15;
  if (has_check_cancel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::check_cancel(this), output);
  }

  // .org.xrpl.rpc.v1.CheckCash check_cash = 16;
  if (has_check_cash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::check_cash(this), output);
  }

  // .org.xrpl.rpc.v1.CheckCreate check_create = 17;
  if (has_check_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::check_create(this), output);
  }

  // .org.xrpl.rpc.v1.DepositPreauth deposit_preauth = 18;
  if (has_deposit_preauth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::deposit_preauth(this), output);
  }

  // .org.xrpl.rpc.v1.EscrowCancel escrow_cancel = 19;
  if (has_escrow_cancel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::escrow_cancel(this), output);
  }

  // .org.xrpl.rpc.v1.EscrowCreate escrow_create = 20;
  if (has_escrow_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::escrow_create(this), output);
  }

  // .org.xrpl.rpc.v1.EscrowFinish escrow_finish = 21;
  if (has_escrow_finish()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::escrow_finish(this), output);
  }

  // .org.xrpl.rpc.v1.OfferCancel offer_cancel = 22;
  if (has_offer_cancel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::offer_cancel(this), output);
  }

  // .org.xrpl.rpc.v1.OfferCreate offer_create = 23;
  if (has_offer_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::offer_create(this), output);
  }

  // .org.xrpl.rpc.v1.PaymentChannelClaim payment_channel_claim = 24;
  if (has_payment_channel_claim()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::payment_channel_claim(this), output);
  }

  // .org.xrpl.rpc.v1.PaymentChannelCreate payment_channel_create = 25;
  if (has_payment_channel_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::payment_channel_create(this), output);
  }

  // .org.xrpl.rpc.v1.PaymentChannelFund payment_channel_fund = 26;
  if (has_payment_channel_fund()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, HasBitSetters::payment_channel_fund(this), output);
  }

  // .org.xrpl.rpc.v1.SetRegularKey set_regular_key = 27;
  if (has_set_regular_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, HasBitSetters::set_regular_key(this), output);
  }

  // .org.xrpl.rpc.v1.SignerListSet signer_list_set = 28;
  if (has_signer_list_set()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, HasBitSetters::signer_list_set(this), output);
  }

  // .org.xrpl.rpc.v1.TrustSet trust_set = 29;
  if (has_trust_set()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, HasBitSetters::trust_set(this), output);
  }

  // .org.xrpl.rpc.v1.TicketCreate ticket_create = 30;
  if (has_ticket_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, HasBitSetters::ticket_create(this), output);
  }

  // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 31;
  if (this->has_ticket_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, HasBitSetters::ticket_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Transaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
  if (this->has_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::fee(this), target);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 3;
  if (this->has_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::sequence(this), target);
  }

  // .org.xrpl.rpc.v1.Payment payment = 4;
  if (has_payment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::payment(this), target);
  }

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 5;
  if (this->has_signing_public_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::signing_public_key(this), target);
  }

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 6;
  if (this->has_transaction_signature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::transaction_signature(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 7;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 8;
  if (this->has_last_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::last_ledger_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 9;
  if (this->has_source_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::source_tag(this), target);
  }

  // repeated .org.xrpl.rpc.v1.Memo memos = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->memos(static_cast<int>(i)), target);
  }

  // repeated .org.xrpl.rpc.v1.Signer signers = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->signers(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 12;
  if (this->has_account_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::account_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.AccountSet account_set = 13;
  if (has_account_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::account_set(this), target);
  }

  // .org.xrpl.rpc.v1.AccountDelete account_delete = 14;
  if (has_account_delete()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::account_delete(this), target);
  }

  // .org.xrpl.rpc.v1.CheckCancel check_cancel = 15;
  if (has_check_cancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::check_cancel(this), target);
  }

  // .org.xrpl.rpc.v1.CheckCash check_cash = 16;
  if (has_check_cash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::check_cash(this), target);
  }

  // .org.xrpl.rpc.v1.CheckCreate check_create = 17;
  if (has_check_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::check_create(this), target);
  }

  // .org.xrpl.rpc.v1.DepositPreauth deposit_preauth = 18;
  if (has_deposit_preauth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::deposit_preauth(this), target);
  }

  // .org.xrpl.rpc.v1.EscrowCancel escrow_cancel = 19;
  if (has_escrow_cancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::escrow_cancel(this), target);
  }

  // .org.xrpl.rpc.v1.EscrowCreate escrow_create = 20;
  if (has_escrow_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::escrow_create(this), target);
  }

  // .org.xrpl.rpc.v1.EscrowFinish escrow_finish = 21;
  if (has_escrow_finish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::escrow_finish(this), target);
  }

  // .org.xrpl.rpc.v1.OfferCancel offer_cancel = 22;
  if (has_offer_cancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::offer_cancel(this), target);
  }

  // .org.xrpl.rpc.v1.OfferCreate offer_create = 23;
  if (has_offer_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::offer_create(this), target);
  }

  // .org.xrpl.rpc.v1.PaymentChannelClaim payment_channel_claim = 24;
  if (has_payment_channel_claim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::payment_channel_claim(this), target);
  }

  // .org.xrpl.rpc.v1.PaymentChannelCreate payment_channel_create = 25;
  if (has_payment_channel_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::payment_channel_create(this), target);
  }

  // .org.xrpl.rpc.v1.PaymentChannelFund payment_channel_fund = 26;
  if (has_payment_channel_fund()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, HasBitSetters::payment_channel_fund(this), target);
  }

  // .org.xrpl.rpc.v1.SetRegularKey set_regular_key = 27;
  if (has_set_regular_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, HasBitSetters::set_regular_key(this), target);
  }

  // .org.xrpl.rpc.v1.SignerListSet signer_list_set = 28;
  if (has_signer_list_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, HasBitSetters::signer_list_set(this), target);
  }

  // .org.xrpl.rpc.v1.TrustSet trust_set = 29;
  if (has_trust_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, HasBitSetters::trust_set(this), target);
  }

  // .org.xrpl.rpc.v1.TicketCreate ticket_create = 30;
  if (has_ticket_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, HasBitSetters::ticket_create(this), target);
  }

  // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 31;
  if (this->has_ticket_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, HasBitSetters::ticket_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Transaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Memo memos = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->memos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->memos(static_cast<int>(i)));
    }
  }

  // repeated .org.xrpl.rpc.v1.Signer signers = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->signers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->signers(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.XRPDropsAmount fee = 2;
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 3;
  if (this->has_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequence_);
  }

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 5;
  if (this->has_signing_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signing_public_key_);
  }

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 6;
  if (this->has_transaction_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_signature_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 7;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 8;
  if (this->has_last_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 9;
  if (this->has_source_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_tag_);
  }

  // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 12;
  if (this->has_account_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_transaction_id_);
  }

  // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 31;
  if (this->has_ticket_sequence()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_sequence_);
  }

  switch (transaction_data_case()) {
    // .org.xrpl.rpc.v1.Payment payment = 4;
    case kPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.payment_);
      break;
    }
    // .org.xrpl.rpc.v1.AccountSet account_set = 13;
    case kAccountSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.account_set_);
      break;
    }
    // .org.xrpl.rpc.v1.AccountDelete account_delete = 14;
    case kAccountDelete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.account_delete_);
      break;
    }
    // .org.xrpl.rpc.v1.CheckCancel check_cancel = 15;
    case kCheckCancel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.check_cancel_);
      break;
    }
    // .org.xrpl.rpc.v1.CheckCash check_cash = 16;
    case kCheckCash: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.check_cash_);
      break;
    }
    // .org.xrpl.rpc.v1.CheckCreate check_create = 17;
    case kCheckCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.check_create_);
      break;
    }
    // .org.xrpl.rpc.v1.DepositPreauth deposit_preauth = 18;
    case kDepositPreauth: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.deposit_preauth_);
      break;
    }
    // .org.xrpl.rpc.v1.EscrowCancel escrow_cancel = 19;
    case kEscrowCancel: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.escrow_cancel_);
      break;
    }
    // .org.xrpl.rpc.v1.EscrowCreate escrow_create = 20;
    case kEscrowCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.escrow_create_);
      break;
    }
    // .org.xrpl.rpc.v1.EscrowFinish escrow_finish = 21;
    case kEscrowFinish: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.escrow_finish_);
      break;
    }
    // .org.xrpl.rpc.v1.OfferCancel offer_cancel = 22;
    case kOfferCancel: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.offer_cancel_);
      break;
    }
    // .org.xrpl.rpc.v1.OfferCreate offer_create = 23;
    case kOfferCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.offer_create_);
      break;
    }
    // .org.xrpl.rpc.v1.PaymentChannelClaim payment_channel_claim = 24;
    case kPaymentChannelClaim: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.payment_channel_claim_);
      break;
    }
    // .org.xrpl.rpc.v1.PaymentChannelCreate payment_channel_create = 25;
    case kPaymentChannelCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.payment_channel_create_);
      break;
    }
    // .org.xrpl.rpc.v1.PaymentChannelFund payment_channel_fund = 26;
    case kPaymentChannelFund: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.payment_channel_fund_);
      break;
    }
    // .org.xrpl.rpc.v1.SetRegularKey set_regular_key = 27;
    case kSetRegularKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.set_regular_key_);
      break;
    }
    // .org.xrpl.rpc.v1.SignerListSet signer_list_set = 28;
    case kSignerListSet: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.signer_list_set_);
      break;
    }
    // .org.xrpl.rpc.v1.TicketCreate ticket_create = 30;
    case kTicketCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.ticket_create_);
      break;
    }
    // .org.xrpl.rpc.v1.TrustSet trust_set = 29;
    case kTrustSet: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_data_.trust_set_);
      break;
    }
    case TRANSACTION_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memos_.MergeFrom(from.memos_);
  signers_.MergeFrom(from.signers_);
  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_fee()) {
    mutable_fee()->::org::xrpl::rpc::v1::XRPDropsAmount::MergeFrom(from.fee());
  }
  if (from.has_sequence()) {
    mutable_sequence()->::org::xrpl::rpc::v1::Sequence::MergeFrom(from.sequence());
  }
  if (from.has_signing_public_key()) {
    mutable_signing_public_key()->::org::xrpl::rpc::v1::SigningPublicKey::MergeFrom(from.signing_public_key());
  }
  if (from.has_transaction_signature()) {
    mutable_transaction_signature()->::org::xrpl::rpc::v1::TransactionSignature::MergeFrom(from.transaction_signature());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_last_ledger_sequence()) {
    mutable_last_ledger_sequence()->::org::xrpl::rpc::v1::LastLedgerSequence::MergeFrom(from.last_ledger_sequence());
  }
  if (from.has_source_tag()) {
    mutable_source_tag()->::org::xrpl::rpc::v1::SourceTag::MergeFrom(from.source_tag());
  }
  if (from.has_account_transaction_id()) {
    mutable_account_transaction_id()->::org::xrpl::rpc::v1::AccountTransactionID::MergeFrom(from.account_transaction_id());
  }
  if (from.has_ticket_sequence()) {
    mutable_ticket_sequence()->::org::xrpl::rpc::v1::TicketSequence::MergeFrom(from.ticket_sequence());
  }
  switch (from.transaction_data_case()) {
    case kPayment: {
      mutable_payment()->::org::xrpl::rpc::v1::Payment::MergeFrom(from.payment());
      break;
    }
    case kAccountSet: {
      mutable_account_set()->::org::xrpl::rpc::v1::AccountSet::MergeFrom(from.account_set());
      break;
    }
    case kAccountDelete: {
      mutable_account_delete()->::org::xrpl::rpc::v1::AccountDelete::MergeFrom(from.account_delete());
      break;
    }
    case kCheckCancel: {
      mutable_check_cancel()->::org::xrpl::rpc::v1::CheckCancel::MergeFrom(from.check_cancel());
      break;
    }
    case kCheckCash: {
      mutable_check_cash()->::org::xrpl::rpc::v1::CheckCash::MergeFrom(from.check_cash());
      break;
    }
    case kCheckCreate: {
      mutable_check_create()->::org::xrpl::rpc::v1::CheckCreate::MergeFrom(from.check_create());
      break;
    }
    case kDepositPreauth: {
      mutable_deposit_preauth()->::org::xrpl::rpc::v1::DepositPreauth::MergeFrom(from.deposit_preauth());
      break;
    }
    case kEscrowCancel: {
      mutable_escrow_cancel()->::org::xrpl::rpc::v1::EscrowCancel::MergeFrom(from.escrow_cancel());
      break;
    }
    case kEscrowCreate: {
      mutable_escrow_create()->::org::xrpl::rpc::v1::EscrowCreate::MergeFrom(from.escrow_create());
      break;
    }
    case kEscrowFinish: {
      mutable_escrow_finish()->::org::xrpl::rpc::v1::EscrowFinish::MergeFrom(from.escrow_finish());
      break;
    }
    case kOfferCancel: {
      mutable_offer_cancel()->::org::xrpl::rpc::v1::OfferCancel::MergeFrom(from.offer_cancel());
      break;
    }
    case kOfferCreate: {
      mutable_offer_create()->::org::xrpl::rpc::v1::OfferCreate::MergeFrom(from.offer_create());
      break;
    }
    case kPaymentChannelClaim: {
      mutable_payment_channel_claim()->::org::xrpl::rpc::v1::PaymentChannelClaim::MergeFrom(from.payment_channel_claim());
      break;
    }
    case kPaymentChannelCreate: {
      mutable_payment_channel_create()->::org::xrpl::rpc::v1::PaymentChannelCreate::MergeFrom(from.payment_channel_create());
      break;
    }
    case kPaymentChannelFund: {
      mutable_payment_channel_fund()->::org::xrpl::rpc::v1::PaymentChannelFund::MergeFrom(from.payment_channel_fund());
      break;
    }
    case kSetRegularKey: {
      mutable_set_regular_key()->::org::xrpl::rpc::v1::SetRegularKey::MergeFrom(from.set_regular_key());
      break;
    }
    case kSignerListSet: {
      mutable_signer_list_set()->::org::xrpl::rpc::v1::SignerListSet::MergeFrom(from.signer_list_set());
      break;
    }
    case kTicketCreate: {
      mutable_ticket_create()->::org::xrpl::rpc::v1::TicketCreate::MergeFrom(from.ticket_create());
      break;
    }
    case kTrustSet: {
      mutable_trust_set()->::org::xrpl::rpc::v1::TrustSet::MergeFrom(from.trust_set());
      break;
    }
    case TRANSACTION_DATA_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&memos_)->InternalSwap(CastToBase(&other->memos_));
  CastToBase(&signers_)->InternalSwap(CastToBase(&other->signers_));
  swap(account_, other->account_);
  swap(fee_, other->fee_);
  swap(sequence_, other->sequence_);
  swap(signing_public_key_, other->signing_public_key_);
  swap(transaction_signature_, other->transaction_signature_);
  swap(flags_, other->flags_);
  swap(last_ledger_sequence_, other->last_ledger_sequence_);
  swap(source_tag_, other->source_tag_);
  swap(account_transaction_id_, other->account_transaction_id_);
  swap(ticket_sequence_, other->ticket_sequence_);
  swap(transaction_data_, other->transaction_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Memo::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Memo_default_instance_._instance.get_mutable()->memo_data_ = const_cast< ::org::xrpl::rpc::v1::MemoData*>(
      ::org::xrpl::rpc::v1::MemoData::internal_default_instance());
  ::org::xrpl::rpc::v1::_Memo_default_instance_._instance.get_mutable()->memo_format_ = const_cast< ::org::xrpl::rpc::v1::MemoFormat*>(
      ::org::xrpl::rpc::v1::MemoFormat::internal_default_instance());
  ::org::xrpl::rpc::v1::_Memo_default_instance_._instance.get_mutable()->memo_type_ = const_cast< ::org::xrpl::rpc::v1::MemoType*>(
      ::org::xrpl::rpc::v1::MemoType::internal_default_instance());
}
class Memo::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::MemoData& memo_data(const Memo* msg);
  static const ::org::xrpl::rpc::v1::MemoFormat& memo_format(const Memo* msg);
  static const ::org::xrpl::rpc::v1::MemoType& memo_type(const Memo* msg);
};

const ::org::xrpl::rpc::v1::MemoData&
Memo::HasBitSetters::memo_data(const Memo* msg) {
  return *msg->memo_data_;
}
const ::org::xrpl::rpc::v1::MemoFormat&
Memo::HasBitSetters::memo_format(const Memo* msg) {
  return *msg->memo_format_;
}
const ::org::xrpl::rpc::v1::MemoType&
Memo::HasBitSetters::memo_type(const Memo* msg) {
  return *msg->memo_type_;
}
void Memo::clear_memo_data() {
  if (GetArenaNoVirtual() == nullptr && memo_data_ != nullptr) {
    delete memo_data_;
  }
  memo_data_ = nullptr;
}
void Memo::clear_memo_format() {
  if (GetArenaNoVirtual() == nullptr && memo_format_ != nullptr) {
    delete memo_format_;
  }
  memo_format_ = nullptr;
}
void Memo::clear_memo_type() {
  if (GetArenaNoVirtual() == nullptr && memo_type_ != nullptr) {
    delete memo_type_;
  }
  memo_type_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memo::kMemoDataFieldNumber;
const int Memo::kMemoFormatFieldNumber;
const int Memo::kMemoTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memo::Memo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Memo)
}
Memo::Memo(const Memo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_memo_data()) {
    memo_data_ = new ::org::xrpl::rpc::v1::MemoData(*from.memo_data_);
  } else {
    memo_data_ = nullptr;
  }
  if (from.has_memo_format()) {
    memo_format_ = new ::org::xrpl::rpc::v1::MemoFormat(*from.memo_format_);
  } else {
    memo_format_ = nullptr;
  }
  if (from.has_memo_type()) {
    memo_type_ = new ::org::xrpl::rpc::v1::MemoType(*from.memo_type_);
  } else {
    memo_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Memo)
}

void Memo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&memo_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memo_type_) -
      reinterpret_cast<char*>(&memo_data_)) + sizeof(memo_type_));
}

Memo::~Memo() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Memo)
  SharedDtor();
}

void Memo::SharedDtor() {
  if (this != internal_default_instance()) delete memo_data_;
  if (this != internal_default_instance()) delete memo_format_;
  if (this != internal_default_instance()) delete memo_type_;
}

void Memo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Memo& Memo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Memo_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Memo::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Memo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && memo_data_ != nullptr) {
    delete memo_data_;
  }
  memo_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && memo_format_ != nullptr) {
    delete memo_format_;
  }
  memo_format_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && memo_type_ != nullptr) {
    delete memo_type_;
  }
  memo_type_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Memo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.MemoData memo_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_memo_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.MemoFormat memo_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_memo_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.MemoType memo_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_memo_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Memo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Memo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.MemoData memo_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memo_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.MemoFormat memo_format = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memo_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.MemoType memo_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memo_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Memo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Memo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Memo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Memo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.MemoData memo_data = 1;
  if (this->has_memo_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::memo_data(this), output);
  }

  // .org.xrpl.rpc.v1.MemoFormat memo_format = 2;
  if (this->has_memo_format()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::memo_format(this), output);
  }

  // .org.xrpl.rpc.v1.MemoType memo_type = 3;
  if (this->has_memo_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::memo_type(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Memo)
}

::PROTOBUF_NAMESPACE_ID::uint8* Memo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Memo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.MemoData memo_data = 1;
  if (this->has_memo_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::memo_data(this), target);
  }

  // .org.xrpl.rpc.v1.MemoFormat memo_format = 2;
  if (this->has_memo_format()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::memo_format(this), target);
  }

  // .org.xrpl.rpc.v1.MemoType memo_type = 3;
  if (this->has_memo_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::memo_type(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Memo)
  return target;
}

size_t Memo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Memo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.MemoData memo_data = 1;
  if (this->has_memo_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memo_data_);
  }

  // .org.xrpl.rpc.v1.MemoFormat memo_format = 2;
  if (this->has_memo_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memo_format_);
  }

  // .org.xrpl.rpc.v1.MemoType memo_type = 3;
  if (this->has_memo_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memo_type_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Memo)
  GOOGLE_DCHECK_NE(&from, this);
  const Memo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Memo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Memo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Memo)
    MergeFrom(*source);
  }
}

void Memo::MergeFrom(const Memo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Memo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_memo_data()) {
    mutable_memo_data()->::org::xrpl::rpc::v1::MemoData::MergeFrom(from.memo_data());
  }
  if (from.has_memo_format()) {
    mutable_memo_format()->::org::xrpl::rpc::v1::MemoFormat::MergeFrom(from.memo_format());
  }
  if (from.has_memo_type()) {
    mutable_memo_type()->::org::xrpl::rpc::v1::MemoType::MergeFrom(from.memo_type());
  }
}

void Memo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Memo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memo::CopyFrom(const Memo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Memo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memo::IsInitialized() const {
  return true;
}

void Memo::Swap(Memo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memo::InternalSwap(Memo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(memo_data_, other->memo_data_);
  swap(memo_format_, other->memo_format_);
  swap(memo_type_, other->memo_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Memo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signer::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Signer_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_Signer_default_instance_._instance.get_mutable()->transaction_signature_ = const_cast< ::org::xrpl::rpc::v1::TransactionSignature*>(
      ::org::xrpl::rpc::v1::TransactionSignature::internal_default_instance());
  ::org::xrpl::rpc::v1::_Signer_default_instance_._instance.get_mutable()->signing_public_key_ = const_cast< ::org::xrpl::rpc::v1::SigningPublicKey*>(
      ::org::xrpl::rpc::v1::SigningPublicKey::internal_default_instance());
}
class Signer::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const Signer* msg);
  static const ::org::xrpl::rpc::v1::TransactionSignature& transaction_signature(const Signer* msg);
  static const ::org::xrpl::rpc::v1::SigningPublicKey& signing_public_key(const Signer* msg);
};

const ::org::xrpl::rpc::v1::Account&
Signer::HasBitSetters::account(const Signer* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::TransactionSignature&
Signer::HasBitSetters::transaction_signature(const Signer* msg) {
  return *msg->transaction_signature_;
}
const ::org::xrpl::rpc::v1::SigningPublicKey&
Signer::HasBitSetters::signing_public_key(const Signer* msg) {
  return *msg->signing_public_key_;
}
void Signer::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void Signer::clear_transaction_signature() {
  if (GetArenaNoVirtual() == nullptr && transaction_signature_ != nullptr) {
    delete transaction_signature_;
  }
  transaction_signature_ = nullptr;
}
void Signer::clear_signing_public_key() {
  if (GetArenaNoVirtual() == nullptr && signing_public_key_ != nullptr) {
    delete signing_public_key_;
  }
  signing_public_key_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signer::kAccountFieldNumber;
const int Signer::kTransactionSignatureFieldNumber;
const int Signer::kSigningPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signer::Signer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Signer)
}
Signer::Signer(const Signer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_transaction_signature()) {
    transaction_signature_ = new ::org::xrpl::rpc::v1::TransactionSignature(*from.transaction_signature_);
  } else {
    transaction_signature_ = nullptr;
  }
  if (from.has_signing_public_key()) {
    signing_public_key_ = new ::org::xrpl::rpc::v1::SigningPublicKey(*from.signing_public_key_);
  } else {
    signing_public_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Signer)
}

void Signer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signing_public_key_) -
      reinterpret_cast<char*>(&account_)) + sizeof(signing_public_key_));
}

Signer::~Signer() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Signer)
  SharedDtor();
}

void Signer::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete transaction_signature_;
  if (this != internal_default_instance()) delete signing_public_key_;
}

void Signer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signer& Signer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signer_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Signer::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Signer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transaction_signature_ != nullptr) {
    delete transaction_signature_;
  }
  transaction_signature_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signing_public_key_ != nullptr) {
    delete signing_public_key_;
  }
  signing_public_key_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_transaction_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_signing_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Signer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signing_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Signer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Signer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Signer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 2;
  if (this->has_transaction_signature()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::transaction_signature(this), output);
  }

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 3;
  if (this->has_signing_public_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::signing_public_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Signer)
}

::PROTOBUF_NAMESPACE_ID::uint8* Signer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Signer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 2;
  if (this->has_transaction_signature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::transaction_signature(this), target);
  }

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 3;
  if (this->has_signing_public_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::signing_public_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Signer)
  return target;
}

size_t Signer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Signer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.TransactionSignature transaction_signature = 2;
  if (this->has_transaction_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_signature_);
  }

  // .org.xrpl.rpc.v1.SigningPublicKey signing_public_key = 3;
  if (this->has_signing_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signing_public_key_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Signer)
  GOOGLE_DCHECK_NE(&from, this);
  const Signer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Signer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Signer)
    MergeFrom(*source);
  }
}

void Signer::MergeFrom(const Signer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Signer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_transaction_signature()) {
    mutable_transaction_signature()->::org::xrpl::rpc::v1::TransactionSignature::MergeFrom(from.transaction_signature());
  }
  if (from.has_signing_public_key()) {
    mutable_signing_public_key()->::org::xrpl::rpc::v1::SigningPublicKey::MergeFrom(from.signing_public_key());
  }
}

void Signer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Signer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signer::CopyFrom(const Signer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Signer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signer::IsInitialized() const {
  return true;
}

void Signer::Swap(Signer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signer::InternalSwap(Signer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(transaction_signature_, other->transaction_signature_);
  swap(signing_public_key_, other->signing_public_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountSet::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_AccountSet_default_instance_._instance.get_mutable()->clear_flag_ = const_cast< ::org::xrpl::rpc::v1::ClearFlag*>(
      ::org::xrpl::rpc::v1::ClearFlag::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountSet_default_instance_._instance.get_mutable()->domain_ = const_cast< ::org::xrpl::rpc::v1::Domain*>(
      ::org::xrpl::rpc::v1::Domain::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountSet_default_instance_._instance.get_mutable()->email_hash_ = const_cast< ::org::xrpl::rpc::v1::EmailHash*>(
      ::org::xrpl::rpc::v1::EmailHash::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountSet_default_instance_._instance.get_mutable()->message_key_ = const_cast< ::org::xrpl::rpc::v1::MessageKey*>(
      ::org::xrpl::rpc::v1::MessageKey::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountSet_default_instance_._instance.get_mutable()->set_flag_ = const_cast< ::org::xrpl::rpc::v1::SetFlag*>(
      ::org::xrpl::rpc::v1::SetFlag::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountSet_default_instance_._instance.get_mutable()->transfer_rate_ = const_cast< ::org::xrpl::rpc::v1::TransferRate*>(
      ::org::xrpl::rpc::v1::TransferRate::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountSet_default_instance_._instance.get_mutable()->tick_size_ = const_cast< ::org::xrpl::rpc::v1::TickSize*>(
      ::org::xrpl::rpc::v1::TickSize::internal_default_instance());
}
class AccountSet::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::ClearFlag& clear_flag(const AccountSet* msg);
  static const ::org::xrpl::rpc::v1::Domain& domain(const AccountSet* msg);
  static const ::org::xrpl::rpc::v1::EmailHash& email_hash(const AccountSet* msg);
  static const ::org::xrpl::rpc::v1::MessageKey& message_key(const AccountSet* msg);
  static const ::org::xrpl::rpc::v1::SetFlag& set_flag(const AccountSet* msg);
  static const ::org::xrpl::rpc::v1::TransferRate& transfer_rate(const AccountSet* msg);
  static const ::org::xrpl::rpc::v1::TickSize& tick_size(const AccountSet* msg);
};

const ::org::xrpl::rpc::v1::ClearFlag&
AccountSet::HasBitSetters::clear_flag(const AccountSet* msg) {
  return *msg->clear_flag_;
}
const ::org::xrpl::rpc::v1::Domain&
AccountSet::HasBitSetters::domain(const AccountSet* msg) {
  return *msg->domain_;
}
const ::org::xrpl::rpc::v1::EmailHash&
AccountSet::HasBitSetters::email_hash(const AccountSet* msg) {
  return *msg->email_hash_;
}
const ::org::xrpl::rpc::v1::MessageKey&
AccountSet::HasBitSetters::message_key(const AccountSet* msg) {
  return *msg->message_key_;
}
const ::org::xrpl::rpc::v1::SetFlag&
AccountSet::HasBitSetters::set_flag(const AccountSet* msg) {
  return *msg->set_flag_;
}
const ::org::xrpl::rpc::v1::TransferRate&
AccountSet::HasBitSetters::transfer_rate(const AccountSet* msg) {
  return *msg->transfer_rate_;
}
const ::org::xrpl::rpc::v1::TickSize&
AccountSet::HasBitSetters::tick_size(const AccountSet* msg) {
  return *msg->tick_size_;
}
void AccountSet::clear_clear_flag() {
  if (GetArenaNoVirtual() == nullptr && clear_flag_ != nullptr) {
    delete clear_flag_;
  }
  clear_flag_ = nullptr;
}
void AccountSet::clear_domain() {
  if (GetArenaNoVirtual() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
}
void AccountSet::clear_email_hash() {
  if (GetArenaNoVirtual() == nullptr && email_hash_ != nullptr) {
    delete email_hash_;
  }
  email_hash_ = nullptr;
}
void AccountSet::clear_message_key() {
  if (GetArenaNoVirtual() == nullptr && message_key_ != nullptr) {
    delete message_key_;
  }
  message_key_ = nullptr;
}
void AccountSet::clear_set_flag() {
  if (GetArenaNoVirtual() == nullptr && set_flag_ != nullptr) {
    delete set_flag_;
  }
  set_flag_ = nullptr;
}
void AccountSet::clear_transfer_rate() {
  if (GetArenaNoVirtual() == nullptr && transfer_rate_ != nullptr) {
    delete transfer_rate_;
  }
  transfer_rate_ = nullptr;
}
void AccountSet::clear_tick_size() {
  if (GetArenaNoVirtual() == nullptr && tick_size_ != nullptr) {
    delete tick_size_;
  }
  tick_size_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountSet::kClearFlagFieldNumber;
const int AccountSet::kDomainFieldNumber;
const int AccountSet::kEmailHashFieldNumber;
const int AccountSet::kMessageKeyFieldNumber;
const int AccountSet::kSetFlagFieldNumber;
const int AccountSet::kTransferRateFieldNumber;
const int AccountSet::kTickSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountSet::AccountSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.AccountSet)
}
AccountSet::AccountSet(const AccountSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clear_flag()) {
    clear_flag_ = new ::org::xrpl::rpc::v1::ClearFlag(*from.clear_flag_);
  } else {
    clear_flag_ = nullptr;
  }
  if (from.has_domain()) {
    domain_ = new ::org::xrpl::rpc::v1::Domain(*from.domain_);
  } else {
    domain_ = nullptr;
  }
  if (from.has_email_hash()) {
    email_hash_ = new ::org::xrpl::rpc::v1::EmailHash(*from.email_hash_);
  } else {
    email_hash_ = nullptr;
  }
  if (from.has_message_key()) {
    message_key_ = new ::org::xrpl::rpc::v1::MessageKey(*from.message_key_);
  } else {
    message_key_ = nullptr;
  }
  if (from.has_set_flag()) {
    set_flag_ = new ::org::xrpl::rpc::v1::SetFlag(*from.set_flag_);
  } else {
    set_flag_ = nullptr;
  }
  if (from.has_transfer_rate()) {
    transfer_rate_ = new ::org::xrpl::rpc::v1::TransferRate(*from.transfer_rate_);
  } else {
    transfer_rate_ = nullptr;
  }
  if (from.has_tick_size()) {
    tick_size_ = new ::org::xrpl::rpc::v1::TickSize(*from.tick_size_);
  } else {
    tick_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.AccountSet)
}

void AccountSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&clear_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_size_) -
      reinterpret_cast<char*>(&clear_flag_)) + sizeof(tick_size_));
}

AccountSet::~AccountSet() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.AccountSet)
  SharedDtor();
}

void AccountSet::SharedDtor() {
  if (this != internal_default_instance()) delete clear_flag_;
  if (this != internal_default_instance()) delete domain_;
  if (this != internal_default_instance()) delete email_hash_;
  if (this != internal_default_instance()) delete message_key_;
  if (this != internal_default_instance()) delete set_flag_;
  if (this != internal_default_instance()) delete transfer_rate_;
  if (this != internal_default_instance()) delete tick_size_;
}

void AccountSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountSet& AccountSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void AccountSet::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.AccountSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && clear_flag_ != nullptr) {
    delete clear_flag_;
  }
  clear_flag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && email_hash_ != nullptr) {
    delete email_hash_;
  }
  email_hash_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && message_key_ != nullptr) {
    delete message_key_;
  }
  message_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && set_flag_ != nullptr) {
    delete set_flag_;
  }
  set_flag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transfer_rate_ != nullptr) {
    delete transfer_rate_;
  }
  transfer_rate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tick_size_ != nullptr) {
    delete tick_size_;
  }
  tick_size_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.ClearFlag clear_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_clear_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Domain domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_domain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.EmailHash email_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_email_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.MessageKey message_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_message_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SetFlag set_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_set_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransferRate transfer_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_transfer_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TickSize tick_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_tick_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountSet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.AccountSet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.ClearFlag clear_flag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_flag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Domain domain = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.EmailHash email_hash = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_email_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.MessageKey message_key = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SetFlag set_flag = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_set_flag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TransferRate transfer_rate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TickSize tick_size = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tick_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.AccountSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.AccountSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountSet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.AccountSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.ClearFlag clear_flag = 1;
  if (this->has_clear_flag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::clear_flag(this), output);
  }

  // .org.xrpl.rpc.v1.Domain domain = 2;
  if (this->has_domain()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::domain(this), output);
  }

  // .org.xrpl.rpc.v1.EmailHash email_hash = 3;
  if (this->has_email_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::email_hash(this), output);
  }

  // .org.xrpl.rpc.v1.MessageKey message_key = 4;
  if (this->has_message_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::message_key(this), output);
  }

  // .org.xrpl.rpc.v1.SetFlag set_flag = 5;
  if (this->has_set_flag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::set_flag(this), output);
  }

  // .org.xrpl.rpc.v1.TransferRate transfer_rate = 6;
  if (this->has_transfer_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::transfer_rate(this), output);
  }

  // .org.xrpl.rpc.v1.TickSize tick_size = 7;
  if (this->has_tick_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::tick_size(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.AccountSet)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountSet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.AccountSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.ClearFlag clear_flag = 1;
  if (this->has_clear_flag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::clear_flag(this), target);
  }

  // .org.xrpl.rpc.v1.Domain domain = 2;
  if (this->has_domain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::domain(this), target);
  }

  // .org.xrpl.rpc.v1.EmailHash email_hash = 3;
  if (this->has_email_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::email_hash(this), target);
  }

  // .org.xrpl.rpc.v1.MessageKey message_key = 4;
  if (this->has_message_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::message_key(this), target);
  }

  // .org.xrpl.rpc.v1.SetFlag set_flag = 5;
  if (this->has_set_flag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::set_flag(this), target);
  }

  // .org.xrpl.rpc.v1.TransferRate transfer_rate = 6;
  if (this->has_transfer_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::transfer_rate(this), target);
  }

  // .org.xrpl.rpc.v1.TickSize tick_size = 7;
  if (this->has_tick_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::tick_size(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.AccountSet)
  return target;
}

size_t AccountSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.AccountSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.ClearFlag clear_flag = 1;
  if (this->has_clear_flag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_flag_);
  }

  // .org.xrpl.rpc.v1.Domain domain = 2;
  if (this->has_domain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *domain_);
  }

  // .org.xrpl.rpc.v1.EmailHash email_hash = 3;
  if (this->has_email_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *email_hash_);
  }

  // .org.xrpl.rpc.v1.MessageKey message_key = 4;
  if (this->has_message_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_key_);
  }

  // .org.xrpl.rpc.v1.SetFlag set_flag = 5;
  if (this->has_set_flag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_flag_);
  }

  // .org.xrpl.rpc.v1.TransferRate transfer_rate = 6;
  if (this->has_transfer_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_rate_);
  }

  // .org.xrpl.rpc.v1.TickSize tick_size = 7;
  if (this->has_tick_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_size_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.AccountSet)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.AccountSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.AccountSet)
    MergeFrom(*source);
  }
}

void AccountSet::MergeFrom(const AccountSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.AccountSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clear_flag()) {
    mutable_clear_flag()->::org::xrpl::rpc::v1::ClearFlag::MergeFrom(from.clear_flag());
  }
  if (from.has_domain()) {
    mutable_domain()->::org::xrpl::rpc::v1::Domain::MergeFrom(from.domain());
  }
  if (from.has_email_hash()) {
    mutable_email_hash()->::org::xrpl::rpc::v1::EmailHash::MergeFrom(from.email_hash());
  }
  if (from.has_message_key()) {
    mutable_message_key()->::org::xrpl::rpc::v1::MessageKey::MergeFrom(from.message_key());
  }
  if (from.has_set_flag()) {
    mutable_set_flag()->::org::xrpl::rpc::v1::SetFlag::MergeFrom(from.set_flag());
  }
  if (from.has_transfer_rate()) {
    mutable_transfer_rate()->::org::xrpl::rpc::v1::TransferRate::MergeFrom(from.transfer_rate());
  }
  if (from.has_tick_size()) {
    mutable_tick_size()->::org::xrpl::rpc::v1::TickSize::MergeFrom(from.tick_size());
  }
}

void AccountSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.AccountSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountSet::CopyFrom(const AccountSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.AccountSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSet::IsInitialized() const {
  return true;
}

void AccountSet::Swap(AccountSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountSet::InternalSwap(AccountSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(clear_flag_, other->clear_flag_);
  swap(domain_, other->domain_);
  swap(email_hash_, other->email_hash_);
  swap(message_key_, other->message_key_);
  swap(set_flag_, other->set_flag_);
  swap(transfer_rate_, other->transfer_rate_);
  swap(tick_size_, other->tick_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountDelete::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_AccountDelete_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountDelete_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
}
class AccountDelete::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Destination& destination(const AccountDelete* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const AccountDelete* msg);
};

const ::org::xrpl::rpc::v1::Destination&
AccountDelete::HasBitSetters::destination(const AccountDelete* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
AccountDelete::HasBitSetters::destination_tag(const AccountDelete* msg) {
  return *msg->destination_tag_;
}
void AccountDelete::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void AccountDelete::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountDelete::kDestinationFieldNumber;
const int AccountDelete::kDestinationTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountDelete::AccountDelete()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.AccountDelete)
}
AccountDelete::AccountDelete(const AccountDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.AccountDelete)
}

void AccountDelete::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_tag_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(destination_tag_));
}

AccountDelete::~AccountDelete() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.AccountDelete)
  SharedDtor();
}

void AccountDelete::SharedDtor() {
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete destination_tag_;
}

void AccountDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountDelete& AccountDelete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountDelete_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void AccountDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.AccountDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountDelete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Destination destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountDelete::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.AccountDelete)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Destination destination = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.AccountDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.AccountDelete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountDelete::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.AccountDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Destination destination = 1;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 2;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::destination_tag(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.AccountDelete)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountDelete::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.AccountDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Destination destination = 1;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 2;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::destination_tag(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.AccountDelete)
  return target;
}

size_t AccountDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.AccountDelete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Destination destination = 1;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 2;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountDelete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.AccountDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountDelete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountDelete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.AccountDelete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.AccountDelete)
    MergeFrom(*source);
  }
}

void AccountDelete::MergeFrom(const AccountDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.AccountDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
}

void AccountDelete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.AccountDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDelete::CopyFrom(const AccountDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.AccountDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDelete::IsInitialized() const {
  return true;
}

void AccountDelete::Swap(AccountDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountDelete::InternalSwap(AccountDelete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(destination_, other->destination_);
  swap(destination_tag_, other->destination_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountDelete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckCancel::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_CheckCancel_default_instance_._instance.get_mutable()->check_id_ = const_cast< ::org::xrpl::rpc::v1::CheckID*>(
      ::org::xrpl::rpc::v1::CheckID::internal_default_instance());
}
class CheckCancel::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::CheckID& check_id(const CheckCancel* msg);
};

const ::org::xrpl::rpc::v1::CheckID&
CheckCancel::HasBitSetters::check_id(const CheckCancel* msg) {
  return *msg->check_id_;
}
void CheckCancel::clear_check_id() {
  if (GetArenaNoVirtual() == nullptr && check_id_ != nullptr) {
    delete check_id_;
  }
  check_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckCancel::kCheckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckCancel::CheckCancel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.CheckCancel)
}
CheckCancel::CheckCancel(const CheckCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_check_id()) {
    check_id_ = new ::org::xrpl::rpc::v1::CheckID(*from.check_id_);
  } else {
    check_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.CheckCancel)
}

void CheckCancel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  check_id_ = nullptr;
}

CheckCancel::~CheckCancel() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.CheckCancel)
  SharedDtor();
}

void CheckCancel::SharedDtor() {
  if (this != internal_default_instance()) delete check_id_;
}

void CheckCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckCancel& CheckCancel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void CheckCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.CheckCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && check_id_ != nullptr) {
    delete check_id_;
  }
  check_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.CheckID check_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_check_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckCancel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.CheckCancel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.CheckID check_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.CheckCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.CheckCancel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckCancel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.CheckCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  if (this->has_check_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::check_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.CheckCancel)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckCancel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.CheckCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  if (this->has_check_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::check_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.CheckCancel)
  return target;
}

size_t CheckCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.CheckCancel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  if (this->has_check_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *check_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.CheckCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.CheckCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.CheckCancel)
    MergeFrom(*source);
  }
}

void CheckCancel::MergeFrom(const CheckCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.CheckCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_check_id()) {
    mutable_check_id()->::org::xrpl::rpc::v1::CheckID::MergeFrom(from.check_id());
  }
}

void CheckCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.CheckCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCancel::CopyFrom(const CheckCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.CheckCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCancel::IsInitialized() const {
  return true;
}

void CheckCancel::Swap(CheckCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckCancel::InternalSwap(CheckCancel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(check_id_, other->check_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckCash::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_CheckCash_default_instance_._instance.get_mutable()->check_id_ = const_cast< ::org::xrpl::rpc::v1::CheckID*>(
      ::org::xrpl::rpc::v1::CheckID::internal_default_instance());
  ::org::xrpl::rpc::v1::_CheckCash_default_instance_.amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_CheckCash_default_instance_.deliver_min_ = const_cast< ::org::xrpl::rpc::v1::DeliverMin*>(
      ::org::xrpl::rpc::v1::DeliverMin::internal_default_instance());
}
class CheckCash::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::CheckID& check_id(const CheckCash* msg);
  static const ::org::xrpl::rpc::v1::Amount& amount(const CheckCash* msg);
  static const ::org::xrpl::rpc::v1::DeliverMin& deliver_min(const CheckCash* msg);
};

const ::org::xrpl::rpc::v1::CheckID&
CheckCash::HasBitSetters::check_id(const CheckCash* msg) {
  return *msg->check_id_;
}
const ::org::xrpl::rpc::v1::Amount&
CheckCash::HasBitSetters::amount(const CheckCash* msg) {
  return *msg->amount_oneof_.amount_;
}
const ::org::xrpl::rpc::v1::DeliverMin&
CheckCash::HasBitSetters::deliver_min(const CheckCash* msg) {
  return *msg->amount_oneof_.deliver_min_;
}
void CheckCash::clear_check_id() {
  if (GetArenaNoVirtual() == nullptr && check_id_ != nullptr) {
    delete check_id_;
  }
  check_id_ = nullptr;
}
void CheckCash::set_allocated_amount(::org::xrpl::rpc::v1::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_amount_oneof();
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    set_has_amount();
    amount_oneof_.amount_ = amount;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCash.amount)
}
void CheckCash::clear_amount() {
  if (has_amount()) {
    delete amount_oneof_.amount_;
    clear_has_amount_oneof();
  }
}
void CheckCash::set_allocated_deliver_min(::org::xrpl::rpc::v1::DeliverMin* deliver_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_amount_oneof();
  if (deliver_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deliver_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_min, submessage_arena);
    }
    set_has_deliver_min();
    amount_oneof_.deliver_min_ = deliver_min;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.CheckCash.deliver_min)
}
void CheckCash::clear_deliver_min() {
  if (has_deliver_min()) {
    delete amount_oneof_.deliver_min_;
    clear_has_amount_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckCash::kCheckIdFieldNumber;
const int CheckCash::kAmountFieldNumber;
const int CheckCash::kDeliverMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckCash::CheckCash()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.CheckCash)
}
CheckCash::CheckCash(const CheckCash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_check_id()) {
    check_id_ = new ::org::xrpl::rpc::v1::CheckID(*from.check_id_);
  } else {
    check_id_ = nullptr;
  }
  clear_has_amount_oneof();
  switch (from.amount_oneof_case()) {
    case kAmount: {
      mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
      break;
    }
    case kDeliverMin: {
      mutable_deliver_min()->::org::xrpl::rpc::v1::DeliverMin::MergeFrom(from.deliver_min());
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.CheckCash)
}

void CheckCash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  check_id_ = nullptr;
  clear_has_amount_oneof();
}

CheckCash::~CheckCash() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.CheckCash)
  SharedDtor();
}

void CheckCash::SharedDtor() {
  if (this != internal_default_instance()) delete check_id_;
  if (has_amount_oneof()) {
    clear_amount_oneof();
  }
}

void CheckCash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckCash& CheckCash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckCash_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void CheckCash::clear_amount_oneof() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.CheckCash)
  switch (amount_oneof_case()) {
    case kAmount: {
      delete amount_oneof_.amount_;
      break;
    }
    case kDeliverMin: {
      delete amount_oneof_.deliver_min_;
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AMOUNT_ONEOF_NOT_SET;
}


void CheckCash::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.CheckCash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && check_id_ != nullptr) {
    delete check_id_;
  }
  check_id_ = nullptr;
  clear_amount_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckCash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.CheckID check_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_check_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Amount amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DeliverMin deliver_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_deliver_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckCash::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.CheckCash)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.CheckID check_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Amount amount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DeliverMin deliver_min = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deliver_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.CheckCash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.CheckCash)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckCash::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.CheckCash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  if (this->has_check_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::check_id(this), output);
  }

  // .org.xrpl.rpc.v1.Amount amount = 2;
  if (has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.DeliverMin deliver_min = 3;
  if (has_deliver_min()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::deliver_min(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.CheckCash)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckCash::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.CheckCash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  if (this->has_check_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::check_id(this), target);
  }

  // .org.xrpl.rpc.v1.Amount amount = 2;
  if (has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.DeliverMin deliver_min = 3;
  if (has_deliver_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::deliver_min(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.CheckCash)
  return target;
}

size_t CheckCash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.CheckCash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.CheckID check_id = 1;
  if (this->has_check_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *check_id_);
  }

  switch (amount_oneof_case()) {
    // .org.xrpl.rpc.v1.Amount amount = 2;
    case kAmount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *amount_oneof_.amount_);
      break;
    }
    // .org.xrpl.rpc.v1.DeliverMin deliver_min = 3;
    case kDeliverMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *amount_oneof_.deliver_min_);
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckCash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.CheckCash)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckCash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckCash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.CheckCash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.CheckCash)
    MergeFrom(*source);
  }
}

void CheckCash::MergeFrom(const CheckCash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.CheckCash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_check_id()) {
    mutable_check_id()->::org::xrpl::rpc::v1::CheckID::MergeFrom(from.check_id());
  }
  switch (from.amount_oneof_case()) {
    case kAmount: {
      mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
      break;
    }
    case kDeliverMin: {
      mutable_deliver_min()->::org::xrpl::rpc::v1::DeliverMin::MergeFrom(from.deliver_min());
      break;
    }
    case AMOUNT_ONEOF_NOT_SET: {
      break;
    }
  }
}

void CheckCash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.CheckCash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCash::CopyFrom(const CheckCash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.CheckCash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCash::IsInitialized() const {
  return true;
}

void CheckCash::Swap(CheckCash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckCash::InternalSwap(CheckCash* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(check_id_, other->check_id_);
  swap(amount_oneof_, other->amount_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckCash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckCreate::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_CheckCreate_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_CheckCreate_default_instance_._instance.get_mutable()->send_max_ = const_cast< ::org::xrpl::rpc::v1::SendMax*>(
      ::org::xrpl::rpc::v1::SendMax::internal_default_instance());
  ::org::xrpl::rpc::v1::_CheckCreate_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_CheckCreate_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::org::xrpl::rpc::v1::Expiration*>(
      ::org::xrpl::rpc::v1::Expiration::internal_default_instance());
  ::org::xrpl::rpc::v1::_CheckCreate_default_instance_._instance.get_mutable()->invoice_id_ = const_cast< ::org::xrpl::rpc::v1::InvoiceID*>(
      ::org::xrpl::rpc::v1::InvoiceID::internal_default_instance());
}
class CheckCreate::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Destination& destination(const CheckCreate* msg);
  static const ::org::xrpl::rpc::v1::SendMax& send_max(const CheckCreate* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const CheckCreate* msg);
  static const ::org::xrpl::rpc::v1::Expiration& expiration(const CheckCreate* msg);
  static const ::org::xrpl::rpc::v1::InvoiceID& invoice_id(const CheckCreate* msg);
};

const ::org::xrpl::rpc::v1::Destination&
CheckCreate::HasBitSetters::destination(const CheckCreate* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::SendMax&
CheckCreate::HasBitSetters::send_max(const CheckCreate* msg) {
  return *msg->send_max_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
CheckCreate::HasBitSetters::destination_tag(const CheckCreate* msg) {
  return *msg->destination_tag_;
}
const ::org::xrpl::rpc::v1::Expiration&
CheckCreate::HasBitSetters::expiration(const CheckCreate* msg) {
  return *msg->expiration_;
}
const ::org::xrpl::rpc::v1::InvoiceID&
CheckCreate::HasBitSetters::invoice_id(const CheckCreate* msg) {
  return *msg->invoice_id_;
}
void CheckCreate::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void CheckCreate::clear_send_max() {
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
}
void CheckCreate::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
void CheckCreate::clear_expiration() {
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
void CheckCreate::clear_invoice_id() {
  if (GetArenaNoVirtual() == nullptr && invoice_id_ != nullptr) {
    delete invoice_id_;
  }
  invoice_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckCreate::kDestinationFieldNumber;
const int CheckCreate::kSendMaxFieldNumber;
const int CheckCreate::kDestinationTagFieldNumber;
const int CheckCreate::kExpirationFieldNumber;
const int CheckCreate::kInvoiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckCreate::CheckCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.CheckCreate)
}
CheckCreate::CheckCreate(const CheckCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_send_max()) {
    send_max_ = new ::org::xrpl::rpc::v1::SendMax(*from.send_max_);
  } else {
    send_max_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  if (from.has_expiration()) {
    expiration_ = new ::org::xrpl::rpc::v1::Expiration(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  if (from.has_invoice_id()) {
    invoice_id_ = new ::org::xrpl::rpc::v1::InvoiceID(*from.invoice_id_);
  } else {
    invoice_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.CheckCreate)
}

void CheckCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invoice_id_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(invoice_id_));
}

CheckCreate::~CheckCreate() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.CheckCreate)
  SharedDtor();
}

void CheckCreate::SharedDtor() {
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete send_max_;
  if (this != internal_default_instance()) delete destination_tag_;
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete invoice_id_;
}

void CheckCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckCreate& CheckCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void CheckCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.CheckCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && invoice_id_ != nullptr) {
    delete invoice_id_;
  }
  invoice_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Destination destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SendMax send_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_send_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Expiration expiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_expiration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.InvoiceID invoice_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_invoice_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.CheckCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Destination destination = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SendMax send_max = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Expiration expiration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.InvoiceID invoice_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_invoice_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.CheckCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.CheckCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.CheckCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Destination destination = 1;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 2;
  if (this->has_send_max()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::send_max(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::destination_tag(this), output);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 4;
  if (this->has_expiration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::expiration(this), output);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 5;
  if (this->has_invoice_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::invoice_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.CheckCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.CheckCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Destination destination = 1;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 2;
  if (this->has_send_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::send_max(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::destination_tag(this), target);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 4;
  if (this->has_expiration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::expiration(this), target);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 5;
  if (this->has_invoice_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::invoice_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.CheckCreate)
  return target;
}

size_t CheckCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.CheckCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Destination destination = 1;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 2;
  if (this->has_send_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_max_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 4;
  if (this->has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 5;
  if (this->has_invoice_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.CheckCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.CheckCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.CheckCreate)
    MergeFrom(*source);
  }
}

void CheckCreate::MergeFrom(const CheckCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.CheckCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_send_max()) {
    mutable_send_max()->::org::xrpl::rpc::v1::SendMax::MergeFrom(from.send_max());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::org::xrpl::rpc::v1::Expiration::MergeFrom(from.expiration());
  }
  if (from.has_invoice_id()) {
    mutable_invoice_id()->::org::xrpl::rpc::v1::InvoiceID::MergeFrom(from.invoice_id());
  }
}

void CheckCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.CheckCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCreate::CopyFrom(const CheckCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.CheckCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCreate::IsInitialized() const {
  return true;
}

void CheckCreate::Swap(CheckCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckCreate::InternalSwap(CheckCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(destination_, other->destination_);
  swap(send_max_, other->send_max_);
  swap(destination_tag_, other->destination_tag_);
  swap(expiration_, other->expiration_);
  swap(invoice_id_, other->invoice_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepositPreauth::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_DepositPreauth_default_instance_.authorize_ = const_cast< ::org::xrpl::rpc::v1::Authorize*>(
      ::org::xrpl::rpc::v1::Authorize::internal_default_instance());
  ::org::xrpl::rpc::v1::_DepositPreauth_default_instance_.unauthorize_ = const_cast< ::org::xrpl::rpc::v1::Unauthorize*>(
      ::org::xrpl::rpc::v1::Unauthorize::internal_default_instance());
}
class DepositPreauth::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Authorize& authorize(const DepositPreauth* msg);
  static const ::org::xrpl::rpc::v1::Unauthorize& unauthorize(const DepositPreauth* msg);
};

const ::org::xrpl::rpc::v1::Authorize&
DepositPreauth::HasBitSetters::authorize(const DepositPreauth* msg) {
  return *msg->authorization_oneof_.authorize_;
}
const ::org::xrpl::rpc::v1::Unauthorize&
DepositPreauth::HasBitSetters::unauthorize(const DepositPreauth* msg) {
  return *msg->authorization_oneof_.unauthorize_;
}
void DepositPreauth::set_allocated_authorize(::org::xrpl::rpc::v1::Authorize* authorize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_authorization_oneof();
  if (authorize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      authorize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authorize, submessage_arena);
    }
    set_has_authorize();
    authorization_oneof_.authorize_ = authorize;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.DepositPreauth.authorize)
}
void DepositPreauth::clear_authorize() {
  if (has_authorize()) {
    delete authorization_oneof_.authorize_;
    clear_has_authorization_oneof();
  }
}
void DepositPreauth::set_allocated_unauthorize(::org::xrpl::rpc::v1::Unauthorize* unauthorize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_authorization_oneof();
  if (unauthorize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unauthorize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unauthorize, submessage_arena);
    }
    set_has_unauthorize();
    authorization_oneof_.unauthorize_ = unauthorize;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.DepositPreauth.unauthorize)
}
void DepositPreauth::clear_unauthorize() {
  if (has_unauthorize()) {
    delete authorization_oneof_.unauthorize_;
    clear_has_authorization_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepositPreauth::kAuthorizeFieldNumber;
const int DepositPreauth::kUnauthorizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepositPreauth::DepositPreauth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.DepositPreauth)
}
DepositPreauth::DepositPreauth(const DepositPreauth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_authorization_oneof();
  switch (from.authorization_oneof_case()) {
    case kAuthorize: {
      mutable_authorize()->::org::xrpl::rpc::v1::Authorize::MergeFrom(from.authorize());
      break;
    }
    case kUnauthorize: {
      mutable_unauthorize()->::org::xrpl::rpc::v1::Unauthorize::MergeFrom(from.unauthorize());
      break;
    }
    case AUTHORIZATION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.DepositPreauth)
}

void DepositPreauth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  clear_has_authorization_oneof();
}

DepositPreauth::~DepositPreauth() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.DepositPreauth)
  SharedDtor();
}

void DepositPreauth::SharedDtor() {
  if (has_authorization_oneof()) {
    clear_authorization_oneof();
  }
}

void DepositPreauth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositPreauth& DepositPreauth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositPreauth_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void DepositPreauth::clear_authorization_oneof() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.DepositPreauth)
  switch (authorization_oneof_case()) {
    case kAuthorize: {
      delete authorization_oneof_.authorize_;
      break;
    }
    case kUnauthorize: {
      delete authorization_oneof_.unauthorize_;
      break;
    }
    case AUTHORIZATION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTHORIZATION_ONEOF_NOT_SET;
}


void DepositPreauth::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.DepositPreauth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_authorization_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DepositPreauth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Authorize authorize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_authorize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Unauthorize unauthorize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_unauthorize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DepositPreauth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.DepositPreauth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Authorize authorize = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authorize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Unauthorize unauthorize = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unauthorize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.DepositPreauth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.DepositPreauth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DepositPreauth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.DepositPreauth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Authorize authorize = 1;
  if (has_authorize()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::authorize(this), output);
  }

  // .org.xrpl.rpc.v1.Unauthorize unauthorize = 2;
  if (has_unauthorize()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::unauthorize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.DepositPreauth)
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositPreauth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.DepositPreauth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Authorize authorize = 1;
  if (has_authorize()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::authorize(this), target);
  }

  // .org.xrpl.rpc.v1.Unauthorize unauthorize = 2;
  if (has_unauthorize()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::unauthorize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.DepositPreauth)
  return target;
}

size_t DepositPreauth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.DepositPreauth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (authorization_oneof_case()) {
    // .org.xrpl.rpc.v1.Authorize authorize = 1;
    case kAuthorize: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authorization_oneof_.authorize_);
      break;
    }
    // .org.xrpl.rpc.v1.Unauthorize unauthorize = 2;
    case kUnauthorize: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authorization_oneof_.unauthorize_);
      break;
    }
    case AUTHORIZATION_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositPreauth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.DepositPreauth)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositPreauth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositPreauth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.DepositPreauth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.DepositPreauth)
    MergeFrom(*source);
  }
}

void DepositPreauth::MergeFrom(const DepositPreauth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.DepositPreauth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.authorization_oneof_case()) {
    case kAuthorize: {
      mutable_authorize()->::org::xrpl::rpc::v1::Authorize::MergeFrom(from.authorize());
      break;
    }
    case kUnauthorize: {
      mutable_unauthorize()->::org::xrpl::rpc::v1::Unauthorize::MergeFrom(from.unauthorize());
      break;
    }
    case AUTHORIZATION_ONEOF_NOT_SET: {
      break;
    }
  }
}

void DepositPreauth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.DepositPreauth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositPreauth::CopyFrom(const DepositPreauth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.DepositPreauth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositPreauth::IsInitialized() const {
  return true;
}

void DepositPreauth::Swap(DepositPreauth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepositPreauth::InternalSwap(DepositPreauth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(authorization_oneof_, other->authorization_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositPreauth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EscrowCancel::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_EscrowCancel_default_instance_._instance.get_mutable()->owner_ = const_cast< ::org::xrpl::rpc::v1::Owner*>(
      ::org::xrpl::rpc::v1::Owner::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowCancel_default_instance_._instance.get_mutable()->offer_sequence_ = const_cast< ::org::xrpl::rpc::v1::OfferSequence*>(
      ::org::xrpl::rpc::v1::OfferSequence::internal_default_instance());
}
class EscrowCancel::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Owner& owner(const EscrowCancel* msg);
  static const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence(const EscrowCancel* msg);
};

const ::org::xrpl::rpc::v1::Owner&
EscrowCancel::HasBitSetters::owner(const EscrowCancel* msg) {
  return *msg->owner_;
}
const ::org::xrpl::rpc::v1::OfferSequence&
EscrowCancel::HasBitSetters::offer_sequence(const EscrowCancel* msg) {
  return *msg->offer_sequence_;
}
void EscrowCancel::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void EscrowCancel::clear_offer_sequence() {
  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EscrowCancel::kOwnerFieldNumber;
const int EscrowCancel::kOfferSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EscrowCancel::EscrowCancel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.EscrowCancel)
}
EscrowCancel::EscrowCancel(const EscrowCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner()) {
    owner_ = new ::org::xrpl::rpc::v1::Owner(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_offer_sequence()) {
    offer_sequence_ = new ::org::xrpl::rpc::v1::OfferSequence(*from.offer_sequence_);
  } else {
    offer_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.EscrowCancel)
}

void EscrowCancel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offer_sequence_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(offer_sequence_));
}

EscrowCancel::~EscrowCancel() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.EscrowCancel)
  SharedDtor();
}

void EscrowCancel::SharedDtor() {
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete offer_sequence_;
}

void EscrowCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EscrowCancel& EscrowCancel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EscrowCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void EscrowCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.EscrowCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EscrowCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Owner owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_offer_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EscrowCancel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.EscrowCancel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Owner owner = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offer_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.EscrowCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.EscrowCancel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EscrowCancel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.EscrowCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Owner owner = 1;
  if (this->has_owner()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::owner(this), output);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::offer_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.EscrowCancel)
}

::PROTOBUF_NAMESPACE_ID::uint8* EscrowCancel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.EscrowCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Owner owner = 1;
  if (this->has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::owner(this), target);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::offer_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.EscrowCancel)
  return target;
}

size_t EscrowCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.EscrowCancel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Owner owner = 1;
  if (this->has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offer_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EscrowCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.EscrowCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const EscrowCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EscrowCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.EscrowCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.EscrowCancel)
    MergeFrom(*source);
  }
}

void EscrowCancel::MergeFrom(const EscrowCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.EscrowCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner()) {
    mutable_owner()->::org::xrpl::rpc::v1::Owner::MergeFrom(from.owner());
  }
  if (from.has_offer_sequence()) {
    mutable_offer_sequence()->::org::xrpl::rpc::v1::OfferSequence::MergeFrom(from.offer_sequence());
  }
}

void EscrowCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.EscrowCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscrowCancel::CopyFrom(const EscrowCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.EscrowCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscrowCancel::IsInitialized() const {
  return true;
}

void EscrowCancel::Swap(EscrowCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EscrowCancel::InternalSwap(EscrowCancel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(owner_, other->owner_);
  swap(offer_sequence_, other->offer_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EscrowCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EscrowCreate::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_EscrowCreate_default_instance_._instance.get_mutable()->amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowCreate_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowCreate_default_instance_._instance.get_mutable()->cancel_after_ = const_cast< ::org::xrpl::rpc::v1::CancelAfter*>(
      ::org::xrpl::rpc::v1::CancelAfter::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowCreate_default_instance_._instance.get_mutable()->finish_after_ = const_cast< ::org::xrpl::rpc::v1::FinishAfter*>(
      ::org::xrpl::rpc::v1::FinishAfter::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowCreate_default_instance_._instance.get_mutable()->condition_ = const_cast< ::org::xrpl::rpc::v1::Condition*>(
      ::org::xrpl::rpc::v1::Condition::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowCreate_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
}
class EscrowCreate::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Amount& amount(const EscrowCreate* msg);
  static const ::org::xrpl::rpc::v1::Destination& destination(const EscrowCreate* msg);
  static const ::org::xrpl::rpc::v1::CancelAfter& cancel_after(const EscrowCreate* msg);
  static const ::org::xrpl::rpc::v1::FinishAfter& finish_after(const EscrowCreate* msg);
  static const ::org::xrpl::rpc::v1::Condition& condition(const EscrowCreate* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const EscrowCreate* msg);
};

const ::org::xrpl::rpc::v1::Amount&
EscrowCreate::HasBitSetters::amount(const EscrowCreate* msg) {
  return *msg->amount_;
}
const ::org::xrpl::rpc::v1::Destination&
EscrowCreate::HasBitSetters::destination(const EscrowCreate* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::CancelAfter&
EscrowCreate::HasBitSetters::cancel_after(const EscrowCreate* msg) {
  return *msg->cancel_after_;
}
const ::org::xrpl::rpc::v1::FinishAfter&
EscrowCreate::HasBitSetters::finish_after(const EscrowCreate* msg) {
  return *msg->finish_after_;
}
const ::org::xrpl::rpc::v1::Condition&
EscrowCreate::HasBitSetters::condition(const EscrowCreate* msg) {
  return *msg->condition_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
EscrowCreate::HasBitSetters::destination_tag(const EscrowCreate* msg) {
  return *msg->destination_tag_;
}
void EscrowCreate::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void EscrowCreate::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void EscrowCreate::clear_cancel_after() {
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
}
void EscrowCreate::clear_finish_after() {
  if (GetArenaNoVirtual() == nullptr && finish_after_ != nullptr) {
    delete finish_after_;
  }
  finish_after_ = nullptr;
}
void EscrowCreate::clear_condition() {
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
void EscrowCreate::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EscrowCreate::kAmountFieldNumber;
const int EscrowCreate::kDestinationFieldNumber;
const int EscrowCreate::kCancelAfterFieldNumber;
const int EscrowCreate::kFinishAfterFieldNumber;
const int EscrowCreate::kConditionFieldNumber;
const int EscrowCreate::kDestinationTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EscrowCreate::EscrowCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.EscrowCreate)
}
EscrowCreate::EscrowCreate(const EscrowCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_amount()) {
    amount_ = new ::org::xrpl::rpc::v1::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_cancel_after()) {
    cancel_after_ = new ::org::xrpl::rpc::v1::CancelAfter(*from.cancel_after_);
  } else {
    cancel_after_ = nullptr;
  }
  if (from.has_finish_after()) {
    finish_after_ = new ::org::xrpl::rpc::v1::FinishAfter(*from.finish_after_);
  } else {
    finish_after_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::org::xrpl::rpc::v1::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.EscrowCreate)
}

void EscrowCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_tag_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
}

EscrowCreate::~EscrowCreate() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.EscrowCreate)
  SharedDtor();
}

void EscrowCreate::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete cancel_after_;
  if (this != internal_default_instance()) delete finish_after_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete destination_tag_;
}

void EscrowCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EscrowCreate& EscrowCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EscrowCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void EscrowCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.EscrowCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && finish_after_ != nullptr) {
    delete finish_after_;
  }
  finish_after_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EscrowCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Amount amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cancel_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.FinishAfter finish_after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_finish_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Condition condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EscrowCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.EscrowCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Amount amount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cancel_after()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.FinishAfter finish_after = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_finish_after()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Condition condition = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.EscrowCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.EscrowCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EscrowCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.EscrowCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 3;
  if (this->has_cancel_after()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cancel_after(this), output);
  }

  // .org.xrpl.rpc.v1.FinishAfter finish_after = 4;
  if (this->has_finish_after()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::finish_after(this), output);
  }

  // .org.xrpl.rpc.v1.Condition condition = 5;
  if (this->has_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::condition(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::destination_tag(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.EscrowCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* EscrowCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.EscrowCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 3;
  if (this->has_cancel_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cancel_after(this), target);
  }

  // .org.xrpl.rpc.v1.FinishAfter finish_after = 4;
  if (this->has_finish_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::finish_after(this), target);
  }

  // .org.xrpl.rpc.v1.Condition condition = 5;
  if (this->has_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::condition(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::destination_tag(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.EscrowCreate)
  return target;
}

size_t EscrowCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.EscrowCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 3;
  if (this->has_cancel_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cancel_after_);
  }

  // .org.xrpl.rpc.v1.FinishAfter finish_after = 4;
  if (this->has_finish_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *finish_after_);
  }

  // .org.xrpl.rpc.v1.Condition condition = 5;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EscrowCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.EscrowCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const EscrowCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EscrowCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.EscrowCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.EscrowCreate)
    MergeFrom(*source);
  }
}

void EscrowCreate::MergeFrom(const EscrowCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.EscrowCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
  }
  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_cancel_after()) {
    mutable_cancel_after()->::org::xrpl::rpc::v1::CancelAfter::MergeFrom(from.cancel_after());
  }
  if (from.has_finish_after()) {
    mutable_finish_after()->::org::xrpl::rpc::v1::FinishAfter::MergeFrom(from.finish_after());
  }
  if (from.has_condition()) {
    mutable_condition()->::org::xrpl::rpc::v1::Condition::MergeFrom(from.condition());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
}

void EscrowCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.EscrowCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscrowCreate::CopyFrom(const EscrowCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.EscrowCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscrowCreate::IsInitialized() const {
  return true;
}

void EscrowCreate::Swap(EscrowCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EscrowCreate::InternalSwap(EscrowCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
  swap(destination_, other->destination_);
  swap(cancel_after_, other->cancel_after_);
  swap(finish_after_, other->finish_after_);
  swap(condition_, other->condition_);
  swap(destination_tag_, other->destination_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EscrowCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EscrowFinish::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_EscrowFinish_default_instance_._instance.get_mutable()->owner_ = const_cast< ::org::xrpl::rpc::v1::Owner*>(
      ::org::xrpl::rpc::v1::Owner::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowFinish_default_instance_._instance.get_mutable()->offer_sequence_ = const_cast< ::org::xrpl::rpc::v1::OfferSequence*>(
      ::org::xrpl::rpc::v1::OfferSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowFinish_default_instance_._instance.get_mutable()->condition_ = const_cast< ::org::xrpl::rpc::v1::Condition*>(
      ::org::xrpl::rpc::v1::Condition::internal_default_instance());
  ::org::xrpl::rpc::v1::_EscrowFinish_default_instance_._instance.get_mutable()->fulfillment_ = const_cast< ::org::xrpl::rpc::v1::Fulfillment*>(
      ::org::xrpl::rpc::v1::Fulfillment::internal_default_instance());
}
class EscrowFinish::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Owner& owner(const EscrowFinish* msg);
  static const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence(const EscrowFinish* msg);
  static const ::org::xrpl::rpc::v1::Condition& condition(const EscrowFinish* msg);
  static const ::org::xrpl::rpc::v1::Fulfillment& fulfillment(const EscrowFinish* msg);
};

const ::org::xrpl::rpc::v1::Owner&
EscrowFinish::HasBitSetters::owner(const EscrowFinish* msg) {
  return *msg->owner_;
}
const ::org::xrpl::rpc::v1::OfferSequence&
EscrowFinish::HasBitSetters::offer_sequence(const EscrowFinish* msg) {
  return *msg->offer_sequence_;
}
const ::org::xrpl::rpc::v1::Condition&
EscrowFinish::HasBitSetters::condition(const EscrowFinish* msg) {
  return *msg->condition_;
}
const ::org::xrpl::rpc::v1::Fulfillment&
EscrowFinish::HasBitSetters::fulfillment(const EscrowFinish* msg) {
  return *msg->fulfillment_;
}
void EscrowFinish::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void EscrowFinish::clear_offer_sequence() {
  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
}
void EscrowFinish::clear_condition() {
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
void EscrowFinish::clear_fulfillment() {
  if (GetArenaNoVirtual() == nullptr && fulfillment_ != nullptr) {
    delete fulfillment_;
  }
  fulfillment_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EscrowFinish::kOwnerFieldNumber;
const int EscrowFinish::kOfferSequenceFieldNumber;
const int EscrowFinish::kConditionFieldNumber;
const int EscrowFinish::kFulfillmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EscrowFinish::EscrowFinish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.EscrowFinish)
}
EscrowFinish::EscrowFinish(const EscrowFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner()) {
    owner_ = new ::org::xrpl::rpc::v1::Owner(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_offer_sequence()) {
    offer_sequence_ = new ::org::xrpl::rpc::v1::OfferSequence(*from.offer_sequence_);
  } else {
    offer_sequence_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::org::xrpl::rpc::v1::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_fulfillment()) {
    fulfillment_ = new ::org::xrpl::rpc::v1::Fulfillment(*from.fulfillment_);
  } else {
    fulfillment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.EscrowFinish)
}

void EscrowFinish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fulfillment_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(fulfillment_));
}

EscrowFinish::~EscrowFinish() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.EscrowFinish)
  SharedDtor();
}

void EscrowFinish::SharedDtor() {
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete offer_sequence_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete fulfillment_;
}

void EscrowFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EscrowFinish& EscrowFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EscrowFinish_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void EscrowFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.EscrowFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fulfillment_ != nullptr) {
    delete fulfillment_;
  }
  fulfillment_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EscrowFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Owner owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_offer_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Condition condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Fulfillment fulfillment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_fulfillment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EscrowFinish::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.EscrowFinish)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Owner owner = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offer_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Condition condition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Fulfillment fulfillment = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fulfillment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.EscrowFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.EscrowFinish)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EscrowFinish::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.EscrowFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Owner owner = 1;
  if (this->has_owner()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::owner(this), output);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::offer_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.Condition condition = 3;
  if (this->has_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::condition(this), output);
  }

  // .org.xrpl.rpc.v1.Fulfillment fulfillment = 4;
  if (this->has_fulfillment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::fulfillment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.EscrowFinish)
}

::PROTOBUF_NAMESPACE_ID::uint8* EscrowFinish::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.EscrowFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Owner owner = 1;
  if (this->has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::owner(this), target);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::offer_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.Condition condition = 3;
  if (this->has_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::condition(this), target);
  }

  // .org.xrpl.rpc.v1.Fulfillment fulfillment = 4;
  if (this->has_fulfillment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::fulfillment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.EscrowFinish)
  return target;
}

size_t EscrowFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.EscrowFinish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Owner owner = 1;
  if (this->has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offer_sequence_);
  }

  // .org.xrpl.rpc.v1.Condition condition = 3;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .org.xrpl.rpc.v1.Fulfillment fulfillment = 4;
  if (this->has_fulfillment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fulfillment_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EscrowFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.EscrowFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const EscrowFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EscrowFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.EscrowFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.EscrowFinish)
    MergeFrom(*source);
  }
}

void EscrowFinish::MergeFrom(const EscrowFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.EscrowFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner()) {
    mutable_owner()->::org::xrpl::rpc::v1::Owner::MergeFrom(from.owner());
  }
  if (from.has_offer_sequence()) {
    mutable_offer_sequence()->::org::xrpl::rpc::v1::OfferSequence::MergeFrom(from.offer_sequence());
  }
  if (from.has_condition()) {
    mutable_condition()->::org::xrpl::rpc::v1::Condition::MergeFrom(from.condition());
  }
  if (from.has_fulfillment()) {
    mutable_fulfillment()->::org::xrpl::rpc::v1::Fulfillment::MergeFrom(from.fulfillment());
  }
}

void EscrowFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.EscrowFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscrowFinish::CopyFrom(const EscrowFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.EscrowFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscrowFinish::IsInitialized() const {
  return true;
}

void EscrowFinish::Swap(EscrowFinish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EscrowFinish::InternalSwap(EscrowFinish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(owner_, other->owner_);
  swap(offer_sequence_, other->offer_sequence_);
  swap(condition_, other->condition_);
  swap(fulfillment_, other->fulfillment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EscrowFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OfferCancel::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_OfferCancel_default_instance_._instance.get_mutable()->offer_sequence_ = const_cast< ::org::xrpl::rpc::v1::OfferSequence*>(
      ::org::xrpl::rpc::v1::OfferSequence::internal_default_instance());
}
class OfferCancel::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence(const OfferCancel* msg);
};

const ::org::xrpl::rpc::v1::OfferSequence&
OfferCancel::HasBitSetters::offer_sequence(const OfferCancel* msg) {
  return *msg->offer_sequence_;
}
void OfferCancel::clear_offer_sequence() {
  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfferCancel::kOfferSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfferCancel::OfferCancel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.OfferCancel)
}
OfferCancel::OfferCancel(const OfferCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_offer_sequence()) {
    offer_sequence_ = new ::org::xrpl::rpc::v1::OfferSequence(*from.offer_sequence_);
  } else {
    offer_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.OfferCancel)
}

void OfferCancel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  offer_sequence_ = nullptr;
}

OfferCancel::~OfferCancel() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.OfferCancel)
  SharedDtor();
}

void OfferCancel::SharedDtor() {
  if (this != internal_default_instance()) delete offer_sequence_;
}

void OfferCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OfferCancel& OfferCancel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OfferCancel_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void OfferCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.OfferCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OfferCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_offer_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OfferCancel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.OfferCancel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offer_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.OfferCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.OfferCancel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OfferCancel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.OfferCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 1;
  if (this->has_offer_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::offer_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.OfferCancel)
}

::PROTOBUF_NAMESPACE_ID::uint8* OfferCancel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.OfferCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 1;
  if (this->has_offer_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::offer_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.OfferCancel)
  return target;
}

size_t OfferCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.OfferCancel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 1;
  if (this->has_offer_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offer_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OfferCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.OfferCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const OfferCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OfferCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.OfferCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.OfferCancel)
    MergeFrom(*source);
  }
}

void OfferCancel::MergeFrom(const OfferCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.OfferCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offer_sequence()) {
    mutable_offer_sequence()->::org::xrpl::rpc::v1::OfferSequence::MergeFrom(from.offer_sequence());
  }
}

void OfferCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.OfferCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferCancel::CopyFrom(const OfferCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.OfferCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferCancel::IsInitialized() const {
  return true;
}

void OfferCancel::Swap(OfferCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferCancel::InternalSwap(OfferCancel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(offer_sequence_, other->offer_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OfferCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OfferCreate::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_OfferCreate_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::org::xrpl::rpc::v1::Expiration*>(
      ::org::xrpl::rpc::v1::Expiration::internal_default_instance());
  ::org::xrpl::rpc::v1::_OfferCreate_default_instance_._instance.get_mutable()->offer_sequence_ = const_cast< ::org::xrpl::rpc::v1::OfferSequence*>(
      ::org::xrpl::rpc::v1::OfferSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_OfferCreate_default_instance_._instance.get_mutable()->taker_gets_ = const_cast< ::org::xrpl::rpc::v1::TakerGets*>(
      ::org::xrpl::rpc::v1::TakerGets::internal_default_instance());
  ::org::xrpl::rpc::v1::_OfferCreate_default_instance_._instance.get_mutable()->taker_pays_ = const_cast< ::org::xrpl::rpc::v1::TakerPays*>(
      ::org::xrpl::rpc::v1::TakerPays::internal_default_instance());
}
class OfferCreate::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Expiration& expiration(const OfferCreate* msg);
  static const ::org::xrpl::rpc::v1::OfferSequence& offer_sequence(const OfferCreate* msg);
  static const ::org::xrpl::rpc::v1::TakerGets& taker_gets(const OfferCreate* msg);
  static const ::org::xrpl::rpc::v1::TakerPays& taker_pays(const OfferCreate* msg);
};

const ::org::xrpl::rpc::v1::Expiration&
OfferCreate::HasBitSetters::expiration(const OfferCreate* msg) {
  return *msg->expiration_;
}
const ::org::xrpl::rpc::v1::OfferSequence&
OfferCreate::HasBitSetters::offer_sequence(const OfferCreate* msg) {
  return *msg->offer_sequence_;
}
const ::org::xrpl::rpc::v1::TakerGets&
OfferCreate::HasBitSetters::taker_gets(const OfferCreate* msg) {
  return *msg->taker_gets_;
}
const ::org::xrpl::rpc::v1::TakerPays&
OfferCreate::HasBitSetters::taker_pays(const OfferCreate* msg) {
  return *msg->taker_pays_;
}
void OfferCreate::clear_expiration() {
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
void OfferCreate::clear_offer_sequence() {
  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
}
void OfferCreate::clear_taker_gets() {
  if (GetArenaNoVirtual() == nullptr && taker_gets_ != nullptr) {
    delete taker_gets_;
  }
  taker_gets_ = nullptr;
}
void OfferCreate::clear_taker_pays() {
  if (GetArenaNoVirtual() == nullptr && taker_pays_ != nullptr) {
    delete taker_pays_;
  }
  taker_pays_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfferCreate::kExpirationFieldNumber;
const int OfferCreate::kOfferSequenceFieldNumber;
const int OfferCreate::kTakerGetsFieldNumber;
const int OfferCreate::kTakerPaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfferCreate::OfferCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.OfferCreate)
}
OfferCreate::OfferCreate(const OfferCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expiration()) {
    expiration_ = new ::org::xrpl::rpc::v1::Expiration(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  if (from.has_offer_sequence()) {
    offer_sequence_ = new ::org::xrpl::rpc::v1::OfferSequence(*from.offer_sequence_);
  } else {
    offer_sequence_ = nullptr;
  }
  if (from.has_taker_gets()) {
    taker_gets_ = new ::org::xrpl::rpc::v1::TakerGets(*from.taker_gets_);
  } else {
    taker_gets_ = nullptr;
  }
  if (from.has_taker_pays()) {
    taker_pays_ = new ::org::xrpl::rpc::v1::TakerPays(*from.taker_pays_);
  } else {
    taker_pays_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.OfferCreate)
}

void OfferCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&expiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taker_pays_) -
      reinterpret_cast<char*>(&expiration_)) + sizeof(taker_pays_));
}

OfferCreate::~OfferCreate() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.OfferCreate)
  SharedDtor();
}

void OfferCreate::SharedDtor() {
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete offer_sequence_;
  if (this != internal_default_instance()) delete taker_gets_;
  if (this != internal_default_instance()) delete taker_pays_;
}

void OfferCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OfferCreate& OfferCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OfferCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void OfferCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.OfferCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && offer_sequence_ != nullptr) {
    delete offer_sequence_;
  }
  offer_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_gets_ != nullptr) {
    delete taker_gets_;
  }
  taker_gets_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_pays_ != nullptr) {
    delete taker_pays_;
  }
  taker_pays_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OfferCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Expiration expiration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_expiration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_offer_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerGets taker_gets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_taker_gets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_taker_pays(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OfferCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.OfferCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Expiration expiration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offer_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerGets taker_gets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_gets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_pays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.OfferCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.OfferCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OfferCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.OfferCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Expiration expiration = 1;
  if (this->has_expiration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::expiration(this), output);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::offer_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.TakerGets taker_gets = 3;
  if (this->has_taker_gets()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::taker_gets(this), output);
  }

  // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
  if (this->has_taker_pays()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::taker_pays(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.OfferCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* OfferCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.OfferCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Expiration expiration = 1;
  if (this->has_expiration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::expiration(this), target);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::offer_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.TakerGets taker_gets = 3;
  if (this->has_taker_gets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::taker_gets(this), target);
  }

  // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
  if (this->has_taker_pays()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::taker_pays(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.OfferCreate)
  return target;
}

size_t OfferCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.OfferCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Expiration expiration = 1;
  if (this->has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  // .org.xrpl.rpc.v1.OfferSequence offer_sequence = 2;
  if (this->has_offer_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offer_sequence_);
  }

  // .org.xrpl.rpc.v1.TakerGets taker_gets = 3;
  if (this->has_taker_gets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_gets_);
  }

  // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
  if (this->has_taker_pays()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_pays_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OfferCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.OfferCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const OfferCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OfferCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.OfferCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.OfferCreate)
    MergeFrom(*source);
  }
}

void OfferCreate::MergeFrom(const OfferCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.OfferCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expiration()) {
    mutable_expiration()->::org::xrpl::rpc::v1::Expiration::MergeFrom(from.expiration());
  }
  if (from.has_offer_sequence()) {
    mutable_offer_sequence()->::org::xrpl::rpc::v1::OfferSequence::MergeFrom(from.offer_sequence());
  }
  if (from.has_taker_gets()) {
    mutable_taker_gets()->::org::xrpl::rpc::v1::TakerGets::MergeFrom(from.taker_gets());
  }
  if (from.has_taker_pays()) {
    mutable_taker_pays()->::org::xrpl::rpc::v1::TakerPays::MergeFrom(from.taker_pays());
  }
}

void OfferCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.OfferCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferCreate::CopyFrom(const OfferCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.OfferCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferCreate::IsInitialized() const {
  return true;
}

void OfferCreate::Swap(OfferCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferCreate::InternalSwap(OfferCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expiration_, other->expiration_);
  swap(offer_sequence_, other->offer_sequence_);
  swap(taker_gets_, other->taker_gets_);
  swap(taker_pays_, other->taker_pays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OfferCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payment_PathElement::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Payment_PathElement_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::AccountAddress*>(
      ::org::xrpl::rpc::v1::AccountAddress::internal_default_instance());
  ::org::xrpl::rpc::v1::_Payment_PathElement_default_instance_._instance.get_mutable()->currency_ = const_cast< ::org::xrpl::rpc::v1::Currency*>(
      ::org::xrpl::rpc::v1::Currency::internal_default_instance());
  ::org::xrpl::rpc::v1::_Payment_PathElement_default_instance_._instance.get_mutable()->issuer_ = const_cast< ::org::xrpl::rpc::v1::AccountAddress*>(
      ::org::xrpl::rpc::v1::AccountAddress::internal_default_instance());
}
class Payment_PathElement::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::AccountAddress& account(const Payment_PathElement* msg);
  static const ::org::xrpl::rpc::v1::Currency& currency(const Payment_PathElement* msg);
  static const ::org::xrpl::rpc::v1::AccountAddress& issuer(const Payment_PathElement* msg);
};

const ::org::xrpl::rpc::v1::AccountAddress&
Payment_PathElement::HasBitSetters::account(const Payment_PathElement* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Currency&
Payment_PathElement::HasBitSetters::currency(const Payment_PathElement* msg) {
  return *msg->currency_;
}
const ::org::xrpl::rpc::v1::AccountAddress&
Payment_PathElement::HasBitSetters::issuer(const Payment_PathElement* msg) {
  return *msg->issuer_;
}
void Payment_PathElement::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void Payment_PathElement::clear_currency() {
  if (GetArenaNoVirtual() == nullptr && currency_ != nullptr) {
    delete currency_;
  }
  currency_ = nullptr;
}
void Payment_PathElement::clear_issuer() {
  if (GetArenaNoVirtual() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Payment_PathElement::kAccountFieldNumber;
const int Payment_PathElement::kCurrencyFieldNumber;
const int Payment_PathElement::kIssuerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Payment_PathElement::Payment_PathElement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Payment.PathElement)
}
Payment_PathElement::Payment_PathElement(const Payment_PathElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::AccountAddress(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_currency()) {
    currency_ = new ::org::xrpl::rpc::v1::Currency(*from.currency_);
  } else {
    currency_ = nullptr;
  }
  if (from.has_issuer()) {
    issuer_ = new ::org::xrpl::rpc::v1::AccountAddress(*from.issuer_);
  } else {
    issuer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Payment.PathElement)
}

void Payment_PathElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issuer_) -
      reinterpret_cast<char*>(&account_)) + sizeof(issuer_));
}

Payment_PathElement::~Payment_PathElement() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Payment.PathElement)
  SharedDtor();
}

void Payment_PathElement::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete currency_;
  if (this != internal_default_instance()) delete issuer_;
}

void Payment_PathElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payment_PathElement& Payment_PathElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payment_PathElement_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Payment_PathElement::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Payment.PathElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && currency_ != nullptr) {
    delete currency_;
  }
  currency_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Payment_PathElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Currency currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_currency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_issuer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Payment_PathElement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Payment.PathElement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.AccountAddress account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Currency currency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_currency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_issuer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Payment.PathElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Payment.PathElement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Payment_PathElement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Payment.PathElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.Currency currency = 2;
  if (this->has_currency()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::currency(this), output);
  }

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  if (this->has_issuer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::issuer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Payment.PathElement)
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment_PathElement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Payment.PathElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.Currency currency = 2;
  if (this->has_currency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::currency(this), target);
  }

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  if (this->has_issuer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::issuer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Payment.PathElement)
  return target;
}

size_t Payment_PathElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Payment.PathElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Currency currency = 2;
  if (this->has_currency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currency_);
  }

  // .org.xrpl.rpc.v1.AccountAddress issuer = 3;
  if (this->has_issuer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *issuer_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payment_PathElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Payment.PathElement)
  GOOGLE_DCHECK_NE(&from, this);
  const Payment_PathElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payment_PathElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Payment.PathElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Payment.PathElement)
    MergeFrom(*source);
  }
}

void Payment_PathElement::MergeFrom(const Payment_PathElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Payment.PathElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::AccountAddress::MergeFrom(from.account());
  }
  if (from.has_currency()) {
    mutable_currency()->::org::xrpl::rpc::v1::Currency::MergeFrom(from.currency());
  }
  if (from.has_issuer()) {
    mutable_issuer()->::org::xrpl::rpc::v1::AccountAddress::MergeFrom(from.issuer());
  }
}

void Payment_PathElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Payment.PathElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment_PathElement::CopyFrom(const Payment_PathElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Payment.PathElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment_PathElement::IsInitialized() const {
  return true;
}

void Payment_PathElement::Swap(Payment_PathElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Payment_PathElement::InternalSwap(Payment_PathElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(currency_, other->currency_);
  swap(issuer_, other->issuer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment_PathElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payment_Path::InitAsDefaultInstance() {
}
class Payment_Path::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Payment_Path::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Payment_Path::Payment_Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Payment.Path)
}
Payment_Path::Payment_Path(const Payment_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Payment.Path)
}

void Payment_Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
}

Payment_Path::~Payment_Path() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Payment.Path)
  SharedDtor();
}

void Payment_Path::SharedDtor() {
}

void Payment_Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payment_Path& Payment_Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payment_Path_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Payment_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Payment.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Payment_Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.Payment.PathElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Payment_Path::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Payment.Path)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.xrpl.rpc.v1.Payment.PathElement elements = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Payment.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Payment.Path)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Payment_Path::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Payment.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Payment.PathElement elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->elements(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Payment.Path)
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment_Path::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Payment.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Payment.PathElement elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->elements(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Payment.Path)
  return target;
}

size_t Payment_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Payment.Path)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Payment.PathElement elements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->elements(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payment_Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Payment.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Payment_Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payment_Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Payment.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Payment.Path)
    MergeFrom(*source);
  }
}

void Payment_Path::MergeFrom(const Payment_Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Payment.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void Payment_Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Payment.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment_Path::CopyFrom(const Payment_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Payment.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment_Path::IsInitialized() const {
  return true;
}

void Payment_Path::Swap(Payment_Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Payment_Path::InternalSwap(Payment_Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&elements_)->InternalSwap(CastToBase(&other->elements_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment_Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payment::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Payment_default_instance_._instance.get_mutable()->amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_Payment_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_Payment_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_Payment_default_instance_._instance.get_mutable()->invoice_id_ = const_cast< ::org::xrpl::rpc::v1::InvoiceID*>(
      ::org::xrpl::rpc::v1::InvoiceID::internal_default_instance());
  ::org::xrpl::rpc::v1::_Payment_default_instance_._instance.get_mutable()->send_max_ = const_cast< ::org::xrpl::rpc::v1::SendMax*>(
      ::org::xrpl::rpc::v1::SendMax::internal_default_instance());
  ::org::xrpl::rpc::v1::_Payment_default_instance_._instance.get_mutable()->deliver_min_ = const_cast< ::org::xrpl::rpc::v1::DeliverMin*>(
      ::org::xrpl::rpc::v1::DeliverMin::internal_default_instance());
}
class Payment::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Amount& amount(const Payment* msg);
  static const ::org::xrpl::rpc::v1::Destination& destination(const Payment* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const Payment* msg);
  static const ::org::xrpl::rpc::v1::InvoiceID& invoice_id(const Payment* msg);
  static const ::org::xrpl::rpc::v1::SendMax& send_max(const Payment* msg);
  static const ::org::xrpl::rpc::v1::DeliverMin& deliver_min(const Payment* msg);
};

const ::org::xrpl::rpc::v1::Amount&
Payment::HasBitSetters::amount(const Payment* msg) {
  return *msg->amount_;
}
const ::org::xrpl::rpc::v1::Destination&
Payment::HasBitSetters::destination(const Payment* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
Payment::HasBitSetters::destination_tag(const Payment* msg) {
  return *msg->destination_tag_;
}
const ::org::xrpl::rpc::v1::InvoiceID&
Payment::HasBitSetters::invoice_id(const Payment* msg) {
  return *msg->invoice_id_;
}
const ::org::xrpl::rpc::v1::SendMax&
Payment::HasBitSetters::send_max(const Payment* msg) {
  return *msg->send_max_;
}
const ::org::xrpl::rpc::v1::DeliverMin&
Payment::HasBitSetters::deliver_min(const Payment* msg) {
  return *msg->deliver_min_;
}
void Payment::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void Payment::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void Payment::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
void Payment::clear_invoice_id() {
  if (GetArenaNoVirtual() == nullptr && invoice_id_ != nullptr) {
    delete invoice_id_;
  }
  invoice_id_ = nullptr;
}
void Payment::clear_send_max() {
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
}
void Payment::clear_deliver_min() {
  if (GetArenaNoVirtual() == nullptr && deliver_min_ != nullptr) {
    delete deliver_min_;
  }
  deliver_min_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Payment::kAmountFieldNumber;
const int Payment::kDestinationFieldNumber;
const int Payment::kDestinationTagFieldNumber;
const int Payment::kInvoiceIdFieldNumber;
const int Payment::kPathsFieldNumber;
const int Payment::kSendMaxFieldNumber;
const int Payment::kDeliverMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Payment::Payment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Payment)
}
Payment::Payment(const Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_amount()) {
    amount_ = new ::org::xrpl::rpc::v1::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  if (from.has_invoice_id()) {
    invoice_id_ = new ::org::xrpl::rpc::v1::InvoiceID(*from.invoice_id_);
  } else {
    invoice_id_ = nullptr;
  }
  if (from.has_send_max()) {
    send_max_ = new ::org::xrpl::rpc::v1::SendMax(*from.send_max_);
  } else {
    send_max_ = nullptr;
  }
  if (from.has_deliver_min()) {
    deliver_min_ = new ::org::xrpl::rpc::v1::DeliverMin(*from.deliver_min_);
  } else {
    deliver_min_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Payment)
}

void Payment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deliver_min_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(deliver_min_));
}

Payment::~Payment() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Payment)
  SharedDtor();
}

void Payment::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete destination_tag_;
  if (this != internal_default_instance()) delete invoice_id_;
  if (this != internal_default_instance()) delete send_max_;
  if (this != internal_default_instance()) delete deliver_min_;
}

void Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payment& Payment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payment_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && invoice_id_ != nullptr) {
    delete invoice_id_;
  }
  invoice_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && deliver_min_ != nullptr) {
    delete deliver_min_;
  }
  deliver_min_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Amount amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.InvoiceID invoice_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_invoice_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.Payment.Path paths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SendMax send_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_send_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DeliverMin deliver_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_deliver_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Payment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Payment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Amount amount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.InvoiceID invoice_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_invoice_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.Payment.Path paths = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SendMax send_max = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DeliverMin deliver_min = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deliver_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Payment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Payment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Payment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::destination_tag(this), output);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 4;
  if (this->has_invoice_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::invoice_id(this), output);
  }

  // repeated .org.xrpl.rpc.v1.Payment.Path paths = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->paths(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 6;
  if (this->has_send_max()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::send_max(this), output);
  }

  // .org.xrpl.rpc.v1.DeliverMin deliver_min = 7;
  if (this->has_deliver_min()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::deliver_min(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Payment)
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::destination_tag(this), target);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 4;
  if (this->has_invoice_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::invoice_id(this), target);
  }

  // repeated .org.xrpl.rpc.v1.Payment.Path paths = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->paths(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 6;
  if (this->has_send_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::send_max(this), target);
  }

  // .org.xrpl.rpc.v1.DeliverMin deliver_min = 7;
  if (this->has_deliver_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::deliver_min(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Payment)
  return target;
}

size_t Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Payment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Payment.Path paths = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->paths(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 3;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 4;
  if (this->has_invoice_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_id_);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 6;
  if (this->has_send_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_max_);
  }

  // .org.xrpl.rpc.v1.DeliverMin deliver_min = 7;
  if (this->has_deliver_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deliver_min_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  const Payment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Payment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Payment)
    MergeFrom(*source);
  }
}

void Payment::MergeFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.has_amount()) {
    mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
  }
  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
  if (from.has_invoice_id()) {
    mutable_invoice_id()->::org::xrpl::rpc::v1::InvoiceID::MergeFrom(from.invoice_id());
  }
  if (from.has_send_max()) {
    mutable_send_max()->::org::xrpl::rpc::v1::SendMax::MergeFrom(from.send_max());
  }
  if (from.has_deliver_min()) {
    mutable_deliver_min()->::org::xrpl::rpc::v1::DeliverMin::MergeFrom(from.deliver_min());
  }
}

void Payment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment::CopyFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  return true;
}

void Payment::Swap(Payment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Payment::InternalSwap(Payment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&paths_)->InternalSwap(CastToBase(&other->paths_));
  swap(amount_, other->amount_);
  swap(destination_, other->destination_);
  swap(destination_tag_, other->destination_tag_);
  swap(invoice_id_, other->invoice_id_);
  swap(send_max_, other->send_max_);
  swap(deliver_min_, other->deliver_min_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentChannelClaim::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_._instance.get_mutable()->channel_ = const_cast< ::org::xrpl::rpc::v1::Channel*>(
      ::org::xrpl::rpc::v1::Channel::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_._instance.get_mutable()->balance_ = const_cast< ::org::xrpl::rpc::v1::Balance*>(
      ::org::xrpl::rpc::v1::Balance::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_._instance.get_mutable()->amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_._instance.get_mutable()->payment_channel_signature_ = const_cast< ::org::xrpl::rpc::v1::PaymentChannelSignature*>(
      ::org::xrpl::rpc::v1::PaymentChannelSignature::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelClaim_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::org::xrpl::rpc::v1::PublicKey*>(
      ::org::xrpl::rpc::v1::PublicKey::internal_default_instance());
}
class PaymentChannelClaim::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Channel& channel(const PaymentChannelClaim* msg);
  static const ::org::xrpl::rpc::v1::Balance& balance(const PaymentChannelClaim* msg);
  static const ::org::xrpl::rpc::v1::Amount& amount(const PaymentChannelClaim* msg);
  static const ::org::xrpl::rpc::v1::PaymentChannelSignature& payment_channel_signature(const PaymentChannelClaim* msg);
  static const ::org::xrpl::rpc::v1::PublicKey& public_key(const PaymentChannelClaim* msg);
};

const ::org::xrpl::rpc::v1::Channel&
PaymentChannelClaim::HasBitSetters::channel(const PaymentChannelClaim* msg) {
  return *msg->channel_;
}
const ::org::xrpl::rpc::v1::Balance&
PaymentChannelClaim::HasBitSetters::balance(const PaymentChannelClaim* msg) {
  return *msg->balance_;
}
const ::org::xrpl::rpc::v1::Amount&
PaymentChannelClaim::HasBitSetters::amount(const PaymentChannelClaim* msg) {
  return *msg->amount_;
}
const ::org::xrpl::rpc::v1::PaymentChannelSignature&
PaymentChannelClaim::HasBitSetters::payment_channel_signature(const PaymentChannelClaim* msg) {
  return *msg->payment_channel_signature_;
}
const ::org::xrpl::rpc::v1::PublicKey&
PaymentChannelClaim::HasBitSetters::public_key(const PaymentChannelClaim* msg) {
  return *msg->public_key_;
}
void PaymentChannelClaim::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
void PaymentChannelClaim::clear_balance() {
  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
}
void PaymentChannelClaim::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void PaymentChannelClaim::clear_payment_channel_signature() {
  if (GetArenaNoVirtual() == nullptr && payment_channel_signature_ != nullptr) {
    delete payment_channel_signature_;
  }
  payment_channel_signature_ = nullptr;
}
void PaymentChannelClaim::clear_public_key() {
  if (GetArenaNoVirtual() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaymentChannelClaim::kChannelFieldNumber;
const int PaymentChannelClaim::kBalanceFieldNumber;
const int PaymentChannelClaim::kAmountFieldNumber;
const int PaymentChannelClaim::kPaymentChannelSignatureFieldNumber;
const int PaymentChannelClaim::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaymentChannelClaim::PaymentChannelClaim()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.PaymentChannelClaim)
}
PaymentChannelClaim::PaymentChannelClaim(const PaymentChannelClaim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    channel_ = new ::org::xrpl::rpc::v1::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from.has_balance()) {
    balance_ = new ::org::xrpl::rpc::v1::Balance(*from.balance_);
  } else {
    balance_ = nullptr;
  }
  if (from.has_amount()) {
    amount_ = new ::org::xrpl::rpc::v1::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_payment_channel_signature()) {
    payment_channel_signature_ = new ::org::xrpl::rpc::v1::PaymentChannelSignature(*from.payment_channel_signature_);
  } else {
    payment_channel_signature_ = nullptr;
  }
  if (from.has_public_key()) {
    public_key_ = new ::org::xrpl::rpc::v1::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.PaymentChannelClaim)
}

void PaymentChannelClaim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_key_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(public_key_));
}

PaymentChannelClaim::~PaymentChannelClaim() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.PaymentChannelClaim)
  SharedDtor();
}

void PaymentChannelClaim::SharedDtor() {
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete balance_;
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete payment_channel_signature_;
  if (this != internal_default_instance()) delete public_key_;
}

void PaymentChannelClaim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentChannelClaim& PaymentChannelClaim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentChannelClaim_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PaymentChannelClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && payment_channel_signature_ != nullptr) {
    delete payment_channel_signature_;
  }
  payment_channel_signature_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PaymentChannelClaim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Balance balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Amount amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PaymentChannelSignature payment_channel_signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_payment_channel_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PublicKey public_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PaymentChannelClaim::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Channel channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Balance balance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_balance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Amount amount = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PaymentChannelSignature payment_channel_signature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_payment_channel_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PublicKey public_key = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.PaymentChannelClaim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.PaymentChannelClaim)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PaymentChannelClaim::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Channel channel = 1;
  if (this->has_channel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::channel(this), output);
  }

  // .org.xrpl.rpc.v1.Balance balance = 2;
  if (this->has_balance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::balance(this), output);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.PaymentChannelSignature payment_channel_signature = 4;
  if (this->has_payment_channel_signature()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::payment_channel_signature(this), output);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 5;
  if (this->has_public_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::public_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.PaymentChannelClaim)
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentChannelClaim::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Channel channel = 1;
  if (this->has_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::channel(this), target);
  }

  // .org.xrpl.rpc.v1.Balance balance = 2;
  if (this->has_balance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::balance(this), target);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.PaymentChannelSignature payment_channel_signature = 4;
  if (this->has_payment_channel_signature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::payment_channel_signature(this), target);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 5;
  if (this->has_public_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::public_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.PaymentChannelClaim)
  return target;
}

size_t PaymentChannelClaim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Channel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .org.xrpl.rpc.v1.Balance balance = 2;
  if (this->has_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balance_);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .org.xrpl.rpc.v1.PaymentChannelSignature payment_channel_signature = 4;
  if (this->has_payment_channel_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payment_channel_signature_);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 5;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentChannelClaim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentChannelClaim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentChannelClaim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.PaymentChannelClaim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.PaymentChannelClaim)
    MergeFrom(*source);
  }
}

void PaymentChannelClaim::MergeFrom(const PaymentChannelClaim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    mutable_channel()->::org::xrpl::rpc::v1::Channel::MergeFrom(from.channel());
  }
  if (from.has_balance()) {
    mutable_balance()->::org::xrpl::rpc::v1::Balance::MergeFrom(from.balance());
  }
  if (from.has_amount()) {
    mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
  }
  if (from.has_payment_channel_signature()) {
    mutable_payment_channel_signature()->::org::xrpl::rpc::v1::PaymentChannelSignature::MergeFrom(from.payment_channel_signature());
  }
  if (from.has_public_key()) {
    mutable_public_key()->::org::xrpl::rpc::v1::PublicKey::MergeFrom(from.public_key());
  }
}

void PaymentChannelClaim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentChannelClaim::CopyFrom(const PaymentChannelClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.PaymentChannelClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentChannelClaim::IsInitialized() const {
  return true;
}

void PaymentChannelClaim::Swap(PaymentChannelClaim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaymentChannelClaim::InternalSwap(PaymentChannelClaim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
  swap(balance_, other->balance_);
  swap(amount_, other->amount_);
  swap(payment_channel_signature_, other->payment_channel_signature_);
  swap(public_key_, other->public_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentChannelClaim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentChannelCreate::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_._instance.get_mutable()->amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_._instance.get_mutable()->settle_delay_ = const_cast< ::org::xrpl::rpc::v1::SettleDelay*>(
      ::org::xrpl::rpc::v1::SettleDelay::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::org::xrpl::rpc::v1::PublicKey*>(
      ::org::xrpl::rpc::v1::PublicKey::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_._instance.get_mutable()->cancel_after_ = const_cast< ::org::xrpl::rpc::v1::CancelAfter*>(
      ::org::xrpl::rpc::v1::CancelAfter::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelCreate_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
}
class PaymentChannelCreate::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Amount& amount(const PaymentChannelCreate* msg);
  static const ::org::xrpl::rpc::v1::Destination& destination(const PaymentChannelCreate* msg);
  static const ::org::xrpl::rpc::v1::SettleDelay& settle_delay(const PaymentChannelCreate* msg);
  static const ::org::xrpl::rpc::v1::PublicKey& public_key(const PaymentChannelCreate* msg);
  static const ::org::xrpl::rpc::v1::CancelAfter& cancel_after(const PaymentChannelCreate* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const PaymentChannelCreate* msg);
};

const ::org::xrpl::rpc::v1::Amount&
PaymentChannelCreate::HasBitSetters::amount(const PaymentChannelCreate* msg) {
  return *msg->amount_;
}
const ::org::xrpl::rpc::v1::Destination&
PaymentChannelCreate::HasBitSetters::destination(const PaymentChannelCreate* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::SettleDelay&
PaymentChannelCreate::HasBitSetters::settle_delay(const PaymentChannelCreate* msg) {
  return *msg->settle_delay_;
}
const ::org::xrpl::rpc::v1::PublicKey&
PaymentChannelCreate::HasBitSetters::public_key(const PaymentChannelCreate* msg) {
  return *msg->public_key_;
}
const ::org::xrpl::rpc::v1::CancelAfter&
PaymentChannelCreate::HasBitSetters::cancel_after(const PaymentChannelCreate* msg) {
  return *msg->cancel_after_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
PaymentChannelCreate::HasBitSetters::destination_tag(const PaymentChannelCreate* msg) {
  return *msg->destination_tag_;
}
void PaymentChannelCreate::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void PaymentChannelCreate::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void PaymentChannelCreate::clear_settle_delay() {
  if (GetArenaNoVirtual() == nullptr && settle_delay_ != nullptr) {
    delete settle_delay_;
  }
  settle_delay_ = nullptr;
}
void PaymentChannelCreate::clear_public_key() {
  if (GetArenaNoVirtual() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
void PaymentChannelCreate::clear_cancel_after() {
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
}
void PaymentChannelCreate::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaymentChannelCreate::kAmountFieldNumber;
const int PaymentChannelCreate::kDestinationFieldNumber;
const int PaymentChannelCreate::kSettleDelayFieldNumber;
const int PaymentChannelCreate::kPublicKeyFieldNumber;
const int PaymentChannelCreate::kCancelAfterFieldNumber;
const int PaymentChannelCreate::kDestinationTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaymentChannelCreate::PaymentChannelCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.PaymentChannelCreate)
}
PaymentChannelCreate::PaymentChannelCreate(const PaymentChannelCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_amount()) {
    amount_ = new ::org::xrpl::rpc::v1::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_settle_delay()) {
    settle_delay_ = new ::org::xrpl::rpc::v1::SettleDelay(*from.settle_delay_);
  } else {
    settle_delay_ = nullptr;
  }
  if (from.has_public_key()) {
    public_key_ = new ::org::xrpl::rpc::v1::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from.has_cancel_after()) {
    cancel_after_ = new ::org::xrpl::rpc::v1::CancelAfter(*from.cancel_after_);
  } else {
    cancel_after_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.PaymentChannelCreate)
}

void PaymentChannelCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_tag_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
}

PaymentChannelCreate::~PaymentChannelCreate() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.PaymentChannelCreate)
  SharedDtor();
}

void PaymentChannelCreate::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete settle_delay_;
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete cancel_after_;
  if (this != internal_default_instance()) delete destination_tag_;
}

void PaymentChannelCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentChannelCreate& PaymentChannelCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentChannelCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PaymentChannelCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && settle_delay_ != nullptr) {
    delete settle_delay_;
  }
  settle_delay_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PaymentChannelCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Amount amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SettleDelay settle_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_settle_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PublicKey public_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cancel_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PaymentChannelCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Amount amount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SettleDelay settle_delay = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settle_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PublicKey public_key = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cancel_after()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.PaymentChannelCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.PaymentChannelCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PaymentChannelCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.SettleDelay settle_delay = 3;
  if (this->has_settle_delay()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::settle_delay(this), output);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 4;
  if (this->has_public_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::public_key(this), output);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
  if (this->has_cancel_after()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::cancel_after(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::destination_tag(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.PaymentChannelCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentChannelCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.SettleDelay settle_delay = 3;
  if (this->has_settle_delay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::settle_delay(this), target);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 4;
  if (this->has_public_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::public_key(this), target);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
  if (this->has_cancel_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::cancel_after(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::destination_tag(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.PaymentChannelCreate)
  return target;
}

size_t PaymentChannelCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.SettleDelay settle_delay = 3;
  if (this->has_settle_delay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settle_delay_);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 4;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
  if (this->has_cancel_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cancel_after_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 6;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentChannelCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentChannelCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentChannelCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.PaymentChannelCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.PaymentChannelCreate)
    MergeFrom(*source);
  }
}

void PaymentChannelCreate::MergeFrom(const PaymentChannelCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
  }
  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_settle_delay()) {
    mutable_settle_delay()->::org::xrpl::rpc::v1::SettleDelay::MergeFrom(from.settle_delay());
  }
  if (from.has_public_key()) {
    mutable_public_key()->::org::xrpl::rpc::v1::PublicKey::MergeFrom(from.public_key());
  }
  if (from.has_cancel_after()) {
    mutable_cancel_after()->::org::xrpl::rpc::v1::CancelAfter::MergeFrom(from.cancel_after());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
}

void PaymentChannelCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentChannelCreate::CopyFrom(const PaymentChannelCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.PaymentChannelCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentChannelCreate::IsInitialized() const {
  return true;
}

void PaymentChannelCreate::Swap(PaymentChannelCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaymentChannelCreate::InternalSwap(PaymentChannelCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
  swap(destination_, other->destination_);
  swap(settle_delay_, other->settle_delay_);
  swap(public_key_, other->public_key_);
  swap(cancel_after_, other->cancel_after_);
  swap(destination_tag_, other->destination_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentChannelCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentChannelFund::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_PaymentChannelFund_default_instance_._instance.get_mutable()->channel_ = const_cast< ::org::xrpl::rpc::v1::Channel*>(
      ::org::xrpl::rpc::v1::Channel::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelFund_default_instance_._instance.get_mutable()->amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_PaymentChannelFund_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::org::xrpl::rpc::v1::Expiration*>(
      ::org::xrpl::rpc::v1::Expiration::internal_default_instance());
}
class PaymentChannelFund::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Channel& channel(const PaymentChannelFund* msg);
  static const ::org::xrpl::rpc::v1::Amount& amount(const PaymentChannelFund* msg);
  static const ::org::xrpl::rpc::v1::Expiration& expiration(const PaymentChannelFund* msg);
};

const ::org::xrpl::rpc::v1::Channel&
PaymentChannelFund::HasBitSetters::channel(const PaymentChannelFund* msg) {
  return *msg->channel_;
}
const ::org::xrpl::rpc::v1::Amount&
PaymentChannelFund::HasBitSetters::amount(const PaymentChannelFund* msg) {
  return *msg->amount_;
}
const ::org::xrpl::rpc::v1::Expiration&
PaymentChannelFund::HasBitSetters::expiration(const PaymentChannelFund* msg) {
  return *msg->expiration_;
}
void PaymentChannelFund::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
void PaymentChannelFund::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void PaymentChannelFund::clear_expiration() {
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaymentChannelFund::kChannelFieldNumber;
const int PaymentChannelFund::kAmountFieldNumber;
const int PaymentChannelFund::kExpirationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaymentChannelFund::PaymentChannelFund()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.PaymentChannelFund)
}
PaymentChannelFund::PaymentChannelFund(const PaymentChannelFund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    channel_ = new ::org::xrpl::rpc::v1::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from.has_amount()) {
    amount_ = new ::org::xrpl::rpc::v1::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_expiration()) {
    expiration_ = new ::org::xrpl::rpc::v1::Expiration(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.PaymentChannelFund)
}

void PaymentChannelFund::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(expiration_));
}

PaymentChannelFund::~PaymentChannelFund() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.PaymentChannelFund)
  SharedDtor();
}

void PaymentChannelFund::SharedDtor() {
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete expiration_;
}

void PaymentChannelFund::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentChannelFund& PaymentChannelFund::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentChannelFund_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PaymentChannelFund::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.PaymentChannelFund)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PaymentChannelFund::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Amount amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Expiration expiration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_expiration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PaymentChannelFund::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.PaymentChannelFund)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Channel channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Amount amount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Expiration expiration = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.PaymentChannelFund)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.PaymentChannelFund)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PaymentChannelFund::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.PaymentChannelFund)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Channel channel = 1;
  if (this->has_channel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::channel(this), output);
  }

  // .org.xrpl.rpc.v1.Amount amount = 2;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 3;
  if (this->has_expiration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::expiration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.PaymentChannelFund)
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentChannelFund::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.PaymentChannelFund)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Channel channel = 1;
  if (this->has_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::channel(this), target);
  }

  // .org.xrpl.rpc.v1.Amount amount = 2;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 3;
  if (this->has_expiration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::expiration(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.PaymentChannelFund)
  return target;
}

size_t PaymentChannelFund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.PaymentChannelFund)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Channel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .org.xrpl.rpc.v1.Amount amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 3;
  if (this->has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentChannelFund::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.PaymentChannelFund)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentChannelFund* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentChannelFund>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.PaymentChannelFund)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.PaymentChannelFund)
    MergeFrom(*source);
  }
}

void PaymentChannelFund::MergeFrom(const PaymentChannelFund& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.PaymentChannelFund)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    mutable_channel()->::org::xrpl::rpc::v1::Channel::MergeFrom(from.channel());
  }
  if (from.has_amount()) {
    mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::org::xrpl::rpc::v1::Expiration::MergeFrom(from.expiration());
  }
}

void PaymentChannelFund::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.PaymentChannelFund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentChannelFund::CopyFrom(const PaymentChannelFund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.PaymentChannelFund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentChannelFund::IsInitialized() const {
  return true;
}

void PaymentChannelFund::Swap(PaymentChannelFund* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaymentChannelFund::InternalSwap(PaymentChannelFund* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
  swap(amount_, other->amount_);
  swap(expiration_, other->expiration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentChannelFund::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRegularKey::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_SetRegularKey_default_instance_._instance.get_mutable()->regular_key_ = const_cast< ::org::xrpl::rpc::v1::RegularKey*>(
      ::org::xrpl::rpc::v1::RegularKey::internal_default_instance());
}
class SetRegularKey::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::RegularKey& regular_key(const SetRegularKey* msg);
};

const ::org::xrpl::rpc::v1::RegularKey&
SetRegularKey::HasBitSetters::regular_key(const SetRegularKey* msg) {
  return *msg->regular_key_;
}
void SetRegularKey::clear_regular_key() {
  if (GetArenaNoVirtual() == nullptr && regular_key_ != nullptr) {
    delete regular_key_;
  }
  regular_key_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRegularKey::kRegularKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRegularKey::SetRegularKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.SetRegularKey)
}
SetRegularKey::SetRegularKey(const SetRegularKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regular_key()) {
    regular_key_ = new ::org::xrpl::rpc::v1::RegularKey(*from.regular_key_);
  } else {
    regular_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.SetRegularKey)
}

void SetRegularKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  regular_key_ = nullptr;
}

SetRegularKey::~SetRegularKey() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.SetRegularKey)
  SharedDtor();
}

void SetRegularKey::SharedDtor() {
  if (this != internal_default_instance()) delete regular_key_;
}

void SetRegularKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRegularKey& SetRegularKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRegularKey_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void SetRegularKey::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.SetRegularKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && regular_key_ != nullptr) {
    delete regular_key_;
  }
  regular_key_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetRegularKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.RegularKey regular_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_regular_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetRegularKey::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.SetRegularKey)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.RegularKey regular_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regular_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.SetRegularKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.SetRegularKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetRegularKey::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.SetRegularKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RegularKey regular_key = 1;
  if (this->has_regular_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::regular_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.SetRegularKey)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRegularKey::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.SetRegularKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RegularKey regular_key = 1;
  if (this->has_regular_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::regular_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.SetRegularKey)
  return target;
}

size_t SetRegularKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.SetRegularKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RegularKey regular_key = 1;
  if (this->has_regular_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regular_key_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRegularKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.SetRegularKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRegularKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRegularKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.SetRegularKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.SetRegularKey)
    MergeFrom(*source);
  }
}

void SetRegularKey::MergeFrom(const SetRegularKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.SetRegularKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_regular_key()) {
    mutable_regular_key()->::org::xrpl::rpc::v1::RegularKey::MergeFrom(from.regular_key());
  }
}

void SetRegularKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.SetRegularKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRegularKey::CopyFrom(const SetRegularKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.SetRegularKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRegularKey::IsInitialized() const {
  return true;
}

void SetRegularKey::Swap(SetRegularKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRegularKey::InternalSwap(SetRegularKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(regular_key_, other->regular_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRegularKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignerListSet::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_SignerListSet_default_instance_._instance.get_mutable()->signer_quorum_ = const_cast< ::org::xrpl::rpc::v1::SignerQuorum*>(
      ::org::xrpl::rpc::v1::SignerQuorum::internal_default_instance());
}
class SignerListSet::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::SignerQuorum& signer_quorum(const SignerListSet* msg);
};

const ::org::xrpl::rpc::v1::SignerQuorum&
SignerListSet::HasBitSetters::signer_quorum(const SignerListSet* msg) {
  return *msg->signer_quorum_;
}
void SignerListSet::clear_signer_quorum() {
  if (GetArenaNoVirtual() == nullptr && signer_quorum_ != nullptr) {
    delete signer_quorum_;
  }
  signer_quorum_ = nullptr;
}
void SignerListSet::clear_signer_entries() {
  signer_entries_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignerListSet::kSignerQuorumFieldNumber;
const int SignerListSet::kSignerEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignerListSet::SignerListSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.SignerListSet)
}
SignerListSet::SignerListSet(const SignerListSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signer_entries_(from.signer_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signer_quorum()) {
    signer_quorum_ = new ::org::xrpl::rpc::v1::SignerQuorum(*from.signer_quorum_);
  } else {
    signer_quorum_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.SignerListSet)
}

void SignerListSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  signer_quorum_ = nullptr;
}

SignerListSet::~SignerListSet() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.SignerListSet)
  SharedDtor();
}

void SignerListSet::SharedDtor() {
  if (this != internal_default_instance()) delete signer_quorum_;
}

void SignerListSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignerListSet& SignerListSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignerListSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void SignerListSet::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.SignerListSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signer_entries_.Clear();
  if (GetArenaNoVirtual() == nullptr && signer_quorum_ != nullptr) {
    delete signer_quorum_;
  }
  signer_quorum_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignerListSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_signer_quorum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_signer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignerListSet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.SignerListSet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signer_quorum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_signer_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.SignerListSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.SignerListSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignerListSet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.SignerListSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 1;
  if (this->has_signer_quorum()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::signer_quorum(this), output);
  }

  // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signer_entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->signer_entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.SignerListSet)
}

::PROTOBUF_NAMESPACE_ID::uint8* SignerListSet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.SignerListSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 1;
  if (this->has_signer_quorum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::signer_quorum(this), target);
  }

  // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signer_entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->signer_entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.SignerListSet)
  return target;
}

size_t SignerListSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.SignerListSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->signer_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->signer_entries(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 1;
  if (this->has_signer_quorum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signer_quorum_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignerListSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.SignerListSet)
  GOOGLE_DCHECK_NE(&from, this);
  const SignerListSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignerListSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.SignerListSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.SignerListSet)
    MergeFrom(*source);
  }
}

void SignerListSet::MergeFrom(const SignerListSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.SignerListSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signer_entries_.MergeFrom(from.signer_entries_);
  if (from.has_signer_quorum()) {
    mutable_signer_quorum()->::org::xrpl::rpc::v1::SignerQuorum::MergeFrom(from.signer_quorum());
  }
}

void SignerListSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.SignerListSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignerListSet::CopyFrom(const SignerListSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.SignerListSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignerListSet::IsInitialized() const {
  return true;
}

void SignerListSet::Swap(SignerListSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignerListSet::InternalSwap(SignerListSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signer_entries_)->InternalSwap(CastToBase(&other->signer_entries_));
  swap(signer_quorum_, other->signer_quorum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignerListSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TicketCreate::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_TicketCreate_default_instance_._instance.get_mutable()->count_ = const_cast< ::org::xrpl::rpc::v1::TicketCount*>(
      ::org::xrpl::rpc::v1::TicketCount::internal_default_instance());
}
class TicketCreate::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::TicketCount& count(const TicketCreate* msg);
};

const ::org::xrpl::rpc::v1::TicketCount&
TicketCreate::HasBitSetters::count(const TicketCreate* msg) {
  return *msg->count_;
}
void TicketCreate::clear_count() {
  if (GetArenaNoVirtual() == nullptr && count_ != nullptr) {
    delete count_;
  }
  count_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TicketCreate::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TicketCreate::TicketCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.TicketCreate)
}
TicketCreate::TicketCreate(const TicketCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_count()) {
    count_ = new ::org::xrpl::rpc::v1::TicketCount(*from.count_);
  } else {
    count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TicketCreate)
}

void TicketCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  count_ = nullptr;
}

TicketCreate::~TicketCreate() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TicketCreate)
  SharedDtor();
}

void TicketCreate::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
}

void TicketCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TicketCreate& TicketCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TicketCreate_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void TicketCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TicketCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && count_ != nullptr) {
    delete count_;
  }
  count_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TicketCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.TicketCount count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TicketCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.TicketCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.TicketCount count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.TicketCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.TicketCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TicketCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.TicketCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.TicketCount count = 1;
  if (this->has_count()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::count(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.TicketCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* TicketCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TicketCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.TicketCount count = 1;
  if (this->has_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::count(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TicketCreate)
  return target;
}

size_t TicketCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TicketCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.TicketCount count = 1;
  if (this->has_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TicketCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.TicketCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const TicketCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TicketCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.TicketCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.TicketCreate)
    MergeFrom(*source);
  }
}

void TicketCreate::MergeFrom(const TicketCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TicketCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_count()) {
    mutable_count()->::org::xrpl::rpc::v1::TicketCount::MergeFrom(from.count());
  }
}

void TicketCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.TicketCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketCreate::CopyFrom(const TicketCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TicketCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketCreate::IsInitialized() const {
  return true;
}

void TicketCreate::Swap(TicketCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TicketCreate::InternalSwap(TicketCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TicketCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrustSet::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_TrustSet_default_instance_._instance.get_mutable()->limit_amount_ = const_cast< ::org::xrpl::rpc::v1::LimitAmount*>(
      ::org::xrpl::rpc::v1::LimitAmount::internal_default_instance());
  ::org::xrpl::rpc::v1::_TrustSet_default_instance_._instance.get_mutable()->quality_in_ = const_cast< ::org::xrpl::rpc::v1::QualityIn*>(
      ::org::xrpl::rpc::v1::QualityIn::internal_default_instance());
  ::org::xrpl::rpc::v1::_TrustSet_default_instance_._instance.get_mutable()->quality_out_ = const_cast< ::org::xrpl::rpc::v1::QualityOut*>(
      ::org::xrpl::rpc::v1::QualityOut::internal_default_instance());
}
class TrustSet::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LimitAmount& limit_amount(const TrustSet* msg);
  static const ::org::xrpl::rpc::v1::QualityIn& quality_in(const TrustSet* msg);
  static const ::org::xrpl::rpc::v1::QualityOut& quality_out(const TrustSet* msg);
};

const ::org::xrpl::rpc::v1::LimitAmount&
TrustSet::HasBitSetters::limit_amount(const TrustSet* msg) {
  return *msg->limit_amount_;
}
const ::org::xrpl::rpc::v1::QualityIn&
TrustSet::HasBitSetters::quality_in(const TrustSet* msg) {
  return *msg->quality_in_;
}
const ::org::xrpl::rpc::v1::QualityOut&
TrustSet::HasBitSetters::quality_out(const TrustSet* msg) {
  return *msg->quality_out_;
}
void TrustSet::clear_limit_amount() {
  if (GetArenaNoVirtual() == nullptr && limit_amount_ != nullptr) {
    delete limit_amount_;
  }
  limit_amount_ = nullptr;
}
void TrustSet::clear_quality_in() {
  if (GetArenaNoVirtual() == nullptr && quality_in_ != nullptr) {
    delete quality_in_;
  }
  quality_in_ = nullptr;
}
void TrustSet::clear_quality_out() {
  if (GetArenaNoVirtual() == nullptr && quality_out_ != nullptr) {
    delete quality_out_;
  }
  quality_out_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustSet::kLimitAmountFieldNumber;
const int TrustSet::kQualityInFieldNumber;
const int TrustSet::kQualityOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustSet::TrustSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.TrustSet)
}
TrustSet::TrustSet(const TrustSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_limit_amount()) {
    limit_amount_ = new ::org::xrpl::rpc::v1::LimitAmount(*from.limit_amount_);
  } else {
    limit_amount_ = nullptr;
  }
  if (from.has_quality_in()) {
    quality_in_ = new ::org::xrpl::rpc::v1::QualityIn(*from.quality_in_);
  } else {
    quality_in_ = nullptr;
  }
  if (from.has_quality_out()) {
    quality_out_ = new ::org::xrpl::rpc::v1::QualityOut(*from.quality_out_);
  } else {
    quality_out_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TrustSet)
}

void TrustSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  ::memset(&limit_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_out_) -
      reinterpret_cast<char*>(&limit_amount_)) + sizeof(quality_out_));
}

TrustSet::~TrustSet() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TrustSet)
  SharedDtor();
}

void TrustSet::SharedDtor() {
  if (this != internal_default_instance()) delete limit_amount_;
  if (this != internal_default_instance()) delete quality_in_;
  if (this != internal_default_instance()) delete quality_out_;
}

void TrustSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrustSet& TrustSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrustSet_org_2fxrpl_2frpc_2fv1_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void TrustSet::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TrustSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && limit_amount_ != nullptr) {
    delete limit_amount_;
  }
  limit_amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quality_in_ != nullptr) {
    delete quality_in_;
  }
  quality_in_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quality_out_ != nullptr) {
    delete quality_out_;
  }
  quality_out_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrustSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LimitAmount limit_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_limit_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.QualityIn quality_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_quality_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.QualityOut quality_out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_quality_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrustSet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.TrustSet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LimitAmount limit_amount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_limit_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.QualityIn quality_in = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.QualityOut quality_out = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.TrustSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.TrustSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrustSet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.TrustSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LimitAmount limit_amount = 1;
  if (this->has_limit_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::limit_amount(this), output);
  }

  // .org.xrpl.rpc.v1.QualityIn quality_in = 2;
  if (this->has_quality_in()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_in(this), output);
  }

  // .org.xrpl.rpc.v1.QualityOut quality_out = 3;
  if (this->has_quality_out()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::quality_out(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.TrustSet)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrustSet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TrustSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LimitAmount limit_amount = 1;
  if (this->has_limit_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::limit_amount(this), target);
  }

  // .org.xrpl.rpc.v1.QualityIn quality_in = 2;
  if (this->has_quality_in()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_in(this), target);
  }

  // .org.xrpl.rpc.v1.QualityOut quality_out = 3;
  if (this->has_quality_out()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::quality_out(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TrustSet)
  return target;
}

size_t TrustSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TrustSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LimitAmount limit_amount = 1;
  if (this->has_limit_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_amount_);
  }

  // .org.xrpl.rpc.v1.QualityIn quality_in = 2;
  if (this->has_quality_in()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quality_in_);
  }

  // .org.xrpl.rpc.v1.QualityOut quality_out = 3;
  if (this->has_quality_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quality_out_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.TrustSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TrustSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrustSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.TrustSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.TrustSet)
    MergeFrom(*source);
  }
}

void TrustSet::MergeFrom(const TrustSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TrustSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_limit_amount()) {
    mutable_limit_amount()->::org::xrpl::rpc::v1::LimitAmount::MergeFrom(from.limit_amount());
  }
  if (from.has_quality_in()) {
    mutable_quality_in()->::org::xrpl::rpc::v1::QualityIn::MergeFrom(from.quality_in());
  }
  if (from.has_quality_out()) {
    mutable_quality_out()->::org::xrpl::rpc::v1::QualityOut::MergeFrom(from.quality_out());
  }
}

void TrustSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.TrustSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustSet::CopyFrom(const TrustSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TrustSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustSet::IsInitialized() const {
  return true;
}

void TrustSet::Swap(TrustSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustSet::InternalSwap(TrustSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_amount_, other->limit_amount_);
  swap(quality_in_, other->quality_in_);
  swap(quality_out_, other->quality_out_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Transaction* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Memo* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Memo >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Memo >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Signer* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Signer >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Signer >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::AccountSet* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::AccountSet >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::AccountSet >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::AccountDelete* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::AccountDelete >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::AccountDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::CheckCancel* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::CheckCancel >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::CheckCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::CheckCash* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::CheckCash >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::CheckCash >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::CheckCreate* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::CheckCreate >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::CheckCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::DepositPreauth* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::DepositPreauth >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::DepositPreauth >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::EscrowCancel* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::EscrowCancel >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::EscrowCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::EscrowCreate* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::EscrowCreate >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::EscrowCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::EscrowFinish* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::EscrowFinish >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::EscrowFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::OfferCancel* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::OfferCancel >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::OfferCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::OfferCreate* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::OfferCreate >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::OfferCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Payment_PathElement* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Payment_PathElement >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Payment_PathElement >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Payment_Path* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Payment_Path >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Payment_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Payment* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Payment >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::PaymentChannelClaim* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::PaymentChannelClaim >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::PaymentChannelClaim >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::PaymentChannelCreate* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::PaymentChannelCreate >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::PaymentChannelCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::PaymentChannelFund* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::PaymentChannelFund >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::PaymentChannelFund >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::SetRegularKey* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::SetRegularKey >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::SetRegularKey >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::SignerListSet* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::SignerListSet >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::SignerListSet >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TicketCreate* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TicketCreate >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::TicketCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TrustSet* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TrustSet >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::TrustSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
