// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_account_transaction_history.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/get_transaction.pb.h"
#include "org/xrpl/rpc/v1/account.pb.h"
#include "org/xrpl/rpc/v1/ledger.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetAccountTransactionHistoryRequest;
class GetAccountTransactionHistoryRequestDefaultTypeInternal;
extern GetAccountTransactionHistoryRequestDefaultTypeInternal _GetAccountTransactionHistoryRequest_default_instance_;
class GetAccountTransactionHistoryResponse;
class GetAccountTransactionHistoryResponseDefaultTypeInternal;
extern GetAccountTransactionHistoryResponseDefaultTypeInternal _GetAccountTransactionHistoryResponse_default_instance_;
class Marker;
class MarkerDefaultTypeInternal;
extern MarkerDefaultTypeInternal _Marker_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>(Arena*);
template<> ::org::xrpl::rpc::v1::Marker* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Marker>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetAccountTransactionHistoryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest) */ {
 public:
  GetAccountTransactionHistoryRequest();
  virtual ~GetAccountTransactionHistoryRequest();

  GetAccountTransactionHistoryRequest(const GetAccountTransactionHistoryRequest& from);
  GetAccountTransactionHistoryRequest(GetAccountTransactionHistoryRequest&& from) noexcept
    : GetAccountTransactionHistoryRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountTransactionHistoryRequest& operator=(const GetAccountTransactionHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountTransactionHistoryRequest& operator=(GetAccountTransactionHistoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountTransactionHistoryRequest& default_instance();

  enum LedgerCase {
    kLedgerSpecifier = 2,
    kLedgerRange = 3,
    LEDGER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountTransactionHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountTransactionHistoryRequest*>(
               &_GetAccountTransactionHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetAccountTransactionHistoryRequest* other);
  friend void swap(GetAccountTransactionHistoryRequest& a, GetAccountTransactionHistoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountTransactionHistoryRequest* New() const final {
    return CreateMaybeMessage<GetAccountTransactionHistoryRequest>(nullptr);
  }

  GetAccountTransactionHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountTransactionHistoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountTransactionHistoryRequest& from);
  void MergeFrom(const GetAccountTransactionHistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountTransactionHistoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::AccountAddress& account() const;
  ::org::xrpl::rpc::v1::AccountAddress* release_account();
  ::org::xrpl::rpc::v1::AccountAddress* mutable_account();
  void set_allocated_account(::org::xrpl::rpc::v1::AccountAddress* account);

  // .org.xrpl.rpc.v1.Marker marker = 7;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 7;
  const ::org::xrpl::rpc::v1::Marker& marker() const;
  ::org::xrpl::rpc::v1::Marker* release_marker();
  ::org::xrpl::rpc::v1::Marker* mutable_marker();
  void set_allocated_marker(::org::xrpl::rpc::v1::Marker* marker);

  // bool binary = 4;
  void clear_binary();
  static const int kBinaryFieldNumber = 4;
  bool binary() const;
  void set_binary(bool value);

  // bool forward = 5;
  void clear_forward();
  static const int kForwardFieldNumber = 5;
  bool forward() const;
  void set_forward(bool value);

  // uint32 limit = 6;
  void clear_limit();
  static const int kLimitFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger_specifier = 2;
  bool has_ledger_specifier() const;
  void clear_ledger_specifier();
  static const int kLedgerSpecifierFieldNumber = 2;
  const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger_specifier() const;
  ::org::xrpl::rpc::v1::LedgerSpecifier* release_ledger_specifier();
  ::org::xrpl::rpc::v1::LedgerSpecifier* mutable_ledger_specifier();
  void set_allocated_ledger_specifier(::org::xrpl::rpc::v1::LedgerSpecifier* ledger_specifier);

  // .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
  bool has_ledger_range() const;
  void clear_ledger_range();
  static const int kLedgerRangeFieldNumber = 3;
  const ::org::xrpl::rpc::v1::LedgerRange& ledger_range() const;
  ::org::xrpl::rpc::v1::LedgerRange* release_ledger_range();
  ::org::xrpl::rpc::v1::LedgerRange* mutable_ledger_range();
  void set_allocated_ledger_range(::org::xrpl::rpc::v1::LedgerRange* ledger_range);

  void clear_ledger();
  LedgerCase ledger_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest)
 private:
  class HasBitSetters;
  void set_has_ledger_specifier();
  void set_has_ledger_range();

  inline bool has_ledger() const;
  inline void clear_has_ledger();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::AccountAddress* account_;
  ::org::xrpl::rpc::v1::Marker* marker_;
  bool binary_;
  bool forward_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  union LedgerUnion {
    LedgerUnion() {}
    ::org::xrpl::rpc::v1::LedgerSpecifier* ledger_specifier_;
    ::org::xrpl::rpc::v1::LedgerRange* ledger_range_;
  } ledger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto;
};
// -------------------------------------------------------------------

class GetAccountTransactionHistoryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse) */ {
 public:
  GetAccountTransactionHistoryResponse();
  virtual ~GetAccountTransactionHistoryResponse();

  GetAccountTransactionHistoryResponse(const GetAccountTransactionHistoryResponse& from);
  GetAccountTransactionHistoryResponse(GetAccountTransactionHistoryResponse&& from) noexcept
    : GetAccountTransactionHistoryResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountTransactionHistoryResponse& operator=(const GetAccountTransactionHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountTransactionHistoryResponse& operator=(GetAccountTransactionHistoryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountTransactionHistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountTransactionHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountTransactionHistoryResponse*>(
               &_GetAccountTransactionHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetAccountTransactionHistoryResponse* other);
  friend void swap(GetAccountTransactionHistoryResponse& a, GetAccountTransactionHistoryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountTransactionHistoryResponse* New() const final {
    return CreateMaybeMessage<GetAccountTransactionHistoryResponse>(nullptr);
  }

  GetAccountTransactionHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountTransactionHistoryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountTransactionHistoryResponse& from);
  void MergeFrom(const GetAccountTransactionHistoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountTransactionHistoryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.GetTransactionResponse transactions = 6;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 6;
  ::org::xrpl::rpc::v1::GetTransactionResponse* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::GetTransactionResponse >*
      mutable_transactions();
  const ::org::xrpl::rpc::v1::GetTransactionResponse& transactions(int index) const;
  ::org::xrpl::rpc::v1::GetTransactionResponse* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::GetTransactionResponse >&
      transactions() const;

  // .org.xrpl.rpc.v1.AccountAddress account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::org::xrpl::rpc::v1::AccountAddress& account() const;
  ::org::xrpl::rpc::v1::AccountAddress* release_account();
  ::org::xrpl::rpc::v1::AccountAddress* mutable_account();
  void set_allocated_account(::org::xrpl::rpc::v1::AccountAddress* account);

  // .org.xrpl.rpc.v1.Marker marker = 5;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 5;
  const ::org::xrpl::rpc::v1::Marker& marker() const;
  ::org::xrpl::rpc::v1::Marker* release_marker();
  ::org::xrpl::rpc::v1::Marker* mutable_marker();
  void set_allocated_marker(::org::xrpl::rpc::v1::Marker* marker);

  // uint32 ledger_index_min = 2;
  void clear_ledger_index_min();
  static const int kLedgerIndexMinFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_min() const;
  void set_ledger_index_min(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ledger_index_max = 3;
  void clear_ledger_index_max();
  static const int kLedgerIndexMaxFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_max() const;
  void set_ledger_index_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool validated = 7;
  void clear_validated();
  static const int kValidatedFieldNumber = 7;
  bool validated() const;
  void set_validated(bool value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::GetTransactionResponse > transactions_;
  ::org::xrpl::rpc::v1::AccountAddress* account_;
  ::org::xrpl::rpc::v1::Marker* marker_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  bool validated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto;
};
// -------------------------------------------------------------------

class Marker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Marker) */ {
 public:
  Marker();
  virtual ~Marker();

  Marker(const Marker& from);
  Marker(Marker&& from) noexcept
    : Marker() {
    *this = ::std::move(from);
  }

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker& operator=(Marker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Marker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Marker* internal_default_instance() {
    return reinterpret_cast<const Marker*>(
               &_Marker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Marker* other);
  friend void swap(Marker& a, Marker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Marker* New() const final {
    return CreateMaybeMessage<Marker>(nullptr);
  }

  Marker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Marker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Marker& from);
  void MergeFrom(const Marker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Marker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ledger_index = 1;
  void clear_ledger_index();
  static const int kLedgerIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index() const;
  void set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 account_sequence = 2;
  void clear_account_sequence();
  static const int kAccountSequenceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_sequence() const;
  void set_account_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Marker)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAccountTransactionHistoryRequest

// .org.xrpl.rpc.v1.AccountAddress account = 1;
inline bool GetAccountTransactionHistoryRequest::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::AccountAddress& GetAccountTransactionHistoryRequest::account() const {
  const ::org::xrpl::rpc::v1::AccountAddress* p = account_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::AccountAddress*>(
      &::org::xrpl::rpc::v1::_AccountAddress_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountAddress* GetAccountTransactionHistoryRequest::release_account() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.account)
  
  ::org::xrpl::rpc::v1::AccountAddress* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::AccountAddress* GetAccountTransactionHistoryRequest::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::AccountAddress>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.account)
  return account_;
}
inline void GetAccountTransactionHistoryRequest::set_allocated_account(::org::xrpl::rpc::v1::AccountAddress* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.account)
}

// .org.xrpl.rpc.v1.LedgerSpecifier ledger_specifier = 2;
inline bool GetAccountTransactionHistoryRequest::has_ledger_specifier() const {
  return ledger_case() == kLedgerSpecifier;
}
inline void GetAccountTransactionHistoryRequest::set_has_ledger_specifier() {
  _oneof_case_[0] = kLedgerSpecifier;
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetAccountTransactionHistoryRequest::release_ledger_specifier() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_specifier)
  if (has_ledger_specifier()) {
    clear_has_ledger();
      ::org::xrpl::rpc::v1::LedgerSpecifier* temp = ledger_.ledger_specifier_;
    ledger_.ledger_specifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::LedgerSpecifier& GetAccountTransactionHistoryRequest::ledger_specifier() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_specifier)
  return has_ledger_specifier()
      ? *ledger_.ledger_specifier_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::LedgerSpecifier*>(&::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetAccountTransactionHistoryRequest::mutable_ledger_specifier() {
  if (!has_ledger_specifier()) {
    clear_ledger();
    set_has_ledger_specifier();
    ledger_.ledger_specifier_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::LedgerSpecifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_specifier)
  return ledger_.ledger_specifier_;
}

// .org.xrpl.rpc.v1.LedgerRange ledger_range = 3;
inline bool GetAccountTransactionHistoryRequest::has_ledger_range() const {
  return ledger_case() == kLedgerRange;
}
inline void GetAccountTransactionHistoryRequest::set_has_ledger_range() {
  _oneof_case_[0] = kLedgerRange;
}
inline ::org::xrpl::rpc::v1::LedgerRange* GetAccountTransactionHistoryRequest::release_ledger_range() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_range)
  if (has_ledger_range()) {
    clear_has_ledger();
      ::org::xrpl::rpc::v1::LedgerRange* temp = ledger_.ledger_range_;
    ledger_.ledger_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::LedgerRange& GetAccountTransactionHistoryRequest::ledger_range() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_range)
  return has_ledger_range()
      ? *ledger_.ledger_range_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::LedgerRange*>(&::org::xrpl::rpc::v1::_LedgerRange_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerRange* GetAccountTransactionHistoryRequest::mutable_ledger_range() {
  if (!has_ledger_range()) {
    clear_ledger();
    set_has_ledger_range();
    ledger_.ledger_range_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::LedgerRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.ledger_range)
  return ledger_.ledger_range_;
}

// bool binary = 4;
inline void GetAccountTransactionHistoryRequest::clear_binary() {
  binary_ = false;
}
inline bool GetAccountTransactionHistoryRequest::binary() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.binary)
  return binary_;
}
inline void GetAccountTransactionHistoryRequest::set_binary(bool value) {
  
  binary_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.binary)
}

// bool forward = 5;
inline void GetAccountTransactionHistoryRequest::clear_forward() {
  forward_ = false;
}
inline bool GetAccountTransactionHistoryRequest::forward() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.forward)
  return forward_;
}
inline void GetAccountTransactionHistoryRequest::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.forward)
}

// uint32 limit = 6;
inline void GetAccountTransactionHistoryRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountTransactionHistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.limit)
  return limit_;
}
inline void GetAccountTransactionHistoryRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.limit)
}

// .org.xrpl.rpc.v1.Marker marker = 7;
inline bool GetAccountTransactionHistoryRequest::has_marker() const {
  return this != internal_default_instance() && marker_ != nullptr;
}
inline void GetAccountTransactionHistoryRequest::clear_marker() {
  if (GetArenaNoVirtual() == nullptr && marker_ != nullptr) {
    delete marker_;
  }
  marker_ = nullptr;
}
inline const ::org::xrpl::rpc::v1::Marker& GetAccountTransactionHistoryRequest::marker() const {
  const ::org::xrpl::rpc::v1::Marker* p = marker_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.marker)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Marker*>(
      &::org::xrpl::rpc::v1::_Marker_default_instance_);
}
inline ::org::xrpl::rpc::v1::Marker* GetAccountTransactionHistoryRequest::release_marker() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.marker)
  
  ::org::xrpl::rpc::v1::Marker* temp = marker_;
  marker_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Marker* GetAccountTransactionHistoryRequest::mutable_marker() {
  
  if (marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Marker>(GetArenaNoVirtual());
    marker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.marker)
  return marker_;
}
inline void GetAccountTransactionHistoryRequest::set_allocated_marker(::org::xrpl::rpc::v1::Marker* marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete marker_;
  }
  if (marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marker, submessage_arena);
    }
    
  } else {
    
  }
  marker_ = marker;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetAccountTransactionHistoryRequest.marker)
}

inline bool GetAccountTransactionHistoryRequest::has_ledger() const {
  return ledger_case() != LEDGER_NOT_SET;
}
inline void GetAccountTransactionHistoryRequest::clear_has_ledger() {
  _oneof_case_[0] = LEDGER_NOT_SET;
}
inline GetAccountTransactionHistoryRequest::LedgerCase GetAccountTransactionHistoryRequest::ledger_case() const {
  return GetAccountTransactionHistoryRequest::LedgerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetAccountTransactionHistoryResponse

// .org.xrpl.rpc.v1.AccountAddress account = 1;
inline bool GetAccountTransactionHistoryResponse::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::AccountAddress& GetAccountTransactionHistoryResponse::account() const {
  const ::org::xrpl::rpc::v1::AccountAddress* p = account_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::AccountAddress*>(
      &::org::xrpl::rpc::v1::_AccountAddress_default_instance_);
}
inline ::org::xrpl::rpc::v1::AccountAddress* GetAccountTransactionHistoryResponse::release_account() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.account)
  
  ::org::xrpl::rpc::v1::AccountAddress* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::AccountAddress* GetAccountTransactionHistoryResponse::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::AccountAddress>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.account)
  return account_;
}
inline void GetAccountTransactionHistoryResponse::set_allocated_account(::org::xrpl::rpc::v1::AccountAddress* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.account)
}

// uint32 ledger_index_min = 2;
inline void GetAccountTransactionHistoryResponse::clear_ledger_index_min() {
  ledger_index_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountTransactionHistoryResponse::ledger_index_min() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.ledger_index_min)
  return ledger_index_min_;
}
inline void GetAccountTransactionHistoryResponse::set_ledger_index_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_min_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.ledger_index_min)
}

// uint32 ledger_index_max = 3;
inline void GetAccountTransactionHistoryResponse::clear_ledger_index_max() {
  ledger_index_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountTransactionHistoryResponse::ledger_index_max() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.ledger_index_max)
  return ledger_index_max_;
}
inline void GetAccountTransactionHistoryResponse::set_ledger_index_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_max_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.ledger_index_max)
}

// uint32 limit = 4;
inline void GetAccountTransactionHistoryResponse::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountTransactionHistoryResponse::limit() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.limit)
  return limit_;
}
inline void GetAccountTransactionHistoryResponse::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.limit)
}

// .org.xrpl.rpc.v1.Marker marker = 5;
inline bool GetAccountTransactionHistoryResponse::has_marker() const {
  return this != internal_default_instance() && marker_ != nullptr;
}
inline void GetAccountTransactionHistoryResponse::clear_marker() {
  if (GetArenaNoVirtual() == nullptr && marker_ != nullptr) {
    delete marker_;
  }
  marker_ = nullptr;
}
inline const ::org::xrpl::rpc::v1::Marker& GetAccountTransactionHistoryResponse::marker() const {
  const ::org::xrpl::rpc::v1::Marker* p = marker_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.marker)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Marker*>(
      &::org::xrpl::rpc::v1::_Marker_default_instance_);
}
inline ::org::xrpl::rpc::v1::Marker* GetAccountTransactionHistoryResponse::release_marker() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.marker)
  
  ::org::xrpl::rpc::v1::Marker* temp = marker_;
  marker_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Marker* GetAccountTransactionHistoryResponse::mutable_marker() {
  
  if (marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Marker>(GetArenaNoVirtual());
    marker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.marker)
  return marker_;
}
inline void GetAccountTransactionHistoryResponse::set_allocated_marker(::org::xrpl::rpc::v1::Marker* marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete marker_;
  }
  if (marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marker, submessage_arena);
    }
    
  } else {
    
  }
  marker_ = marker;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.marker)
}

// repeated .org.xrpl.rpc.v1.GetTransactionResponse transactions = 6;
inline int GetAccountTransactionHistoryResponse::transactions_size() const {
  return transactions_.size();
}
inline ::org::xrpl::rpc::v1::GetTransactionResponse* GetAccountTransactionHistoryResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::GetTransactionResponse >*
GetAccountTransactionHistoryResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.transactions)
  return &transactions_;
}
inline const ::org::xrpl::rpc::v1::GetTransactionResponse& GetAccountTransactionHistoryResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.transactions)
  return transactions_.Get(index);
}
inline ::org::xrpl::rpc::v1::GetTransactionResponse* GetAccountTransactionHistoryResponse::add_transactions() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.transactions)
  return transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::GetTransactionResponse >&
GetAccountTransactionHistoryResponse::transactions() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.transactions)
  return transactions_;
}

// bool validated = 7;
inline void GetAccountTransactionHistoryResponse::clear_validated() {
  validated_ = false;
}
inline bool GetAccountTransactionHistoryResponse::validated() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.validated)
  return validated_;
}
inline void GetAccountTransactionHistoryResponse::set_validated(bool value) {
  
  validated_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetAccountTransactionHistoryResponse.validated)
}

// -------------------------------------------------------------------

// Marker

// uint32 ledger_index = 1;
inline void Marker::clear_ledger_index() {
  ledger_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Marker::ledger_index() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Marker.ledger_index)
  return ledger_index_;
}
inline void Marker::set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.Marker.ledger_index)
}

// uint32 account_sequence = 2;
inline void Marker::clear_account_sequence() {
  account_sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Marker::account_sequence() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Marker.account_sequence)
  return account_sequence_;
}
inline void Marker::set_account_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  account_sequence_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.Marker.account_sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5faccount_5ftransaction_5fhistory_2eproto
