// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/ledger.proto

#include "org/xrpl/rpc/v1/ledger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class LedgerSpecifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LedgerSpecifier> _instance;
  int shortcut_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
} _LedgerSpecifier_default_instance_;
class LedgerRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LedgerRange> _instance;
} _LedgerRange_default_instance_;
class RawLedgerObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawLedgerObject> _instance;
} _RawLedgerObject_default_instance_;
class RawLedgerObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawLedgerObjects> _instance;
} _RawLedgerObjects_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_LedgerRange_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::LedgerRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::LedgerRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto}, {}};

static void InitDefaultsscc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::LedgerSpecifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::LedgerSpecifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto}, {}};

static void InitDefaultsscc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_RawLedgerObject_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::RawLedgerObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::RawLedgerObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto}, {}};

static void InitDefaultsscc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_RawLedgerObjects_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::RawLedgerObjects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::RawLedgerObjects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto}, {
      &scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerSpecifier, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerSpecifier, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::org::xrpl::rpc::v1::LedgerSpecifierDefaultTypeInternal, shortcut_),
  offsetof(::org::xrpl::rpc::v1::LedgerSpecifierDefaultTypeInternal, sequence_),
  offsetof(::org::xrpl::rpc::v1::LedgerSpecifierDefaultTypeInternal, hash_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerSpecifier, ledger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerRange, ledger_index_min_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerRange, ledger_index_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, data_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObjects, objects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::LedgerSpecifier)},
  { 9, -1, sizeof(::org::xrpl::rpc::v1::LedgerRange)},
  { 16, -1, sizeof(::org::xrpl::rpc::v1::RawLedgerObject)},
  { 23, -1, sizeof(::org::xrpl::rpc::v1::RawLedgerObjects)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_LedgerRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_RawLedgerObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_RawLedgerObjects_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[] =
  "\n\034org/xrpl/rpc/v1/ledger.proto\022\017org.xrpl"
  ".rpc.v1\"\347\001\n\017LedgerSpecifier\022=\n\010shortcut\030"
  "\001 \001(\0162).org.xrpl.rpc.v1.LedgerSpecifier."
  "ShortcutH\000\022\022\n\010sequence\030\002 \001(\rH\000\022\016\n\004hash\030\003"
  " \001(\014H\000\"g\n\010Shortcut\022\030\n\024SHORTCUT_UNSPECIFI"
  "ED\020\000\022\026\n\022SHORTCUT_VALIDATED\020\001\022\023\n\017SHORTCUT"
  "_CLOSED\020\002\022\024\n\020SHORTCUT_CURRENT\020\003B\010\n\006ledge"
  "r\"A\n\013LedgerRange\022\030\n\020ledger_index_min\030\001 \001"
  "(\r\022\030\n\020ledger_index_max\030\002 \001(\r\",\n\017RawLedge"
  "rObject\022\014\n\004data\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\"E\n\020Ra"
  "wLedgerObjects\0221\n\007objects\030\001 \003(\0132 .org.xr"
  "pl.rpc.v1.RawLedgerObjectB\023\n\017org.xrpl.rp"
  "c.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_sccs[4] = {
  &scc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,
  &scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,
  &scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,
  &scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fledger_2eproto, "org/xrpl/rpc/v1/ledger.proto", 494,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto, 4, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fledger_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LedgerSpecifier_Shortcut_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
  return file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[0];
}
bool LedgerSpecifier_Shortcut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_UNSPECIFIED;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_VALIDATED;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_CLOSED;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_CURRENT;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::Shortcut_MIN;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::Shortcut_MAX;
constexpr int LedgerSpecifier::Shortcut_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LedgerSpecifier::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_.shortcut_ = 0;
  ::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_.sequence_ = 0u;
  ::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class LedgerSpecifier::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerSpecifier::kShortcutFieldNumber;
const int LedgerSpecifier::kSequenceFieldNumber;
const int LedgerSpecifier::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerSpecifier::LedgerSpecifier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.LedgerSpecifier)
}
LedgerSpecifier::LedgerSpecifier(const LedgerSpecifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ledger();
  switch (from.ledger_case()) {
    case kShortcut: {
      set_shortcut(from.shortcut());
      break;
    }
    case kSequence: {
      set_sequence(from.sequence());
      break;
    }
    case kHash: {
      set_hash(from.hash());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.LedgerSpecifier)
}

void LedgerSpecifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base);
  clear_has_ledger();
}

LedgerSpecifier::~LedgerSpecifier() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.LedgerSpecifier)
  SharedDtor();
}

void LedgerSpecifier::SharedDtor() {
  if (has_ledger()) {
    clear_ledger();
  }
}

void LedgerSpecifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerSpecifier& LedgerSpecifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base);
  return *internal_default_instance();
}


void LedgerSpecifier::clear_ledger() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.LedgerSpecifier)
  switch (ledger_case()) {
    case kShortcut: {
      // No need to clear
      break;
    }
    case kSequence: {
      // No need to clear
      break;
    }
    case kHash: {
      ledger_.hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEDGER_NOT_SET;
}


void LedgerSpecifier::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.LedgerSpecifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ledger();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerSpecifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_shortcut(static_cast<::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut>(val));
        } else goto handle_unusual;
        continue;
      // uint32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_sequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerSpecifier::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.LedgerSpecifier)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shortcut(static_cast< ::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_ledger();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_.sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.LedgerSpecifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.LedgerSpecifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerSpecifier::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.LedgerSpecifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
  if (has_shortcut()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->shortcut(), output);
  }

  // uint32 sequence = 2;
  if (has_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // bytes hash = 3;
  if (has_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.LedgerSpecifier)
}

::PROTOBUF_NAMESPACE_ID::uint8* LedgerSpecifier::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.LedgerSpecifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
  if (has_shortcut()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->shortcut(), target);
  }

  // uint32 sequence = 2;
  if (has_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // bytes hash = 3;
  if (has_hash()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.LedgerSpecifier)
  return target;
}

size_t LedgerSpecifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.LedgerSpecifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ledger_case()) {
    // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
    case kShortcut: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->shortcut());
      break;
    }
    // uint32 sequence = 2;
    case kSequence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sequence());
      break;
    }
    // bytes hash = 3;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->hash());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerSpecifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.LedgerSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerSpecifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LedgerSpecifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.LedgerSpecifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.LedgerSpecifier)
    MergeFrom(*source);
  }
}

void LedgerSpecifier::MergeFrom(const LedgerSpecifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.LedgerSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ledger_case()) {
    case kShortcut: {
      set_shortcut(from.shortcut());
      break;
    }
    case kSequence: {
      set_sequence(from.sequence());
      break;
    }
    case kHash: {
      set_hash(from.hash());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
}

void LedgerSpecifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.LedgerSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerSpecifier::CopyFrom(const LedgerSpecifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.LedgerSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerSpecifier::IsInitialized() const {
  return true;
}

void LedgerSpecifier::Swap(LedgerSpecifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerSpecifier::InternalSwap(LedgerSpecifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ledger_, other->ledger_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LedgerSpecifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LedgerRange::InitAsDefaultInstance() {
}
class LedgerRange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerRange::kLedgerIndexMinFieldNumber;
const int LedgerRange::kLedgerIndexMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerRange::LedgerRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.LedgerRange)
}
LedgerRange::LedgerRange(const LedgerRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ledger_index_min_, &from.ledger_index_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&ledger_index_max_) -
    reinterpret_cast<char*>(&ledger_index_min_)) + sizeof(ledger_index_max_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.LedgerRange)
}

void LedgerRange::SharedCtor() {
  ::memset(&ledger_index_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ledger_index_max_) -
      reinterpret_cast<char*>(&ledger_index_min_)) + sizeof(ledger_index_max_));
}

LedgerRange::~LedgerRange() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.LedgerRange)
  SharedDtor();
}

void LedgerRange::SharedDtor() {
}

void LedgerRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerRange& LedgerRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LedgerRange_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base);
  return *internal_default_instance();
}


void LedgerRange::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.LedgerRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ledger_index_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ledger_index_max_) -
      reinterpret_cast<char*>(&ledger_index_min_)) + sizeof(ledger_index_max_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ledger_index_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ledger_index_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ledger_index_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ledger_index_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.LedgerRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ledger_index_min = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ledger_index_max = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.LedgerRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.LedgerRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.LedgerRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index_min = 1;
  if (this->ledger_index_min() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ledger_index_min(), output);
  }

  // uint32 ledger_index_max = 2;
  if (this->ledger_index_max() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ledger_index_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.LedgerRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* LedgerRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.LedgerRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index_min = 1;
  if (this->ledger_index_min() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->ledger_index_min(), target);
  }

  // uint32 ledger_index_max = 2;
  if (this->ledger_index_max() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->ledger_index_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.LedgerRange)
  return target;
}

size_t LedgerRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.LedgerRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ledger_index_min = 1;
  if (this->ledger_index_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index_min());
  }

  // uint32 ledger_index_max = 2;
  if (this->ledger_index_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index_max());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.LedgerRange)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LedgerRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.LedgerRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.LedgerRange)
    MergeFrom(*source);
  }
}

void LedgerRange::MergeFrom(const LedgerRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.LedgerRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ledger_index_min() != 0) {
    set_ledger_index_min(from.ledger_index_min());
  }
  if (from.ledger_index_max() != 0) {
    set_ledger_index_max(from.ledger_index_max());
  }
}

void LedgerRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.LedgerRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerRange::CopyFrom(const LedgerRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.LedgerRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerRange::IsInitialized() const {
  return true;
}

void LedgerRange::Swap(LedgerRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerRange::InternalSwap(LedgerRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ledger_index_min_, other->ledger_index_min_);
  swap(ledger_index_max_, other->ledger_index_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LedgerRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawLedgerObject::InitAsDefaultInstance() {
}
class RawLedgerObject::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawLedgerObject::kDataFieldNumber;
const int RawLedgerObject::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawLedgerObject::RawLedgerObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.RawLedgerObject)
}
RawLedgerObject::RawLedgerObject(const RawLedgerObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.RawLedgerObject)
}

void RawLedgerObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RawLedgerObject::~RawLedgerObject() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.RawLedgerObject)
  SharedDtor();
}

void RawLedgerObject::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RawLedgerObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawLedgerObject& RawLedgerObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawLedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base);
  return *internal_default_instance();
}


void RawLedgerObject::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.RawLedgerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawLedgerObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawLedgerObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.RawLedgerObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.RawLedgerObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.RawLedgerObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawLedgerObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.RawLedgerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.RawLedgerObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawLedgerObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.RawLedgerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.RawLedgerObject)
  return target;
}

size_t RawLedgerObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.RawLedgerObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawLedgerObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.RawLedgerObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RawLedgerObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawLedgerObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.RawLedgerObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.RawLedgerObject)
    MergeFrom(*source);
  }
}

void RawLedgerObject::MergeFrom(const RawLedgerObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.RawLedgerObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void RawLedgerObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.RawLedgerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawLedgerObject::CopyFrom(const RawLedgerObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.RawLedgerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawLedgerObject::IsInitialized() const {
  return true;
}

void RawLedgerObject::Swap(RawLedgerObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawLedgerObject::InternalSwap(RawLedgerObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RawLedgerObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawLedgerObjects::InitAsDefaultInstance() {
}
class RawLedgerObjects::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawLedgerObjects::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawLedgerObjects::RawLedgerObjects()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.RawLedgerObjects)
}
RawLedgerObjects::RawLedgerObjects(const RawLedgerObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.RawLedgerObjects)
}

void RawLedgerObjects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base);
}

RawLedgerObjects::~RawLedgerObjects() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.RawLedgerObjects)
  SharedDtor();
}

void RawLedgerObjects::SharedDtor() {
}

void RawLedgerObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawLedgerObjects& RawLedgerObjects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base);
  return *internal_default_instance();
}


void RawLedgerObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.RawLedgerObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawLedgerObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawLedgerObjects::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.RawLedgerObjects)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.RawLedgerObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.RawLedgerObjects)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawLedgerObjects::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.RawLedgerObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.RawLedgerObjects)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawLedgerObjects::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.RawLedgerObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objects(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.RawLedgerObjects)
  return target;
}

size_t RawLedgerObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.RawLedgerObjects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawLedgerObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.RawLedgerObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const RawLedgerObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawLedgerObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.RawLedgerObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.RawLedgerObjects)
    MergeFrom(*source);
  }
}

void RawLedgerObjects::MergeFrom(const RawLedgerObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.RawLedgerObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void RawLedgerObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.RawLedgerObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawLedgerObjects::CopyFrom(const RawLedgerObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.RawLedgerObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawLedgerObjects::IsInitialized() const {
  return true;
}

void RawLedgerObjects::Swap(RawLedgerObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawLedgerObjects::InternalSwap(RawLedgerObjects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawLedgerObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::LedgerSpecifier* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::LedgerSpecifier >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::LedgerSpecifier >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::LedgerRange* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::LedgerRange >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::LedgerRange >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::RawLedgerObject* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::RawLedgerObject >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::RawLedgerObject >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::RawLedgerObjects* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::RawLedgerObjects >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::RawLedgerObjects >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
