// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/meta.proto

#include "org/xrpl/rpc/v1/meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeliveredAmount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class SubmitMetadataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitMetadataRequest> _instance;
} _SubmitMetadataRequest_default_instance_;
class SubmitMetadataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitMetadataResponse> _instance;
} _SubmitMetadataResponse_default_instance_;
class PrepareLedgerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareLedgerRequest> _instance;
} _PrepareLedgerRequest_default_instance_;
class PrepareLedgerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareLedgerResponse> _instance;
} _PrepareLedgerResponse_default_instance_;
class MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Meta> _instance;
} _Meta_default_instance_;
class TransactionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionResult> _instance;
} _TransactionResult_default_instance_;
class AffectedNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AffectedNode> _instance;
  const ::org::xrpl::rpc::v1::CreatedNode* created_node_;
  const ::org::xrpl::rpc::v1::DeletedNode* deleted_node_;
  const ::org::xrpl::rpc::v1::ModifiedNode* modified_node_;
} _AffectedNode_default_instance_;
class CreatedNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatedNode> _instance;
} _CreatedNode_default_instance_;
class DeletedNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletedNode> _instance;
} _DeletedNode_default_instance_;
class ModifiedNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifiedNode> _instance;
} _ModifiedNode_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_AffectedNode_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::AffectedNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::AffectedNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {
      &scc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
      &scc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
      &scc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,}};

static void InitDefaultsscc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_CreatedNode_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::CreatedNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::CreatedNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {
      &scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,}};

static void InitDefaultsscc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_DeletedNode_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::DeletedNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::DeletedNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {
      &scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,}};

static void InitDefaultsscc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Meta_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Meta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {
      &scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
      &scc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
      &scc_info_DeliveredAmount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_ModifiedNode_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::ModifiedNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::ModifiedNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {
      &scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_PrepareLedgerRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_PrepareLedgerRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::PrepareLedgerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::PrepareLedgerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareLedgerRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrepareLedgerRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {}};

static void InitDefaultsscc_info_PrepareLedgerResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_PrepareLedgerResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::PrepareLedgerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::PrepareLedgerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareLedgerResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrepareLedgerResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {}};

static void InitDefaultsscc_info_SubmitMetadataRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_SubmitMetadataRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::SubmitMetadataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::SubmitMetadataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitMetadataRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SubmitMetadataRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {
      &scc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SubmitMetadataResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_SubmitMetadataResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::SubmitMetadataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::SubmitMetadataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitMetadataResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubmitMetadataResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {}};

static void InitDefaultsscc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_TransactionResult_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::TransactionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::TransactionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitMetadataRequest, affected_nodes_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitMetadataRequest, ledger_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitMetadataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitMetadataResponse, success_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SubmitMetadataResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PrepareLedgerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PrepareLedgerRequest, ledger_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PrepareLedgerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PrepareLedgerResponse, success_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PrepareLedgerResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Meta, transaction_index_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Meta, transaction_result_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Meta, affected_nodes_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Meta, delivered_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionResult, result_type_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AffectedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AffectedNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AffectedNode, ledger_entry_type_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AffectedNode, ledger_index_),
  offsetof(::org::xrpl::rpc::v1::AffectedNodeDefaultTypeInternal, created_node_),
  offsetof(::org::xrpl::rpc::v1::AffectedNodeDefaultTypeInternal, deleted_node_),
  offsetof(::org::xrpl::rpc::v1::AffectedNodeDefaultTypeInternal, modified_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AffectedNode, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CreatedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::CreatedNode, new_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DeletedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DeletedNode, final_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::ModifiedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::ModifiedNode, final_fields_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::ModifiedNode, previous_fields_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::ModifiedNode, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::ModifiedNode, previous_transaction_ledger_sequence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::SubmitMetadataRequest)},
  { 7, -1, sizeof(::org::xrpl::rpc::v1::SubmitMetadataResponse)},
  { 14, -1, sizeof(::org::xrpl::rpc::v1::PrepareLedgerRequest)},
  { 20, -1, sizeof(::org::xrpl::rpc::v1::PrepareLedgerResponse)},
  { 27, -1, sizeof(::org::xrpl::rpc::v1::Meta)},
  { 36, -1, sizeof(::org::xrpl::rpc::v1::TransactionResult)},
  { 43, -1, sizeof(::org::xrpl::rpc::v1::AffectedNode)},
  { 54, -1, sizeof(::org::xrpl::rpc::v1::CreatedNode)},
  { 60, -1, sizeof(::org::xrpl::rpc::v1::DeletedNode)},
  { 66, -1, sizeof(::org::xrpl::rpc::v1::ModifiedNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_SubmitMetadataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_SubmitMetadataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_PrepareLedgerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_PrepareLedgerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_TransactionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_AffectedNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_CreatedNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_DeletedNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_ModifiedNode_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto[] =
  "\n\032org/xrpl/rpc/v1/meta.proto\022\017org.xrpl.r"
  "pc.v1\032$org/xrpl/rpc/v1/ledger_objects.pr"
  "oto\032\034org/xrpl/rpc/v1/common.proto\"g\n\025Sub"
  "mitMetadataRequest\0225\n\016affected_nodes\030\001 \003"
  "(\0132\035.org.xrpl.rpc.v1.AffectedNode\022\027\n\017led"
  "ger_sequence\030\002 \001(\r\"6\n\026SubmitMetadataResp"
  "onse\022\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\",\n\024Pr"
  "epareLedgerRequest\022\024\n\014ledger_index\030\001 \001(\r"
  "\"5\n\025PrepareLedgerResponse\022\017\n\007success\030\001 \001"
  "(\010\022\013\n\003msg\030\002 \001(\t\"\330\001\n\004Meta\022\035\n\021transaction_"
  "index\030\001 \001(\004B\0020\001\022>\n\022transaction_result\030\002 "
  "\001(\0132\".org.xrpl.rpc.v1.TransactionResult\022"
  "5\n\016affected_nodes\030\003 \003(\0132\035.org.xrpl.rpc.v"
  "1.AffectedNode\022:\n\020delivered_amount\030\004 \001(\013"
  "2 .org.xrpl.rpc.v1.DeliveredAmount\"\221\002\n\021T"
  "ransactionResult\022B\n\013result_type\030\001 \001(\0162-."
  "org.xrpl.rpc.v1.TransactionResult.Result"
  "Type\022\016\n\006result\030\002 \001(\t\"\247\001\n\nResultType\022\033\n\027R"
  "ESULT_TYPE_UNSPECIFIED\020\000\022\023\n\017RESULT_TYPE_"
  "TEC\020\001\022\023\n\017RESULT_TYPE_TEF\020\002\022\023\n\017RESULT_TYP"
  "E_TEL\020\003\022\023\n\017RESULT_TYPE_TEM\020\004\022\023\n\017RESULT_T"
  "YPE_TER\020\005\022\023\n\017RESULT_TYPE_TES\020\006\"\215\002\n\014Affec"
  "tedNode\022;\n\021ledger_entry_type\030\001 \001(\0162 .org"
  ".xrpl.rpc.v1.LedgerEntryType\022\024\n\014ledger_i"
  "ndex\030\002 \001(\014\0224\n\014created_node\030\003 \001(\0132\034.org.x"
  "rpl.rpc.v1.CreatedNodeH\000\0224\n\014deleted_node"
  "\030\004 \001(\0132\034.org.xrpl.rpc.v1.DeletedNodeH\000\0226"
  "\n\rmodified_node\030\005 \001(\0132\035.org.xrpl.rpc.v1."
  "ModifiedNodeH\000B\006\n\004node\"@\n\013CreatedNode\0221\n"
  "\nnew_fields\030\001 \001(\0132\035.org.xrpl.rpc.v1.Ledg"
  "erObject\"B\n\013DeletedNode\0223\n\014final_fields\030"
  "\001 \001(\0132\035.org.xrpl.rpc.v1.LedgerObject\"\246\002\n"
  "\014ModifiedNode\0223\n\014final_fields\030\001 \001(\0132\035.or"
  "g.xrpl.rpc.v1.LedgerObject\0226\n\017previous_f"
  "ields\030\002 \001(\0132\035.org.xrpl.rpc.v1.LedgerObje"
  "ct\022G\n\027previous_transaction_id\030\003 \001(\0132&.or"
  "g.xrpl.rpc.v1.PreviousTransactionID\022`\n$p"
  "revious_transaction_ledger_sequence\030\004 \001("
  "\01322.org.xrpl.rpc.v1.PreviousTransactionL"
  "edgerSequenceB\023\n\017org.xrpl.rpc.v1P\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_deps[2] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_sccs[10] = {
  &scc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_PrepareLedgerRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_PrepareLedgerResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_SubmitMetadataRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_SubmitMetadataResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
  &scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto, "org/xrpl/rpc/v1/meta.proto", 1602,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto, 10, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionResult_ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto);
  return file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto[0];
}
bool TransactionResult_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionResult_ResultType TransactionResult::RESULT_TYPE_UNSPECIFIED;
constexpr TransactionResult_ResultType TransactionResult::RESULT_TYPE_TEC;
constexpr TransactionResult_ResultType TransactionResult::RESULT_TYPE_TEF;
constexpr TransactionResult_ResultType TransactionResult::RESULT_TYPE_TEL;
constexpr TransactionResult_ResultType TransactionResult::RESULT_TYPE_TEM;
constexpr TransactionResult_ResultType TransactionResult::RESULT_TYPE_TER;
constexpr TransactionResult_ResultType TransactionResult::RESULT_TYPE_TES;
constexpr TransactionResult_ResultType TransactionResult::ResultType_MIN;
constexpr TransactionResult_ResultType TransactionResult::ResultType_MAX;
constexpr int TransactionResult::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SubmitMetadataRequest::InitAsDefaultInstance() {
}
class SubmitMetadataRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitMetadataRequest::kAffectedNodesFieldNumber;
const int SubmitMetadataRequest::kLedgerSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitMetadataRequest::SubmitMetadataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.SubmitMetadataRequest)
}
SubmitMetadataRequest::SubmitMetadataRequest(const SubmitMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      affected_nodes_(from.affected_nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ledger_sequence_ = from.ledger_sequence_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.SubmitMetadataRequest)
}

void SubmitMetadataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitMetadataRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  ledger_sequence_ = 0u;
}

SubmitMetadataRequest::~SubmitMetadataRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.SubmitMetadataRequest)
  SharedDtor();
}

void SubmitMetadataRequest::SharedDtor() {
}

void SubmitMetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitMetadataRequest& SubmitMetadataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitMetadataRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void SubmitMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affected_nodes_.Clear();
  ledger_sequence_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitMetadataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_affected_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // uint32 ledger_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ledger_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitMetadataRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_affected_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ledger_sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.SubmitMetadataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.SubmitMetadataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitMetadataRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affected_nodes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->affected_nodes(static_cast<int>(i)),
      output);
  }

  // uint32 ledger_sequence = 2;
  if (this->ledger_sequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ledger_sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.SubmitMetadataRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitMetadataRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affected_nodes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->affected_nodes(static_cast<int>(i)), target);
  }

  // uint32 ledger_sequence = 2;
  if (this->ledger_sequence() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->ledger_sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.SubmitMetadataRequest)
  return target;
}

size_t SubmitMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->affected_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->affected_nodes(static_cast<int>(i)));
    }
  }

  // uint32 ledger_sequence = 2;
  if (this->ledger_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_sequence());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitMetadataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitMetadataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitMetadataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.SubmitMetadataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.SubmitMetadataRequest)
    MergeFrom(*source);
  }
}

void SubmitMetadataRequest::MergeFrom(const SubmitMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affected_nodes_.MergeFrom(from.affected_nodes_);
  if (from.ledger_sequence() != 0) {
    set_ledger_sequence(from.ledger_sequence());
  }
}

void SubmitMetadataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitMetadataRequest::CopyFrom(const SubmitMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.SubmitMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitMetadataRequest::IsInitialized() const {
  return true;
}

void SubmitMetadataRequest::Swap(SubmitMetadataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitMetadataRequest::InternalSwap(SubmitMetadataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&affected_nodes_)->InternalSwap(CastToBase(&other->affected_nodes_));
  swap(ledger_sequence_, other->ledger_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitMetadataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitMetadataResponse::InitAsDefaultInstance() {
}
class SubmitMetadataResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitMetadataResponse::kSuccessFieldNumber;
const int SubmitMetadataResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitMetadataResponse::SubmitMetadataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.SubmitMetadataResponse)
}
SubmitMetadataResponse::SubmitMetadataResponse(const SubmitMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.SubmitMetadataResponse)
}

void SubmitMetadataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitMetadataResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

SubmitMetadataResponse::~SubmitMetadataResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.SubmitMetadataResponse)
  SharedDtor();
}

void SubmitMetadataResponse::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmitMetadataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitMetadataResponse& SubmitMetadataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitMetadataResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void SubmitMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitMetadataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "org.xrpl.rpc.v1.SubmitMetadataResponse.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitMetadataResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.SubmitMetadataResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.SubmitMetadataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.SubmitMetadataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitMetadataResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.SubmitMetadataResponse.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.SubmitMetadataResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitMetadataResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.SubmitMetadataResponse.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.SubmitMetadataResponse)
  return target;
}

size_t SubmitMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitMetadataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitMetadataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitMetadataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.SubmitMetadataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.SubmitMetadataResponse)
    MergeFrom(*source);
  }
}

void SubmitMetadataResponse::MergeFrom(const SubmitMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SubmitMetadataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitMetadataResponse::CopyFrom(const SubmitMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.SubmitMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitMetadataResponse::IsInitialized() const {
  return true;
}

void SubmitMetadataResponse::Swap(SubmitMetadataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitMetadataResponse::InternalSwap(SubmitMetadataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitMetadataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareLedgerRequest::InitAsDefaultInstance() {
}
class PrepareLedgerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareLedgerRequest::kLedgerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareLedgerRequest::PrepareLedgerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.PrepareLedgerRequest)
}
PrepareLedgerRequest::PrepareLedgerRequest(const PrepareLedgerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ledger_index_ = from.ledger_index_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.PrepareLedgerRequest)
}

void PrepareLedgerRequest::SharedCtor() {
  ledger_index_ = 0u;
}

PrepareLedgerRequest::~PrepareLedgerRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.PrepareLedgerRequest)
  SharedDtor();
}

void PrepareLedgerRequest::SharedDtor() {
}

void PrepareLedgerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareLedgerRequest& PrepareLedgerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareLedgerRequest_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void PrepareLedgerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ledger_index_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareLedgerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ledger_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ledger_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareLedgerRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ledger_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.PrepareLedgerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.PrepareLedgerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareLedgerRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->ledger_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.PrepareLedgerRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareLedgerRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->ledger_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.PrepareLedgerRequest)
  return target;
}

size_t PrepareLedgerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ledger_index = 1;
  if (this->ledger_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ledger_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareLedgerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareLedgerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareLedgerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.PrepareLedgerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.PrepareLedgerRequest)
    MergeFrom(*source);
  }
}

void PrepareLedgerRequest::MergeFrom(const PrepareLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ledger_index() != 0) {
    set_ledger_index(from.ledger_index());
  }
}

void PrepareLedgerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareLedgerRequest::CopyFrom(const PrepareLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.PrepareLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareLedgerRequest::IsInitialized() const {
  return true;
}

void PrepareLedgerRequest::Swap(PrepareLedgerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareLedgerRequest::InternalSwap(PrepareLedgerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ledger_index_, other->ledger_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareLedgerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareLedgerResponse::InitAsDefaultInstance() {
}
class PrepareLedgerResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareLedgerResponse::kSuccessFieldNumber;
const int PrepareLedgerResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareLedgerResponse::PrepareLedgerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.PrepareLedgerResponse)
}
PrepareLedgerResponse::PrepareLedgerResponse(const PrepareLedgerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.PrepareLedgerResponse)
}

void PrepareLedgerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareLedgerResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

PrepareLedgerResponse::~PrepareLedgerResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.PrepareLedgerResponse)
  SharedDtor();
}

void PrepareLedgerResponse::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareLedgerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareLedgerResponse& PrepareLedgerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareLedgerResponse_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void PrepareLedgerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareLedgerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "org.xrpl.rpc.v1.PrepareLedgerResponse.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareLedgerResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.PrepareLedgerResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.PrepareLedgerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.PrepareLedgerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareLedgerResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.PrepareLedgerResponse.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.PrepareLedgerResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareLedgerResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.PrepareLedgerResponse.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.PrepareLedgerResponse)
  return target;
}

size_t PrepareLedgerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareLedgerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareLedgerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareLedgerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.PrepareLedgerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.PrepareLedgerResponse)
    MergeFrom(*source);
  }
}

void PrepareLedgerResponse::MergeFrom(const PrepareLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void PrepareLedgerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareLedgerResponse::CopyFrom(const PrepareLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.PrepareLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareLedgerResponse::IsInitialized() const {
  return true;
}

void PrepareLedgerResponse::Swap(PrepareLedgerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareLedgerResponse::InternalSwap(PrepareLedgerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareLedgerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Meta::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Meta_default_instance_._instance.get_mutable()->transaction_result_ = const_cast< ::org::xrpl::rpc::v1::TransactionResult*>(
      ::org::xrpl::rpc::v1::TransactionResult::internal_default_instance());
  ::org::xrpl::rpc::v1::_Meta_default_instance_._instance.get_mutable()->delivered_amount_ = const_cast< ::org::xrpl::rpc::v1::DeliveredAmount*>(
      ::org::xrpl::rpc::v1::DeliveredAmount::internal_default_instance());
}
class Meta::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::TransactionResult& transaction_result(const Meta* msg);
  static const ::org::xrpl::rpc::v1::DeliveredAmount& delivered_amount(const Meta* msg);
};

const ::org::xrpl::rpc::v1::TransactionResult&
Meta::HasBitSetters::transaction_result(const Meta* msg) {
  return *msg->transaction_result_;
}
const ::org::xrpl::rpc::v1::DeliveredAmount&
Meta::HasBitSetters::delivered_amount(const Meta* msg) {
  return *msg->delivered_amount_;
}
void Meta::clear_delivered_amount() {
  if (GetArenaNoVirtual() == nullptr && delivered_amount_ != nullptr) {
    delete delivered_amount_;
  }
  delivered_amount_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Meta::kTransactionIndexFieldNumber;
const int Meta::kTransactionResultFieldNumber;
const int Meta::kAffectedNodesFieldNumber;
const int Meta::kDeliveredAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Meta::Meta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Meta)
}
Meta::Meta(const Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      affected_nodes_(from.affected_nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction_result()) {
    transaction_result_ = new ::org::xrpl::rpc::v1::TransactionResult(*from.transaction_result_);
  } else {
    transaction_result_ = nullptr;
  }
  if (from.has_delivered_amount()) {
    delivered_amount_ = new ::org::xrpl::rpc::v1::DeliveredAmount(*from.delivered_amount_);
  } else {
    delivered_amount_ = nullptr;
  }
  transaction_index_ = from.transaction_index_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Meta)
}

void Meta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  ::memset(&transaction_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_index_) -
      reinterpret_cast<char*>(&transaction_result_)) + sizeof(transaction_index_));
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Meta)
  SharedDtor();
}

void Meta::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_result_;
  if (this != internal_default_instance()) delete delivered_amount_;
}

void Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Meta& Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Meta_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affected_nodes_.Clear();
  if (GetArenaNoVirtual() == nullptr && transaction_result_ != nullptr) {
    delete transaction_result_;
  }
  transaction_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && delivered_amount_ != nullptr) {
    delete delivered_amount_;
  }
  delivered_amount_ = nullptr;
  transaction_index_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 transaction_index = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          transaction_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransactionResult transaction_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_transaction_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_affected_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DeliveredAmount delivered_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_delivered_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Meta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Meta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 transaction_index = 1 [jstype = JS_STRING];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TransactionResult transaction_result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_affected_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DeliveredAmount delivered_amount = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delivered_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Meta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Meta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 transaction_index = 1 [jstype = JS_STRING];
  if (this->transaction_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->transaction_index(), output);
  }

  // .org.xrpl.rpc.v1.TransactionResult transaction_result = 2;
  if (this->has_transaction_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::transaction_result(this), output);
  }

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affected_nodes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->affected_nodes(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.DeliveredAmount delivered_amount = 4;
  if (this->has_delivered_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::delivered_amount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Meta)
}

::PROTOBUF_NAMESPACE_ID::uint8* Meta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 transaction_index = 1 [jstype = JS_STRING];
  if (this->transaction_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->transaction_index(), target);
  }

  // .org.xrpl.rpc.v1.TransactionResult transaction_result = 2;
  if (this->has_transaction_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::transaction_result(this), target);
  }

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affected_nodes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->affected_nodes(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.DeliveredAmount delivered_amount = 4;
  if (this->has_delivered_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::delivered_amount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Meta)
  return target;
}

size_t Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Meta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.AffectedNode affected_nodes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->affected_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->affected_nodes(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.TransactionResult transaction_result = 2;
  if (this->has_transaction_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_result_);
  }

  // .org.xrpl.rpc.v1.DeliveredAmount delivered_amount = 4;
  if (this->has_delivered_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delivered_amount_);
  }

  // uint64 transaction_index = 1 [jstype = JS_STRING];
  if (this->transaction_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->transaction_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Meta)
    MergeFrom(*source);
  }
}

void Meta::MergeFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affected_nodes_.MergeFrom(from.affected_nodes_);
  if (from.has_transaction_result()) {
    mutable_transaction_result()->::org::xrpl::rpc::v1::TransactionResult::MergeFrom(from.transaction_result());
  }
  if (from.has_delivered_amount()) {
    mutable_delivered_amount()->::org::xrpl::rpc::v1::DeliveredAmount::MergeFrom(from.delivered_amount());
  }
  if (from.transaction_index() != 0) {
    set_transaction_index(from.transaction_index());
  }
}

void Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta::CopyFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta::IsInitialized() const {
  return true;
}

void Meta::Swap(Meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Meta::InternalSwap(Meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&affected_nodes_)->InternalSwap(CastToBase(&other->affected_nodes_));
  swap(transaction_result_, other->transaction_result_);
  swap(delivered_amount_, other->delivered_amount_);
  swap(transaction_index_, other->transaction_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionResult::InitAsDefaultInstance() {
}
class TransactionResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionResult::kResultTypeFieldNumber;
const int TransactionResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionResult::TransactionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.TransactionResult)
}
TransactionResult::TransactionResult(const TransactionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  result_type_ = from.result_type_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TransactionResult)
}

void TransactionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_type_ = 0;
}

TransactionResult::~TransactionResult() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TransactionResult)
  SharedDtor();
}

void TransactionResult::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionResult& TransactionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionResult_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void TransactionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TransactionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.TransactionResult.ResultType result_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result_type(static_cast<::org::xrpl::rpc::v1::TransactionResult_ResultType>(val));
        } else goto handle_unusual;
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "org.xrpl.rpc.v1.TransactionResult.result");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.TransactionResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.TransactionResult.ResultType result_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_type(static_cast< ::org::xrpl::rpc::v1::TransactionResult_ResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.TransactionResult.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.TransactionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.TransactionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.TransactionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.TransactionResult.ResultType result_type = 1;
  if (this->result_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result_type(), output);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.TransactionResult.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.TransactionResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TransactionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.TransactionResult.ResultType result_type = 1;
  if (this->result_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_type(), target);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.TransactionResult.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TransactionResult)
  return target;
}

size_t TransactionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TransactionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // .org.xrpl.rpc.v1.TransactionResult.ResultType result_type = 1;
  if (this->result_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.TransactionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.TransactionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.TransactionResult)
    MergeFrom(*source);
  }
}

void TransactionResult::MergeFrom(const TransactionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TransactionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.result_type() != 0) {
    set_result_type(from.result_type());
  }
}

void TransactionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.TransactionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionResult::CopyFrom(const TransactionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TransactionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResult::IsInitialized() const {
  return true;
}

void TransactionResult::Swap(TransactionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionResult::InternalSwap(TransactionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_type_, other->result_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AffectedNode::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_AffectedNode_default_instance_.created_node_ = const_cast< ::org::xrpl::rpc::v1::CreatedNode*>(
      ::org::xrpl::rpc::v1::CreatedNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_AffectedNode_default_instance_.deleted_node_ = const_cast< ::org::xrpl::rpc::v1::DeletedNode*>(
      ::org::xrpl::rpc::v1::DeletedNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_AffectedNode_default_instance_.modified_node_ = const_cast< ::org::xrpl::rpc::v1::ModifiedNode*>(
      ::org::xrpl::rpc::v1::ModifiedNode::internal_default_instance());
}
class AffectedNode::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::CreatedNode& created_node(const AffectedNode* msg);
  static const ::org::xrpl::rpc::v1::DeletedNode& deleted_node(const AffectedNode* msg);
  static const ::org::xrpl::rpc::v1::ModifiedNode& modified_node(const AffectedNode* msg);
};

const ::org::xrpl::rpc::v1::CreatedNode&
AffectedNode::HasBitSetters::created_node(const AffectedNode* msg) {
  return *msg->node_.created_node_;
}
const ::org::xrpl::rpc::v1::DeletedNode&
AffectedNode::HasBitSetters::deleted_node(const AffectedNode* msg) {
  return *msg->node_.deleted_node_;
}
const ::org::xrpl::rpc::v1::ModifiedNode&
AffectedNode::HasBitSetters::modified_node(const AffectedNode* msg) {
  return *msg->node_.modified_node_;
}
void AffectedNode::set_allocated_created_node(::org::xrpl::rpc::v1::CreatedNode* created_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (created_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      created_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_node, submessage_arena);
    }
    set_has_created_node();
    node_.created_node_ = created_node;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AffectedNode.created_node)
}
void AffectedNode::set_allocated_deleted_node(::org::xrpl::rpc::v1::DeletedNode* deleted_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (deleted_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deleted_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_node, submessage_arena);
    }
    set_has_deleted_node();
    node_.deleted_node_ = deleted_node;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AffectedNode.deleted_node)
}
void AffectedNode::set_allocated_modified_node(::org::xrpl::rpc::v1::ModifiedNode* modified_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (modified_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modified_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_node, submessage_arena);
    }
    set_has_modified_node();
    node_.modified_node_ = modified_node;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.AffectedNode.modified_node)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AffectedNode::kLedgerEntryTypeFieldNumber;
const int AffectedNode::kLedgerIndexFieldNumber;
const int AffectedNode::kCreatedNodeFieldNumber;
const int AffectedNode::kDeletedNodeFieldNumber;
const int AffectedNode::kModifiedNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AffectedNode::AffectedNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.AffectedNode)
}
AffectedNode::AffectedNode(const AffectedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ledger_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ledger_index().size() > 0) {
    ledger_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ledger_index_);
  }
  ledger_entry_type_ = from.ledger_entry_type_;
  clear_has_node();
  switch (from.node_case()) {
    case kCreatedNode: {
      mutable_created_node()->::org::xrpl::rpc::v1::CreatedNode::MergeFrom(from.created_node());
      break;
    }
    case kDeletedNode: {
      mutable_deleted_node()->::org::xrpl::rpc::v1::DeletedNode::MergeFrom(from.deleted_node());
      break;
    }
    case kModifiedNode: {
      mutable_modified_node()->::org::xrpl::rpc::v1::ModifiedNode::MergeFrom(from.modified_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.AffectedNode)
}

void AffectedNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  ledger_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ledger_entry_type_ = 0;
  clear_has_node();
}

AffectedNode::~AffectedNode() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.AffectedNode)
  SharedDtor();
}

void AffectedNode::SharedDtor() {
  ledger_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_node()) {
    clear_node();
  }
}

void AffectedNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AffectedNode& AffectedNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AffectedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void AffectedNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.AffectedNode)
  switch (node_case()) {
    case kCreatedNode: {
      delete node_.created_node_;
      break;
    }
    case kDeletedNode: {
      delete node_.deleted_node_;
      break;
    }
    case kModifiedNode: {
      delete node_.modified_node_;
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AffectedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.AffectedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ledger_index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ledger_entry_type_ = 0;
  clear_node();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AffectedNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerEntryType ledger_entry_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ledger_entry_type(static_cast<::org::xrpl::rpc::v1::LedgerEntryType>(val));
        } else goto handle_unusual;
        continue;
      // bytes ledger_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ledger_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CreatedNode created_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_created_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DeletedNode deleted_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_deleted_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.ModifiedNode modified_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_modified_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AffectedNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.AffectedNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LedgerEntryType ledger_entry_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ledger_entry_type(static_cast< ::org::xrpl::rpc::v1::LedgerEntryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ledger_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ledger_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CreatedNode created_node = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_created_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DeletedNode deleted_node = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deleted_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.ModifiedNode modified_node = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_modified_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.AffectedNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.AffectedNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AffectedNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.AffectedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerEntryType ledger_entry_type = 1;
  if (this->ledger_entry_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ledger_entry_type(), output);
  }

  // bytes ledger_index = 2;
  if (this->ledger_index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ledger_index(), output);
  }

  // .org.xrpl.rpc.v1.CreatedNode created_node = 3;
  if (has_created_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::created_node(this), output);
  }

  // .org.xrpl.rpc.v1.DeletedNode deleted_node = 4;
  if (has_deleted_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::deleted_node(this), output);
  }

  // .org.xrpl.rpc.v1.ModifiedNode modified_node = 5;
  if (has_modified_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::modified_node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.AffectedNode)
}

::PROTOBUF_NAMESPACE_ID::uint8* AffectedNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.AffectedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerEntryType ledger_entry_type = 1;
  if (this->ledger_entry_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ledger_entry_type(), target);
  }

  // bytes ledger_index = 2;
  if (this->ledger_index().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->ledger_index(), target);
  }

  // .org.xrpl.rpc.v1.CreatedNode created_node = 3;
  if (has_created_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::created_node(this), target);
  }

  // .org.xrpl.rpc.v1.DeletedNode deleted_node = 4;
  if (has_deleted_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::deleted_node(this), target);
  }

  // .org.xrpl.rpc.v1.ModifiedNode modified_node = 5;
  if (has_modified_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::modified_node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.AffectedNode)
  return target;
}

size_t AffectedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.AffectedNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ledger_index = 2;
  if (this->ledger_index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ledger_index());
  }

  // .org.xrpl.rpc.v1.LedgerEntryType ledger_entry_type = 1;
  if (this->ledger_entry_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ledger_entry_type());
  }

  switch (node_case()) {
    // .org.xrpl.rpc.v1.CreatedNode created_node = 3;
    case kCreatedNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.created_node_);
      break;
    }
    // .org.xrpl.rpc.v1.DeletedNode deleted_node = 4;
    case kDeletedNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.deleted_node_);
      break;
    }
    // .org.xrpl.rpc.v1.ModifiedNode modified_node = 5;
    case kModifiedNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.modified_node_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AffectedNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.AffectedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const AffectedNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AffectedNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.AffectedNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.AffectedNode)
    MergeFrom(*source);
  }
}

void AffectedNode::MergeFrom(const AffectedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.AffectedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ledger_index().size() > 0) {

    ledger_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ledger_index_);
  }
  if (from.ledger_entry_type() != 0) {
    set_ledger_entry_type(from.ledger_entry_type());
  }
  switch (from.node_case()) {
    case kCreatedNode: {
      mutable_created_node()->::org::xrpl::rpc::v1::CreatedNode::MergeFrom(from.created_node());
      break;
    }
    case kDeletedNode: {
      mutable_deleted_node()->::org::xrpl::rpc::v1::DeletedNode::MergeFrom(from.deleted_node());
      break;
    }
    case kModifiedNode: {
      mutable_modified_node()->::org::xrpl::rpc::v1::ModifiedNode::MergeFrom(from.modified_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
}

void AffectedNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.AffectedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffectedNode::CopyFrom(const AffectedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.AffectedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffectedNode::IsInitialized() const {
  return true;
}

void AffectedNode::Swap(AffectedNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AffectedNode::InternalSwap(AffectedNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ledger_index_.Swap(&other->ledger_index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ledger_entry_type_, other->ledger_entry_type_);
  swap(node_, other->node_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AffectedNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatedNode::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_CreatedNode_default_instance_._instance.get_mutable()->new_fields_ = const_cast< ::org::xrpl::rpc::v1::LedgerObject*>(
      ::org::xrpl::rpc::v1::LedgerObject::internal_default_instance());
}
class CreatedNode::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LedgerObject& new_fields(const CreatedNode* msg);
};

const ::org::xrpl::rpc::v1::LedgerObject&
CreatedNode::HasBitSetters::new_fields(const CreatedNode* msg) {
  return *msg->new_fields_;
}
void CreatedNode::clear_new_fields() {
  if (GetArenaNoVirtual() == nullptr && new_fields_ != nullptr) {
    delete new_fields_;
  }
  new_fields_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatedNode::kNewFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatedNode::CreatedNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.CreatedNode)
}
CreatedNode::CreatedNode(const CreatedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_new_fields()) {
    new_fields_ = new ::org::xrpl::rpc::v1::LedgerObject(*from.new_fields_);
  } else {
    new_fields_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.CreatedNode)
}

void CreatedNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  new_fields_ = nullptr;
}

CreatedNode::~CreatedNode() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.CreatedNode)
  SharedDtor();
}

void CreatedNode::SharedDtor() {
  if (this != internal_default_instance()) delete new_fields_;
}

void CreatedNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatedNode& CreatedNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void CreatedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.CreatedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && new_fields_ != nullptr) {
    delete new_fields_;
  }
  new_fields_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreatedNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerObject new_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_new_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreatedNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.CreatedNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LedgerObject new_fields = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_new_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.CreatedNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.CreatedNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreatedNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.CreatedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject new_fields = 1;
  if (this->has_new_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::new_fields(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.CreatedNode)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatedNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.CreatedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject new_fields = 1;
  if (this->has_new_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::new_fields(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.CreatedNode)
  return target;
}

size_t CreatedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.CreatedNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject new_fields = 1;
  if (this->has_new_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_fields_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatedNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.CreatedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatedNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatedNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.CreatedNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.CreatedNode)
    MergeFrom(*source);
  }
}

void CreatedNode::MergeFrom(const CreatedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.CreatedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_fields()) {
    mutable_new_fields()->::org::xrpl::rpc::v1::LedgerObject::MergeFrom(from.new_fields());
  }
}

void CreatedNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.CreatedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatedNode::CopyFrom(const CreatedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.CreatedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatedNode::IsInitialized() const {
  return true;
}

void CreatedNode::Swap(CreatedNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreatedNode::InternalSwap(CreatedNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(new_fields_, other->new_fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatedNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletedNode::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_DeletedNode_default_instance_._instance.get_mutable()->final_fields_ = const_cast< ::org::xrpl::rpc::v1::LedgerObject*>(
      ::org::xrpl::rpc::v1::LedgerObject::internal_default_instance());
}
class DeletedNode::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LedgerObject& final_fields(const DeletedNode* msg);
};

const ::org::xrpl::rpc::v1::LedgerObject&
DeletedNode::HasBitSetters::final_fields(const DeletedNode* msg) {
  return *msg->final_fields_;
}
void DeletedNode::clear_final_fields() {
  if (GetArenaNoVirtual() == nullptr && final_fields_ != nullptr) {
    delete final_fields_;
  }
  final_fields_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletedNode::kFinalFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletedNode::DeletedNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.DeletedNode)
}
DeletedNode::DeletedNode(const DeletedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_final_fields()) {
    final_fields_ = new ::org::xrpl::rpc::v1::LedgerObject(*from.final_fields_);
  } else {
    final_fields_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.DeletedNode)
}

void DeletedNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  final_fields_ = nullptr;
}

DeletedNode::~DeletedNode() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.DeletedNode)
  SharedDtor();
}

void DeletedNode::SharedDtor() {
  if (this != internal_default_instance()) delete final_fields_;
}

void DeletedNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletedNode& DeletedNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void DeletedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.DeletedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && final_fields_ != nullptr) {
    delete final_fields_;
  }
  final_fields_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeletedNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_final_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeletedNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.DeletedNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_final_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.DeletedNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.DeletedNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeletedNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.DeletedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  if (this->has_final_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::final_fields(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.DeletedNode)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletedNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.DeletedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  if (this->has_final_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::final_fields(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.DeletedNode)
  return target;
}

size_t DeletedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.DeletedNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  if (this->has_final_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *final_fields_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletedNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.DeletedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletedNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletedNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.DeletedNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.DeletedNode)
    MergeFrom(*source);
  }
}

void DeletedNode::MergeFrom(const DeletedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.DeletedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_final_fields()) {
    mutable_final_fields()->::org::xrpl::rpc::v1::LedgerObject::MergeFrom(from.final_fields());
  }
}

void DeletedNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.DeletedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletedNode::CopyFrom(const DeletedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.DeletedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletedNode::IsInitialized() const {
  return true;
}

void DeletedNode::Swap(DeletedNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletedNode::InternalSwap(DeletedNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(final_fields_, other->final_fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletedNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifiedNode::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_ModifiedNode_default_instance_._instance.get_mutable()->final_fields_ = const_cast< ::org::xrpl::rpc::v1::LedgerObject*>(
      ::org::xrpl::rpc::v1::LedgerObject::internal_default_instance());
  ::org::xrpl::rpc::v1::_ModifiedNode_default_instance_._instance.get_mutable()->previous_fields_ = const_cast< ::org::xrpl::rpc::v1::LedgerObject*>(
      ::org::xrpl::rpc::v1::LedgerObject::internal_default_instance());
  ::org::xrpl::rpc::v1::_ModifiedNode_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_ModifiedNode_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
}
class ModifiedNode::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LedgerObject& final_fields(const ModifiedNode* msg);
  static const ::org::xrpl::rpc::v1::LedgerObject& previous_fields(const ModifiedNode* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const ModifiedNode* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const ModifiedNode* msg);
};

const ::org::xrpl::rpc::v1::LedgerObject&
ModifiedNode::HasBitSetters::final_fields(const ModifiedNode* msg) {
  return *msg->final_fields_;
}
const ::org::xrpl::rpc::v1::LedgerObject&
ModifiedNode::HasBitSetters::previous_fields(const ModifiedNode* msg) {
  return *msg->previous_fields_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
ModifiedNode::HasBitSetters::previous_transaction_id(const ModifiedNode* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
ModifiedNode::HasBitSetters::previous_transaction_ledger_sequence(const ModifiedNode* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
void ModifiedNode::clear_final_fields() {
  if (GetArenaNoVirtual() == nullptr && final_fields_ != nullptr) {
    delete final_fields_;
  }
  final_fields_ = nullptr;
}
void ModifiedNode::clear_previous_fields() {
  if (GetArenaNoVirtual() == nullptr && previous_fields_ != nullptr) {
    delete previous_fields_;
  }
  previous_fields_ = nullptr;
}
void ModifiedNode::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void ModifiedNode::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifiedNode::kFinalFieldsFieldNumber;
const int ModifiedNode::kPreviousFieldsFieldNumber;
const int ModifiedNode::kPreviousTransactionIdFieldNumber;
const int ModifiedNode::kPreviousTransactionLedgerSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifiedNode::ModifiedNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.ModifiedNode)
}
ModifiedNode::ModifiedNode(const ModifiedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_final_fields()) {
    final_fields_ = new ::org::xrpl::rpc::v1::LedgerObject(*from.final_fields_);
  } else {
    final_fields_ = nullptr;
  }
  if (from.has_previous_fields()) {
    previous_fields_ = new ::org::xrpl::rpc::v1::LedgerObject(*from.previous_fields_);
  } else {
    previous_fields_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.ModifiedNode)
}

void ModifiedNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  ::memset(&final_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_transaction_ledger_sequence_) -
      reinterpret_cast<char*>(&final_fields_)) + sizeof(previous_transaction_ledger_sequence_));
}

ModifiedNode::~ModifiedNode() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.ModifiedNode)
  SharedDtor();
}

void ModifiedNode::SharedDtor() {
  if (this != internal_default_instance()) delete final_fields_;
  if (this != internal_default_instance()) delete previous_fields_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
}

void ModifiedNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifiedNode& ModifiedNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifiedNode_org_2fxrpl_2frpc_2fv1_2fmeta_2eproto.base);
  return *internal_default_instance();
}


void ModifiedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.ModifiedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && final_fields_ != nullptr) {
    delete final_fields_;
  }
  final_fields_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_fields_ != nullptr) {
    delete previous_fields_;
  }
  previous_fields_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModifiedNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_final_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerObject previous_fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_previous_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModifiedNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.ModifiedNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_final_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerObject previous_fields = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.ModifiedNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.ModifiedNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModifiedNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.ModifiedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  if (this->has_final_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::final_fields(this), output);
  }

  // .org.xrpl.rpc.v1.LedgerObject previous_fields = 2;
  if (this->has_previous_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::previous_fields(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 3;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.ModifiedNode)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifiedNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.ModifiedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  if (this->has_final_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::final_fields(this), target);
  }

  // .org.xrpl.rpc.v1.LedgerObject previous_fields = 2;
  if (this->has_previous_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::previous_fields(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 3;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.ModifiedNode)
  return target;
}

size_t ModifiedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.ModifiedNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerObject final_fields = 1;
  if (this->has_final_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *final_fields_);
  }

  // .org.xrpl.rpc.v1.LedgerObject previous_fields = 2;
  if (this->has_previous_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_fields_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 3;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 4;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifiedNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.ModifiedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifiedNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifiedNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.ModifiedNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.ModifiedNode)
    MergeFrom(*source);
  }
}

void ModifiedNode::MergeFrom(const ModifiedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.ModifiedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_final_fields()) {
    mutable_final_fields()->::org::xrpl::rpc::v1::LedgerObject::MergeFrom(from.final_fields());
  }
  if (from.has_previous_fields()) {
    mutable_previous_fields()->::org::xrpl::rpc::v1::LedgerObject::MergeFrom(from.previous_fields());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
}

void ModifiedNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.ModifiedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifiedNode::CopyFrom(const ModifiedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.ModifiedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifiedNode::IsInitialized() const {
  return true;
}

void ModifiedNode::Swap(ModifiedNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifiedNode::InternalSwap(ModifiedNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(final_fields_, other->final_fields_);
  swap(previous_fields_, other->previous_fields_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifiedNode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::SubmitMetadataRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::SubmitMetadataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::SubmitMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::SubmitMetadataResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::SubmitMetadataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::SubmitMetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::PrepareLedgerRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::PrepareLedgerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::PrepareLedgerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::PrepareLedgerResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::PrepareLedgerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::PrepareLedgerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Meta* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Meta >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TransactionResult* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionResult >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::TransactionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::AffectedNode* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::AffectedNode >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::AffectedNode >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::CreatedNode* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::CreatedNode >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::CreatedNode >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::DeletedNode* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::DeletedNode >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::DeletedNode >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::ModifiedNode* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::ModifiedNode >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::ModifiedNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
