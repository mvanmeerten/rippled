// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/ledger.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetLedgerDataRequest;
class GetLedgerDataRequestDefaultTypeInternal;
extern GetLedgerDataRequestDefaultTypeInternal _GetLedgerDataRequest_default_instance_;
class GetLedgerDataResponse;
class GetLedgerDataResponseDefaultTypeInternal;
extern GetLedgerDataResponseDefaultTypeInternal _GetLedgerDataResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::GetLedgerDataRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetLedgerDataRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::GetLedgerDataResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetLedgerDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetLedgerDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetLedgerDataRequest) */ {
 public:
  GetLedgerDataRequest();
  virtual ~GetLedgerDataRequest();

  GetLedgerDataRequest(const GetLedgerDataRequest& from);
  GetLedgerDataRequest(GetLedgerDataRequest&& from) noexcept
    : GetLedgerDataRequest() {
    *this = ::std::move(from);
  }

  inline GetLedgerDataRequest& operator=(const GetLedgerDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLedgerDataRequest& operator=(GetLedgerDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLedgerDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLedgerDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetLedgerDataRequest*>(
               &_GetLedgerDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetLedgerDataRequest* other);
  friend void swap(GetLedgerDataRequest& a, GetLedgerDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLedgerDataRequest* New() const final {
    return CreateMaybeMessage<GetLedgerDataRequest>(nullptr);
  }

  GetLedgerDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLedgerDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLedgerDataRequest& from);
  void MergeFrom(const GetLedgerDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLedgerDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetLedgerDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes marker = 1;
  void clear_marker();
  static const int kMarkerFieldNumber = 1;
  const std::string& marker() const;
  void set_marker(const std::string& value);
  void set_marker(std::string&& value);
  void set_marker(const char* value);
  void set_marker(const void* value, size_t size);
  std::string* mutable_marker();
  std::string* release_marker();
  void set_allocated_marker(std::string* marker);

  // bytes end_marker = 3;
  void clear_end_marker();
  static const int kEndMarkerFieldNumber = 3;
  const std::string& end_marker() const;
  void set_end_marker(const std::string& value);
  void set_end_marker(std::string&& value);
  void set_end_marker(const char* value);
  void set_end_marker(const void* value, size_t size);
  std::string* mutable_end_marker();
  std::string* release_end_marker();
  void set_allocated_end_marker(std::string* end_marker);

  // string client_ip = 4;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 4;
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // string user = 6;
  void clear_user();
  static const int kUserFieldNumber = 6;
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  bool has_ledger() const;
  void clear_ledger();
  static const int kLedgerFieldNumber = 2;
  const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger() const;
  ::org::xrpl::rpc::v1::LedgerSpecifier* release_ledger();
  ::org::xrpl::rpc::v1::LedgerSpecifier* mutable_ledger();
  void set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetLedgerDataRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_marker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::org::xrpl::rpc::v1::LedgerSpecifier* ledger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto;
};
// -------------------------------------------------------------------

class GetLedgerDataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetLedgerDataResponse) */ {
 public:
  GetLedgerDataResponse();
  virtual ~GetLedgerDataResponse();

  GetLedgerDataResponse(const GetLedgerDataResponse& from);
  GetLedgerDataResponse(GetLedgerDataResponse&& from) noexcept
    : GetLedgerDataResponse() {
    *this = ::std::move(from);
  }

  inline GetLedgerDataResponse& operator=(const GetLedgerDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLedgerDataResponse& operator=(GetLedgerDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLedgerDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLedgerDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetLedgerDataResponse*>(
               &_GetLedgerDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetLedgerDataResponse* other);
  friend void swap(GetLedgerDataResponse& a, GetLedgerDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLedgerDataResponse* New() const final {
    return CreateMaybeMessage<GetLedgerDataResponse>(nullptr);
  }

  GetLedgerDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLedgerDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLedgerDataResponse& from);
  void MergeFrom(const GetLedgerDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLedgerDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetLedgerDataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ledger_hash = 2;
  void clear_ledger_hash();
  static const int kLedgerHashFieldNumber = 2;
  const std::string& ledger_hash() const;
  void set_ledger_hash(const std::string& value);
  void set_ledger_hash(std::string&& value);
  void set_ledger_hash(const char* value);
  void set_ledger_hash(const void* value, size_t size);
  std::string* mutable_ledger_hash();
  std::string* release_ledger_hash();
  void set_allocated_ledger_hash(std::string* ledger_hash);

  // bytes marker = 4;
  void clear_marker();
  static const int kMarkerFieldNumber = 4;
  const std::string& marker() const;
  void set_marker(const std::string& value);
  void set_marker(std::string&& value);
  void set_marker(const char* value);
  void set_marker(const void* value, size_t size);
  std::string* mutable_marker();
  std::string* release_marker();
  void set_allocated_marker(std::string* marker);

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 3;
  bool has_ledger_objects() const;
  void clear_ledger_objects();
  static const int kLedgerObjectsFieldNumber = 3;
  const ::org::xrpl::rpc::v1::RawLedgerObjects& ledger_objects() const;
  ::org::xrpl::rpc::v1::RawLedgerObjects* release_ledger_objects();
  ::org::xrpl::rpc::v1::RawLedgerObjects* mutable_ledger_objects();
  void set_allocated_ledger_objects(::org::xrpl::rpc::v1::RawLedgerObjects* ledger_objects);

  // uint32 ledger_index = 1;
  void clear_ledger_index();
  static const int kLedgerIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index() const;
  void set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool is_unlimited = 7;
  void clear_is_unlimited();
  static const int kIsUnlimitedFieldNumber = 7;
  bool is_unlimited() const;
  void set_is_unlimited(bool value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetLedgerDataResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_;
  ::org::xrpl::rpc::v1::RawLedgerObjects* ledger_objects_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_index_;
  bool is_unlimited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetLedgerDataRequest

// bytes marker = 1;
inline void GetLedgerDataRequest::clear_marker() {
  marker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerDataRequest::marker() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
  return marker_.GetNoArena();
}
inline void GetLedgerDataRequest::set_marker(const std::string& value) {
  
  marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
}
inline void GetLedgerDataRequest::set_marker(std::string&& value) {
  
  marker_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
}
inline void GetLedgerDataRequest::set_marker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
}
inline void GetLedgerDataRequest::set_marker(const void* value, size_t size) {
  
  marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
}
inline std::string* GetLedgerDataRequest::mutable_marker() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
  return marker_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerDataRequest::release_marker() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
  
  return marker_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerDataRequest::set_allocated_marker(std::string* marker) {
  if (marker != nullptr) {
    
  } else {
    
  }
  marker_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataRequest.marker)
}

// .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
inline bool GetLedgerDataRequest::has_ledger() const {
  return this != internal_default_instance() && ledger_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerSpecifier& GetLedgerDataRequest::ledger() const {
  const ::org::xrpl::rpc::v1::LedgerSpecifier* p = ledger_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataRequest.ledger)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      &::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerDataRequest::release_ledger() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataRequest.ledger)
  
  ::org::xrpl::rpc::v1::LedgerSpecifier* temp = ledger_;
  ledger_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerDataRequest::mutable_ledger() {
  
  if (ledger_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerSpecifier>(GetArenaNoVirtual());
    ledger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataRequest.ledger)
  return ledger_;
}
inline void GetLedgerDataRequest::set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_);
  }
  if (ledger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger, submessage_arena);
    }
    
  } else {
    
  }
  ledger_ = ledger;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataRequest.ledger)
}

// bytes end_marker = 3;
inline void GetLedgerDataRequest::clear_end_marker() {
  end_marker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerDataRequest::end_marker() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
  return end_marker_.GetNoArena();
}
inline void GetLedgerDataRequest::set_end_marker(const std::string& value) {
  
  end_marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
}
inline void GetLedgerDataRequest::set_end_marker(std::string&& value) {
  
  end_marker_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
}
inline void GetLedgerDataRequest::set_end_marker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
}
inline void GetLedgerDataRequest::set_end_marker(const void* value, size_t size) {
  
  end_marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
}
inline std::string* GetLedgerDataRequest::mutable_end_marker() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
  return end_marker_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerDataRequest::release_end_marker() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
  
  return end_marker_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerDataRequest::set_allocated_end_marker(std::string* end_marker) {
  if (end_marker != nullptr) {
    
  } else {
    
  }
  end_marker_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_marker);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataRequest.end_marker)
}

// string client_ip = 4;
inline void GetLedgerDataRequest::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerDataRequest::client_ip() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
  return client_ip_.GetNoArena();
}
inline void GetLedgerDataRequest::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
}
inline void GetLedgerDataRequest::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
}
inline void GetLedgerDataRequest::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
}
inline void GetLedgerDataRequest::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
}
inline std::string* GetLedgerDataRequest::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerDataRequest::release_client_ip() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerDataRequest::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataRequest.client_ip)
}

// string user = 6;
inline void GetLedgerDataRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerDataRequest::user() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
  return user_.GetNoArena();
}
inline void GetLedgerDataRequest::set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
}
inline void GetLedgerDataRequest::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
}
inline void GetLedgerDataRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
}
inline void GetLedgerDataRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
}
inline std::string* GetLedgerDataRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerDataRequest::release_user() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerDataRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataRequest.user)
}

// -------------------------------------------------------------------

// GetLedgerDataResponse

// uint32 ledger_index = 1;
inline void GetLedgerDataResponse::clear_ledger_index() {
  ledger_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLedgerDataResponse::ledger_index() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_index)
  return ledger_index_;
}
inline void GetLedgerDataResponse::set_ledger_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_index_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_index)
}

// bytes ledger_hash = 2;
inline void GetLedgerDataResponse::clear_ledger_hash() {
  ledger_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerDataResponse::ledger_hash() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
  return ledger_hash_.GetNoArena();
}
inline void GetLedgerDataResponse::set_ledger_hash(const std::string& value) {
  
  ledger_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
}
inline void GetLedgerDataResponse::set_ledger_hash(std::string&& value) {
  
  ledger_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
}
inline void GetLedgerDataResponse::set_ledger_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ledger_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
}
inline void GetLedgerDataResponse::set_ledger_hash(const void* value, size_t size) {
  
  ledger_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
}
inline std::string* GetLedgerDataResponse::mutable_ledger_hash() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
  return ledger_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerDataResponse::release_ledger_hash() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
  
  return ledger_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerDataResponse::set_allocated_ledger_hash(std::string* ledger_hash) {
  if (ledger_hash != nullptr) {
    
  } else {
    
  }
  ledger_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledger_hash);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_hash)
}

// .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 3;
inline bool GetLedgerDataResponse::has_ledger_objects() const {
  return this != internal_default_instance() && ledger_objects_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::RawLedgerObjects& GetLedgerDataResponse::ledger_objects() const {
  const ::org::xrpl::rpc::v1::RawLedgerObjects* p = ledger_objects_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_objects)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::RawLedgerObjects*>(
      &::org::xrpl::rpc::v1::_RawLedgerObjects_default_instance_);
}
inline ::org::xrpl::rpc::v1::RawLedgerObjects* GetLedgerDataResponse::release_ledger_objects() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_objects)
  
  ::org::xrpl::rpc::v1::RawLedgerObjects* temp = ledger_objects_;
  ledger_objects_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::RawLedgerObjects* GetLedgerDataResponse::mutable_ledger_objects() {
  
  if (ledger_objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::RawLedgerObjects>(GetArenaNoVirtual());
    ledger_objects_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_objects)
  return ledger_objects_;
}
inline void GetLedgerDataResponse::set_allocated_ledger_objects(::org::xrpl::rpc::v1::RawLedgerObjects* ledger_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_objects_);
  }
  if (ledger_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger_objects, submessage_arena);
    }
    
  } else {
    
  }
  ledger_objects_ = ledger_objects;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataResponse.ledger_objects)
}

// bytes marker = 4;
inline void GetLedgerDataResponse::clear_marker() {
  marker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerDataResponse::marker() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
  return marker_.GetNoArena();
}
inline void GetLedgerDataResponse::set_marker(const std::string& value) {
  
  marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
}
inline void GetLedgerDataResponse::set_marker(std::string&& value) {
  
  marker_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
}
inline void GetLedgerDataResponse::set_marker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
}
inline void GetLedgerDataResponse::set_marker(const void* value, size_t size) {
  
  marker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
}
inline std::string* GetLedgerDataResponse::mutable_marker() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
  return marker_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerDataResponse::release_marker() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
  
  return marker_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerDataResponse::set_allocated_marker(std::string* marker) {
  if (marker != nullptr) {
    
  } else {
    
  }
  marker_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerDataResponse.marker)
}

// bool is_unlimited = 7;
inline void GetLedgerDataResponse::clear_is_unlimited() {
  is_unlimited_ = false;
}
inline bool GetLedgerDataResponse::is_unlimited() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerDataResponse.is_unlimited)
  return is_unlimited_;
}
inline void GetLedgerDataResponse::set_is_unlimited(bool value) {
  
  is_unlimited_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerDataResponse.is_unlimited)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto
