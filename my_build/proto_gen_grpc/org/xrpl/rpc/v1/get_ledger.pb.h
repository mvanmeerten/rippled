// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/ledger.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetLedgerRequest;
class GetLedgerRequestDefaultTypeInternal;
extern GetLedgerRequestDefaultTypeInternal _GetLedgerRequest_default_instance_;
class GetLedgerResponse;
class GetLedgerResponseDefaultTypeInternal;
extern GetLedgerResponseDefaultTypeInternal _GetLedgerResponse_default_instance_;
class TransactionAndMetadata;
class TransactionAndMetadataDefaultTypeInternal;
extern TransactionAndMetadataDefaultTypeInternal _TransactionAndMetadata_default_instance_;
class TransactionAndMetadataList;
class TransactionAndMetadataListDefaultTypeInternal;
extern TransactionAndMetadataListDefaultTypeInternal _TransactionAndMetadataList_default_instance_;
class TransactionHashList;
class TransactionHashListDefaultTypeInternal;
extern TransactionHashListDefaultTypeInternal _TransactionHashList_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::GetLedgerRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetLedgerRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::GetLedgerResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetLedgerResponse>(Arena*);
template<> ::org::xrpl::rpc::v1::TransactionAndMetadata* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionAndMetadata>(Arena*);
template<> ::org::xrpl::rpc::v1::TransactionAndMetadataList* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionAndMetadataList>(Arena*);
template<> ::org::xrpl::rpc::v1::TransactionHashList* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::TransactionHashList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetLedgerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetLedgerRequest) */ {
 public:
  GetLedgerRequest();
  virtual ~GetLedgerRequest();

  GetLedgerRequest(const GetLedgerRequest& from);
  GetLedgerRequest(GetLedgerRequest&& from) noexcept
    : GetLedgerRequest() {
    *this = ::std::move(from);
  }

  inline GetLedgerRequest& operator=(const GetLedgerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLedgerRequest& operator=(GetLedgerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLedgerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLedgerRequest* internal_default_instance() {
    return reinterpret_cast<const GetLedgerRequest*>(
               &_GetLedgerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetLedgerRequest* other);
  friend void swap(GetLedgerRequest& a, GetLedgerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLedgerRequest* New() const final {
    return CreateMaybeMessage<GetLedgerRequest>(nullptr);
  }

  GetLedgerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLedgerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLedgerRequest& from);
  void MergeFrom(const GetLedgerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLedgerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetLedgerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_ip = 5;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 5;
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // string user = 6;
  void clear_user();
  static const int kUserFieldNumber = 6;
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
  bool has_ledger() const;
  void clear_ledger();
  static const int kLedgerFieldNumber = 1;
  const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger() const;
  ::org::xrpl::rpc::v1::LedgerSpecifier* release_ledger();
  ::org::xrpl::rpc::v1::LedgerSpecifier* mutable_ledger();
  void set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger);

  // bool transactions = 2;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 2;
  bool transactions() const;
  void set_transactions(bool value);

  // bool expand = 3;
  void clear_expand();
  static const int kExpandFieldNumber = 3;
  bool expand() const;
  void set_expand(bool value);

  // bool get_objects = 4;
  void clear_get_objects();
  static const int kGetObjectsFieldNumber = 4;
  bool get_objects() const;
  void set_get_objects(bool value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetLedgerRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::org::xrpl::rpc::v1::LedgerSpecifier* ledger_;
  bool transactions_;
  bool expand_;
  bool get_objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
};
// -------------------------------------------------------------------

class GetLedgerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetLedgerResponse) */ {
 public:
  GetLedgerResponse();
  virtual ~GetLedgerResponse();

  GetLedgerResponse(const GetLedgerResponse& from);
  GetLedgerResponse(GetLedgerResponse&& from) noexcept
    : GetLedgerResponse() {
    *this = ::std::move(from);
  }

  inline GetLedgerResponse& operator=(const GetLedgerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLedgerResponse& operator=(GetLedgerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLedgerResponse& default_instance();

  enum TransactionsCase {
    kHashesList = 2,
    kTransactionsList = 3,
    TRANSACTIONS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLedgerResponse* internal_default_instance() {
    return reinterpret_cast<const GetLedgerResponse*>(
               &_GetLedgerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetLedgerResponse* other);
  friend void swap(GetLedgerResponse& a, GetLedgerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLedgerResponse* New() const final {
    return CreateMaybeMessage<GetLedgerResponse>(nullptr);
  }

  GetLedgerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLedgerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLedgerResponse& from);
  void MergeFrom(const GetLedgerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLedgerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetLedgerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ledger_header = 1;
  void clear_ledger_header();
  static const int kLedgerHeaderFieldNumber = 1;
  const std::string& ledger_header() const;
  void set_ledger_header(const std::string& value);
  void set_ledger_header(std::string&& value);
  void set_ledger_header(const char* value);
  void set_ledger_header(const void* value, size_t size);
  std::string* mutable_ledger_header();
  std::string* release_ledger_header();
  void set_allocated_ledger_header(std::string* ledger_header);

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
  bool has_ledger_objects() const;
  void clear_ledger_objects();
  static const int kLedgerObjectsFieldNumber = 5;
  const ::org::xrpl::rpc::v1::RawLedgerObjects& ledger_objects() const;
  ::org::xrpl::rpc::v1::RawLedgerObjects* release_ledger_objects();
  ::org::xrpl::rpc::v1::RawLedgerObjects* mutable_ledger_objects();
  void set_allocated_ledger_objects(::org::xrpl::rpc::v1::RawLedgerObjects* ledger_objects);

  // bool validated = 4;
  void clear_validated();
  static const int kValidatedFieldNumber = 4;
  bool validated() const;
  void set_validated(bool value);

  // bool skiplist_included = 6;
  void clear_skiplist_included();
  static const int kSkiplistIncludedFieldNumber = 6;
  bool skiplist_included() const;
  void set_skiplist_included(bool value);

  // bool is_unlimited = 7;
  void clear_is_unlimited();
  static const int kIsUnlimitedFieldNumber = 7;
  bool is_unlimited() const;
  void set_is_unlimited(bool value);

  // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
  bool has_hashes_list() const;
  void clear_hashes_list();
  static const int kHashesListFieldNumber = 2;
  const ::org::xrpl::rpc::v1::TransactionHashList& hashes_list() const;
  ::org::xrpl::rpc::v1::TransactionHashList* release_hashes_list();
  ::org::xrpl::rpc::v1::TransactionHashList* mutable_hashes_list();
  void set_allocated_hashes_list(::org::xrpl::rpc::v1::TransactionHashList* hashes_list);

  // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
  bool has_transactions_list() const;
  void clear_transactions_list();
  static const int kTransactionsListFieldNumber = 3;
  const ::org::xrpl::rpc::v1::TransactionAndMetadataList& transactions_list() const;
  ::org::xrpl::rpc::v1::TransactionAndMetadataList* release_transactions_list();
  ::org::xrpl::rpc::v1::TransactionAndMetadataList* mutable_transactions_list();
  void set_allocated_transactions_list(::org::xrpl::rpc::v1::TransactionAndMetadataList* transactions_list);

  void clear_transactions();
  TransactionsCase transactions_case() const;
  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetLedgerResponse)
 private:
  class HasBitSetters;
  void set_has_hashes_list();
  void set_has_transactions_list();

  inline bool has_transactions() const;
  inline void clear_has_transactions();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_header_;
  ::org::xrpl::rpc::v1::RawLedgerObjects* ledger_objects_;
  bool validated_;
  bool skiplist_included_;
  bool is_unlimited_;
  union TransactionsUnion {
    TransactionsUnion() {}
    ::org::xrpl::rpc::v1::TransactionHashList* hashes_list_;
    ::org::xrpl::rpc::v1::TransactionAndMetadataList* transactions_list_;
  } transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
};
// -------------------------------------------------------------------

class TransactionHashList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.TransactionHashList) */ {
 public:
  TransactionHashList();
  virtual ~TransactionHashList();

  TransactionHashList(const TransactionHashList& from);
  TransactionHashList(TransactionHashList&& from) noexcept
    : TransactionHashList() {
    *this = ::std::move(from);
  }

  inline TransactionHashList& operator=(const TransactionHashList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionHashList& operator=(TransactionHashList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionHashList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionHashList* internal_default_instance() {
    return reinterpret_cast<const TransactionHashList*>(
               &_TransactionHashList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TransactionHashList* other);
  friend void swap(TransactionHashList& a, TransactionHashList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionHashList* New() const final {
    return CreateMaybeMessage<TransactionHashList>(nullptr);
  }

  TransactionHashList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionHashList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionHashList& from);
  void MergeFrom(const TransactionHashList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionHashList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.TransactionHashList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes hashes = 1;
  int hashes_size() const;
  void clear_hashes();
  static const int kHashesFieldNumber = 1;
  const std::string& hashes(int index) const;
  std::string* mutable_hashes(int index);
  void set_hashes(int index, const std::string& value);
  void set_hashes(int index, std::string&& value);
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const void* value, size_t size);
  std::string* add_hashes();
  void add_hashes(const std::string& value);
  void add_hashes(std::string&& value);
  void add_hashes(const char* value);
  void add_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashes();

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.TransactionHashList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
};
// -------------------------------------------------------------------

class TransactionAndMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.TransactionAndMetadata) */ {
 public:
  TransactionAndMetadata();
  virtual ~TransactionAndMetadata();

  TransactionAndMetadata(const TransactionAndMetadata& from);
  TransactionAndMetadata(TransactionAndMetadata&& from) noexcept
    : TransactionAndMetadata() {
    *this = ::std::move(from);
  }

  inline TransactionAndMetadata& operator=(const TransactionAndMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionAndMetadata& operator=(TransactionAndMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionAndMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionAndMetadata* internal_default_instance() {
    return reinterpret_cast<const TransactionAndMetadata*>(
               &_TransactionAndMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TransactionAndMetadata* other);
  friend void swap(TransactionAndMetadata& a, TransactionAndMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionAndMetadata* New() const final {
    return CreateMaybeMessage<TransactionAndMetadata>(nullptr);
  }

  TransactionAndMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionAndMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionAndMetadata& from);
  void MergeFrom(const TransactionAndMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionAndMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.TransactionAndMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes transaction_blob = 1;
  void clear_transaction_blob();
  static const int kTransactionBlobFieldNumber = 1;
  const std::string& transaction_blob() const;
  void set_transaction_blob(const std::string& value);
  void set_transaction_blob(std::string&& value);
  void set_transaction_blob(const char* value);
  void set_transaction_blob(const void* value, size_t size);
  std::string* mutable_transaction_blob();
  std::string* release_transaction_blob();
  void set_allocated_transaction_blob(std::string* transaction_blob);

  // bytes metadata_blob = 2;
  void clear_metadata_blob();
  static const int kMetadataBlobFieldNumber = 2;
  const std::string& metadata_blob() const;
  void set_metadata_blob(const std::string& value);
  void set_metadata_blob(std::string&& value);
  void set_metadata_blob(const char* value);
  void set_metadata_blob(const void* value, size_t size);
  std::string* mutable_metadata_blob();
  std::string* release_metadata_blob();
  void set_allocated_metadata_blob(std::string* metadata_blob);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.TransactionAndMetadata)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
};
// -------------------------------------------------------------------

class TransactionAndMetadataList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.TransactionAndMetadataList) */ {
 public:
  TransactionAndMetadataList();
  virtual ~TransactionAndMetadataList();

  TransactionAndMetadataList(const TransactionAndMetadataList& from);
  TransactionAndMetadataList(TransactionAndMetadataList&& from) noexcept
    : TransactionAndMetadataList() {
    *this = ::std::move(from);
  }

  inline TransactionAndMetadataList& operator=(const TransactionAndMetadataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionAndMetadataList& operator=(TransactionAndMetadataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionAndMetadataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionAndMetadataList* internal_default_instance() {
    return reinterpret_cast<const TransactionAndMetadataList*>(
               &_TransactionAndMetadataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TransactionAndMetadataList* other);
  friend void swap(TransactionAndMetadataList& a, TransactionAndMetadataList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionAndMetadataList* New() const final {
    return CreateMaybeMessage<TransactionAndMetadataList>(nullptr);
  }

  TransactionAndMetadataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionAndMetadataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionAndMetadataList& from);
  void MergeFrom(const TransactionAndMetadataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionAndMetadataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.TransactionAndMetadataList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 1;
  ::org::xrpl::rpc::v1::TransactionAndMetadata* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::TransactionAndMetadata >*
      mutable_transactions();
  const ::org::xrpl::rpc::v1::TransactionAndMetadata& transactions(int index) const;
  ::org::xrpl::rpc::v1::TransactionAndMetadata* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::TransactionAndMetadata >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.TransactionAndMetadataList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::TransactionAndMetadata > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetLedgerRequest

// .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
inline bool GetLedgerRequest::has_ledger() const {
  return this != internal_default_instance() && ledger_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::LedgerSpecifier& GetLedgerRequest::ledger() const {
  const ::org::xrpl::rpc::v1::LedgerSpecifier* p = ledger_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerRequest.ledger)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      &::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_);
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerRequest::release_ledger() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerRequest.ledger)
  
  ::org::xrpl::rpc::v1::LedgerSpecifier* temp = ledger_;
  ledger_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::LedgerSpecifier* GetLedgerRequest::mutable_ledger() {
  
  if (ledger_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::LedgerSpecifier>(GetArenaNoVirtual());
    ledger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerRequest.ledger)
  return ledger_;
}
inline void GetLedgerRequest::set_allocated_ledger(::org::xrpl::rpc::v1::LedgerSpecifier* ledger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_);
  }
  if (ledger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger, submessage_arena);
    }
    
  } else {
    
  }
  ledger_ = ledger;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerRequest.ledger)
}

// bool transactions = 2;
inline void GetLedgerRequest::clear_transactions() {
  transactions_ = false;
}
inline bool GetLedgerRequest::transactions() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerRequest.transactions)
  return transactions_;
}
inline void GetLedgerRequest::set_transactions(bool value) {
  
  transactions_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerRequest.transactions)
}

// bool expand = 3;
inline void GetLedgerRequest::clear_expand() {
  expand_ = false;
}
inline bool GetLedgerRequest::expand() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerRequest.expand)
  return expand_;
}
inline void GetLedgerRequest::set_expand(bool value) {
  
  expand_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerRequest.expand)
}

// bool get_objects = 4;
inline void GetLedgerRequest::clear_get_objects() {
  get_objects_ = false;
}
inline bool GetLedgerRequest::get_objects() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerRequest.get_objects)
  return get_objects_;
}
inline void GetLedgerRequest::set_get_objects(bool value) {
  
  get_objects_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerRequest.get_objects)
}

// string client_ip = 5;
inline void GetLedgerRequest::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerRequest::client_ip() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
  return client_ip_.GetNoArena();
}
inline void GetLedgerRequest::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
}
inline void GetLedgerRequest::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
}
inline void GetLedgerRequest::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
}
inline void GetLedgerRequest::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
}
inline std::string* GetLedgerRequest::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerRequest::release_client_ip() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerRequest::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerRequest.client_ip)
}

// string user = 6;
inline void GetLedgerRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerRequest::user() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerRequest.user)
  return user_.GetNoArena();
}
inline void GetLedgerRequest::set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerRequest.user)
}
inline void GetLedgerRequest::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerRequest.user)
}
inline void GetLedgerRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerRequest.user)
}
inline void GetLedgerRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerRequest.user)
}
inline std::string* GetLedgerRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerRequest.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerRequest::release_user() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerRequest.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerRequest.user)
}

// -------------------------------------------------------------------

// GetLedgerResponse

// bytes ledger_header = 1;
inline void GetLedgerResponse::clear_ledger_header() {
  ledger_header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLedgerResponse::ledger_header() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
  return ledger_header_.GetNoArena();
}
inline void GetLedgerResponse::set_ledger_header(const std::string& value) {
  
  ledger_header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
}
inline void GetLedgerResponse::set_ledger_header(std::string&& value) {
  
  ledger_header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
}
inline void GetLedgerResponse::set_ledger_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ledger_header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
}
inline void GetLedgerResponse::set_ledger_header(const void* value, size_t size) {
  
  ledger_header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
}
inline std::string* GetLedgerResponse::mutable_ledger_header() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
  return ledger_header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLedgerResponse::release_ledger_header() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
  
  return ledger_header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLedgerResponse::set_allocated_ledger_header(std::string* ledger_header) {
  if (ledger_header != nullptr) {
    
  } else {
    
  }
  ledger_header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledger_header);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerResponse.ledger_header)
}

// .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
inline bool GetLedgerResponse::has_hashes_list() const {
  return transactions_case() == kHashesList;
}
inline void GetLedgerResponse::set_has_hashes_list() {
  _oneof_case_[0] = kHashesList;
}
inline void GetLedgerResponse::clear_hashes_list() {
  if (has_hashes_list()) {
    delete transactions_.hashes_list_;
    clear_has_transactions();
  }
}
inline ::org::xrpl::rpc::v1::TransactionHashList* GetLedgerResponse::release_hashes_list() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerResponse.hashes_list)
  if (has_hashes_list()) {
    clear_has_transactions();
      ::org::xrpl::rpc::v1::TransactionHashList* temp = transactions_.hashes_list_;
    transactions_.hashes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::TransactionHashList& GetLedgerResponse::hashes_list() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerResponse.hashes_list)
  return has_hashes_list()
      ? *transactions_.hashes_list_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::TransactionHashList*>(&::org::xrpl::rpc::v1::_TransactionHashList_default_instance_);
}
inline ::org::xrpl::rpc::v1::TransactionHashList* GetLedgerResponse::mutable_hashes_list() {
  if (!has_hashes_list()) {
    clear_transactions();
    set_has_hashes_list();
    transactions_.hashes_list_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionHashList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerResponse.hashes_list)
  return transactions_.hashes_list_;
}

// .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
inline bool GetLedgerResponse::has_transactions_list() const {
  return transactions_case() == kTransactionsList;
}
inline void GetLedgerResponse::set_has_transactions_list() {
  _oneof_case_[0] = kTransactionsList;
}
inline void GetLedgerResponse::clear_transactions_list() {
  if (has_transactions_list()) {
    delete transactions_.transactions_list_;
    clear_has_transactions();
  }
}
inline ::org::xrpl::rpc::v1::TransactionAndMetadataList* GetLedgerResponse::release_transactions_list() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerResponse.transactions_list)
  if (has_transactions_list()) {
    clear_has_transactions();
      ::org::xrpl::rpc::v1::TransactionAndMetadataList* temp = transactions_.transactions_list_;
    transactions_.transactions_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::xrpl::rpc::v1::TransactionAndMetadataList& GetLedgerResponse::transactions_list() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerResponse.transactions_list)
  return has_transactions_list()
      ? *transactions_.transactions_list_
      : *reinterpret_cast< ::org::xrpl::rpc::v1::TransactionAndMetadataList*>(&::org::xrpl::rpc::v1::_TransactionAndMetadataList_default_instance_);
}
inline ::org::xrpl::rpc::v1::TransactionAndMetadataList* GetLedgerResponse::mutable_transactions_list() {
  if (!has_transactions_list()) {
    clear_transactions();
    set_has_transactions_list();
    transactions_.transactions_list_ = CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionAndMetadataList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerResponse.transactions_list)
  return transactions_.transactions_list_;
}

// bool validated = 4;
inline void GetLedgerResponse::clear_validated() {
  validated_ = false;
}
inline bool GetLedgerResponse::validated() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerResponse.validated)
  return validated_;
}
inline void GetLedgerResponse::set_validated(bool value) {
  
  validated_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerResponse.validated)
}

// .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
inline bool GetLedgerResponse::has_ledger_objects() const {
  return this != internal_default_instance() && ledger_objects_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::RawLedgerObjects& GetLedgerResponse::ledger_objects() const {
  const ::org::xrpl::rpc::v1::RawLedgerObjects* p = ledger_objects_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerResponse.ledger_objects)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::RawLedgerObjects*>(
      &::org::xrpl::rpc::v1::_RawLedgerObjects_default_instance_);
}
inline ::org::xrpl::rpc::v1::RawLedgerObjects* GetLedgerResponse::release_ledger_objects() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetLedgerResponse.ledger_objects)
  
  ::org::xrpl::rpc::v1::RawLedgerObjects* temp = ledger_objects_;
  ledger_objects_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::RawLedgerObjects* GetLedgerResponse::mutable_ledger_objects() {
  
  if (ledger_objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::RawLedgerObjects>(GetArenaNoVirtual());
    ledger_objects_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetLedgerResponse.ledger_objects)
  return ledger_objects_;
}
inline void GetLedgerResponse::set_allocated_ledger_objects(::org::xrpl::rpc::v1::RawLedgerObjects* ledger_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ledger_objects_);
  }
  if (ledger_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger_objects, submessage_arena);
    }
    
  } else {
    
  }
  ledger_objects_ = ledger_objects;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerResponse.ledger_objects)
}

// bool skiplist_included = 6;
inline void GetLedgerResponse::clear_skiplist_included() {
  skiplist_included_ = false;
}
inline bool GetLedgerResponse::skiplist_included() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerResponse.skiplist_included)
  return skiplist_included_;
}
inline void GetLedgerResponse::set_skiplist_included(bool value) {
  
  skiplist_included_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerResponse.skiplist_included)
}

// bool is_unlimited = 7;
inline void GetLedgerResponse::clear_is_unlimited() {
  is_unlimited_ = false;
}
inline bool GetLedgerResponse::is_unlimited() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetLedgerResponse.is_unlimited)
  return is_unlimited_;
}
inline void GetLedgerResponse::set_is_unlimited(bool value) {
  
  is_unlimited_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetLedgerResponse.is_unlimited)
}

inline bool GetLedgerResponse::has_transactions() const {
  return transactions_case() != TRANSACTIONS_NOT_SET;
}
inline void GetLedgerResponse::clear_has_transactions() {
  _oneof_case_[0] = TRANSACTIONS_NOT_SET;
}
inline GetLedgerResponse::TransactionsCase GetLedgerResponse::transactions_case() const {
  return GetLedgerResponse::TransactionsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionHashList

// repeated bytes hashes = 1;
inline int TransactionHashList::hashes_size() const {
  return hashes_.size();
}
inline void TransactionHashList::clear_hashes() {
  hashes_.Clear();
}
inline const std::string& TransactionHashList::hashes(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TransactionHashList.hashes)
  return hashes_.Get(index);
}
inline std::string* TransactionHashList::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TransactionHashList.hashes)
  return hashes_.Mutable(index);
}
inline void TransactionHashList::set_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.TransactionHashList.hashes)
  hashes_.Mutable(index)->assign(value);
}
inline void TransactionHashList::set_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.TransactionHashList.hashes)
  hashes_.Mutable(index)->assign(std::move(value));
}
inline void TransactionHashList::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.TransactionHashList.hashes)
}
inline void TransactionHashList::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.TransactionHashList.hashes)
}
inline std::string* TransactionHashList::add_hashes() {
  // @@protoc_insertion_point(field_add_mutable:org.xrpl.rpc.v1.TransactionHashList.hashes)
  return hashes_.Add();
}
inline void TransactionHashList::add_hashes(const std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.TransactionHashList.hashes)
}
inline void TransactionHashList::add_hashes(std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.TransactionHashList.hashes)
}
inline void TransactionHashList::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.xrpl.rpc.v1.TransactionHashList.hashes)
}
inline void TransactionHashList::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.xrpl.rpc.v1.TransactionHashList.hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionHashList::hashes() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.TransactionHashList.hashes)
  return hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionHashList::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.TransactionHashList.hashes)
  return &hashes_;
}

// -------------------------------------------------------------------

// TransactionAndMetadata

// bytes transaction_blob = 1;
inline void TransactionAndMetadata::clear_transaction_blob() {
  transaction_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionAndMetadata::transaction_blob() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
  return transaction_blob_.GetNoArena();
}
inline void TransactionAndMetadata::set_transaction_blob(const std::string& value) {
  
  transaction_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
}
inline void TransactionAndMetadata::set_transaction_blob(std::string&& value) {
  
  transaction_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
}
inline void TransactionAndMetadata::set_transaction_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
}
inline void TransactionAndMetadata::set_transaction_blob(const void* value, size_t size) {
  
  transaction_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
}
inline std::string* TransactionAndMetadata::mutable_transaction_blob() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
  return transaction_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionAndMetadata::release_transaction_blob() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
  
  return transaction_blob_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionAndMetadata::set_allocated_transaction_blob(std::string* transaction_blob) {
  if (transaction_blob != nullptr) {
    
  } else {
    
  }
  transaction_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_blob);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.TransactionAndMetadata.transaction_blob)
}

// bytes metadata_blob = 2;
inline void TransactionAndMetadata::clear_metadata_blob() {
  metadata_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionAndMetadata::metadata_blob() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
  return metadata_blob_.GetNoArena();
}
inline void TransactionAndMetadata::set_metadata_blob(const std::string& value) {
  
  metadata_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
}
inline void TransactionAndMetadata::set_metadata_blob(std::string&& value) {
  
  metadata_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
}
inline void TransactionAndMetadata::set_metadata_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
}
inline void TransactionAndMetadata::set_metadata_blob(const void* value, size_t size) {
  
  metadata_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
}
inline std::string* TransactionAndMetadata::mutable_metadata_blob() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
  return metadata_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionAndMetadata::release_metadata_blob() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
  
  return metadata_blob_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionAndMetadata::set_allocated_metadata_blob(std::string* metadata_blob) {
  if (metadata_blob != nullptr) {
    
  } else {
    
  }
  metadata_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata_blob);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.TransactionAndMetadata.metadata_blob)
}

// -------------------------------------------------------------------

// TransactionAndMetadataList

// repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
inline int TransactionAndMetadataList::transactions_size() const {
  return transactions_.size();
}
inline void TransactionAndMetadataList::clear_transactions() {
  transactions_.Clear();
}
inline ::org::xrpl::rpc::v1::TransactionAndMetadata* TransactionAndMetadataList::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.TransactionAndMetadataList.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::TransactionAndMetadata >*
TransactionAndMetadataList::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:org.xrpl.rpc.v1.TransactionAndMetadataList.transactions)
  return &transactions_;
}
inline const ::org::xrpl::rpc::v1::TransactionAndMetadata& TransactionAndMetadataList::transactions(int index) const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.TransactionAndMetadataList.transactions)
  return transactions_.Get(index);
}
inline ::org::xrpl::rpc::v1::TransactionAndMetadata* TransactionAndMetadataList::add_transactions() {
  // @@protoc_insertion_point(field_add:org.xrpl.rpc.v1.TransactionAndMetadataList.transactions)
  return transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xrpl::rpc::v1::TransactionAndMetadata >&
TransactionAndMetadataList::transactions() const {
  // @@protoc_insertion_point(field_list:org.xrpl.rpc.v1.TransactionAndMetadataList.transactions)
  return transactions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto
