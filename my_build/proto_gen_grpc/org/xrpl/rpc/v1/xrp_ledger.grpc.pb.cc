// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: org/xrpl/rpc/v1/xrp_ledger.proto

#include "org/xrpl/rpc/v1/xrp_ledger.pb.h"
#include "org/xrpl/rpc/v1/xrp_ledger.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

static const char* XRPLedgerAPIService_method_names[] = {
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetAccountInfo",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetFee",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/SubmitTransaction",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetTransaction",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetAccountTransactionHistory",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedger",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedgerEntry",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedgerData",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedgerDiff",
};

std::unique_ptr< XRPLedgerAPIService::Stub> XRPLedgerAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< XRPLedgerAPIService::Stub> stub(new XRPLedgerAPIService::Stub(channel));
  return stub;
}

XRPLedgerAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetAccountInfo_(XRPLedgerAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFee_(XRPLedgerAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitTransaction_(XRPLedgerAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransaction_(XRPLedgerAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountTransactionHistory_(XRPLedgerAPIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLedger_(XRPLedgerAPIService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLedgerEntry_(XRPLedgerAPIService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLedgerData_(XRPLedgerAPIService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLedgerDiff_(XRPLedgerAPIService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status XRPLedgerAPIService::Stub::GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccountInfo_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAccountInfo_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAccountInfo_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountInfo(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccountInfo_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccountInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>* XRPLedgerAPIService::Stub::AsyncGetAccountInfoRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetAccountInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetAccountInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountInfoResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetAccountInfoRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetAccountInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetAccountInfo_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::org::xrpl::rpc::v1::GetFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFee_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFee_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFee_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetFee(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFee_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>* XRPLedgerAPIService::Stub::AsyncGetFeeRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetFeeResponse>::Create(channel_.get(), cq, rpcmethod_GetFee_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetFeeResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetFeeRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetFeeResponse>::Create(channel_.get(), cq, rpcmethod_GetFee_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SubmitTransaction_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>* XRPLedgerAPIService::Stub::AsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::SubmitTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SubmitTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::SubmitTransactionResponse>* XRPLedgerAPIService::Stub::PrepareAsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::SubmitTransactionResponse>::Create(channel_.get(), cq, rpcmethod_SubmitTransaction_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::org::xrpl::rpc::v1::GetTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransaction_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetTransaction(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>* XRPLedgerAPIService::Stub::AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetTransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetTransactionResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetTransactionRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetTransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetTransaction_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccountTransactionHistory_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAccountTransactionHistory_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountTransactionHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAccountTransactionHistory_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountTransactionHistory(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccountTransactionHistory_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetAccountTransactionHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccountTransactionHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* XRPLedgerAPIService::Stub::AsyncGetAccountTransactionHistoryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>::Create(channel_.get(), cq, rpcmethod_GetAccountTransactionHistory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetAccountTransactionHistoryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>::Create(channel_.get(), cq, rpcmethod_GetAccountTransactionHistory_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::org::xrpl::rpc::v1::GetLedgerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLedger_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedger_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedger_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedger_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerResponse>::Create(channel_.get(), cq, rpcmethod_GetLedger_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerResponse>::Create(channel_.get(), cq, rpcmethod_GetLedger_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLedgerEntry_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedgerEntry_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedgerEntry_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedgerEntry_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedgerEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetLedgerEntry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetLedgerEntry_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLedgerData_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedgerData_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedgerData_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedgerData_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedgerData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerDataResponse>::Create(channel_.get(), cq, rpcmethod_GetLedgerData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerDataResponse>::Create(channel_.get(), cq, rpcmethod_GetLedgerData_, context, request, false);
}

::grpc::Status XRPLedgerAPIService::Stub::GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLedgerDiff_, context, request, response);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedgerDiff_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerDiff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLedgerDiff_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedgerDiff_, context, request, response, reactor);
}

void XRPLedgerAPIService::Stub::experimental_async::GetLedgerDiff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLedgerDiff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>::Create(channel_.get(), cq, rpcmethod_GetLedgerDiff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>::Create(channel_.get(), cq, rpcmethod_GetLedgerDiff_, context, request, false);
}

XRPLedgerAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetAccountInfoRequest, ::org::xrpl::rpc::v1::GetAccountInfoResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetAccountInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetFeeRequest, ::org::xrpl::rpc::v1::GetFeeResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetFee), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::SubmitTransactionRequest, ::org::xrpl::rpc::v1::SubmitTransactionResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::SubmitTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetTransactionRequest, ::org::xrpl::rpc::v1::GetTransactionResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetAccountTransactionHistory), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetLedger), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetLedgerEntry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetLedgerData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse>(
          std::mem_fn(&XRPLedgerAPIService::Service::GetLedgerDiff), this)));
}

XRPLedgerAPIService::Service::~Service() {
}

::grpc::Status XRPLedgerAPIService::Service::GetAccountInfo(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetAccountInfoRequest* request, ::org::xrpl::rpc::v1::GetAccountInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetFee(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetFeeRequest* request, ::org::xrpl::rpc::v1::GetFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::SubmitTransaction(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::SubmitTransactionRequest* request, ::org::xrpl::rpc::v1::SubmitTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetTransaction(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetTransactionRequest* request, ::org::xrpl::rpc::v1::GetTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetAccountTransactionHistory(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetAccountTransactionHistoryRequest* request, ::org::xrpl::rpc::v1::GetAccountTransactionHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetLedger(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetLedgerEntry(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetLedgerData(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetLedgerDiff(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace org
}  // namespace xrpl
}  // namespace rpc
}  // namespace v1

