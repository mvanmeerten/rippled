// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_fee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "org/xrpl/rpc/v1/amount.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class Fee;
class FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class FeeLevels;
class FeeLevelsDefaultTypeInternal;
extern FeeLevelsDefaultTypeInternal _FeeLevels_default_instance_;
class GetFeeRequest;
class GetFeeRequestDefaultTypeInternal;
extern GetFeeRequestDefaultTypeInternal _GetFeeRequest_default_instance_;
class GetFeeResponse;
class GetFeeResponseDefaultTypeInternal;
extern GetFeeResponseDefaultTypeInternal _GetFeeResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xrpl::rpc::v1::Fee* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::Fee>(Arena*);
template<> ::org::xrpl::rpc::v1::FeeLevels* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::FeeLevels>(Arena*);
template<> ::org::xrpl::rpc::v1::GetFeeRequest* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetFeeRequest>(Arena*);
template<> ::org::xrpl::rpc::v1::GetFeeResponse* Arena::CreateMaybeMessage<::org::xrpl::rpc::v1::GetFeeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetFeeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetFeeRequest) */ {
 public:
  GetFeeRequest();
  virtual ~GetFeeRequest();

  GetFeeRequest(const GetFeeRequest& from);
  GetFeeRequest(GetFeeRequest&& from) noexcept
    : GetFeeRequest() {
    *this = ::std::move(from);
  }

  inline GetFeeRequest& operator=(const GetFeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeRequest& operator=(GetFeeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeRequest* internal_default_instance() {
    return reinterpret_cast<const GetFeeRequest*>(
               &_GetFeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetFeeRequest* other);
  friend void swap(GetFeeRequest& a, GetFeeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFeeRequest* New() const final {
    return CreateMaybeMessage<GetFeeRequest>(nullptr);
  }

  GetFeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeRequest& from);
  void MergeFrom(const GetFeeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetFeeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_ip = 1;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 1;
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetFeeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto;
};
// -------------------------------------------------------------------

class GetFeeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.GetFeeResponse) */ {
 public:
  GetFeeResponse();
  virtual ~GetFeeResponse();

  GetFeeResponse(const GetFeeResponse& from);
  GetFeeResponse(GetFeeResponse&& from) noexcept
    : GetFeeResponse() {
    *this = ::std::move(from);
  }

  inline GetFeeResponse& operator=(const GetFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeResponse& operator=(GetFeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeeResponse*>(
               &_GetFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetFeeResponse* other);
  friend void swap(GetFeeResponse& a, GetFeeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFeeResponse* New() const final {
    return CreateMaybeMessage<GetFeeResponse>(nullptr);
  }

  GetFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeResponse& from);
  void MergeFrom(const GetFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.GetFeeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.Fee fee = 3;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  const ::org::xrpl::rpc::v1::Fee& fee() const;
  ::org::xrpl::rpc::v1::Fee* release_fee();
  ::org::xrpl::rpc::v1::Fee* mutable_fee();
  void set_allocated_fee(::org::xrpl::rpc::v1::Fee* fee);

  // .org.xrpl.rpc.v1.FeeLevels levels = 6;
  bool has_levels() const;
  void clear_levels();
  static const int kLevelsFieldNumber = 6;
  const ::org::xrpl::rpc::v1::FeeLevels& levels() const;
  ::org::xrpl::rpc::v1::FeeLevels* release_levels();
  ::org::xrpl::rpc::v1::FeeLevels* mutable_levels();
  void set_allocated_levels(::org::xrpl::rpc::v1::FeeLevels* levels);

  // uint64 current_ledger_size = 1 [jstype = JS_STRING];
  void clear_current_ledger_size();
  static const int kCurrentLedgerSizeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_ledger_size() const;
  void set_current_ledger_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 current_queue_size = 2 [jstype = JS_STRING];
  void clear_current_queue_size();
  static const int kCurrentQueueSizeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_queue_size() const;
  void set_current_queue_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 expected_ledger_size = 4 [jstype = JS_STRING];
  void clear_expected_ledger_size();
  static const int kExpectedLedgerSizeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_ledger_size() const;
  void set_expected_ledger_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 max_queue_size = 7 [jstype = JS_STRING];
  void clear_max_queue_size();
  static const int kMaxQueueSizeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_queue_size() const;
  void set_max_queue_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 ledger_current_index = 5;
  void clear_ledger_current_index();
  static const int kLedgerCurrentIndexFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_current_index() const;
  void set_ledger_current_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.GetFeeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::Fee* fee_;
  ::org::xrpl::rpc::v1::FeeLevels* levels_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_ledger_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_queue_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_ledger_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_queue_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledger_current_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto;
};
// -------------------------------------------------------------------

class Fee :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.Fee) */ {
 public:
  Fee();
  virtual ~Fee();

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Fee* other);
  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fee* New() const final {
    return CreateMaybeMessage<Fee>(nullptr);
  }

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fee& from);
  void MergeFrom(const Fee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.Fee";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .org.xrpl.rpc.v1.XRPDropsAmount base_fee = 1;
  bool has_base_fee() const;
  void clear_base_fee();
  static const int kBaseFeeFieldNumber = 1;
  const ::org::xrpl::rpc::v1::XRPDropsAmount& base_fee() const;
  ::org::xrpl::rpc::v1::XRPDropsAmount* release_base_fee();
  ::org::xrpl::rpc::v1::XRPDropsAmount* mutable_base_fee();
  void set_allocated_base_fee(::org::xrpl::rpc::v1::XRPDropsAmount* base_fee);

  // .org.xrpl.rpc.v1.XRPDropsAmount median_fee = 2;
  bool has_median_fee() const;
  void clear_median_fee();
  static const int kMedianFeeFieldNumber = 2;
  const ::org::xrpl::rpc::v1::XRPDropsAmount& median_fee() const;
  ::org::xrpl::rpc::v1::XRPDropsAmount* release_median_fee();
  ::org::xrpl::rpc::v1::XRPDropsAmount* mutable_median_fee();
  void set_allocated_median_fee(::org::xrpl::rpc::v1::XRPDropsAmount* median_fee);

  // .org.xrpl.rpc.v1.XRPDropsAmount minimum_fee = 3;
  bool has_minimum_fee() const;
  void clear_minimum_fee();
  static const int kMinimumFeeFieldNumber = 3;
  const ::org::xrpl::rpc::v1::XRPDropsAmount& minimum_fee() const;
  ::org::xrpl::rpc::v1::XRPDropsAmount* release_minimum_fee();
  ::org::xrpl::rpc::v1::XRPDropsAmount* mutable_minimum_fee();
  void set_allocated_minimum_fee(::org::xrpl::rpc::v1::XRPDropsAmount* minimum_fee);

  // .org.xrpl.rpc.v1.XRPDropsAmount open_ledger_fee = 4;
  bool has_open_ledger_fee() const;
  void clear_open_ledger_fee();
  static const int kOpenLedgerFeeFieldNumber = 4;
  const ::org::xrpl::rpc::v1::XRPDropsAmount& open_ledger_fee() const;
  ::org::xrpl::rpc::v1::XRPDropsAmount* release_open_ledger_fee();
  ::org::xrpl::rpc::v1::XRPDropsAmount* mutable_open_ledger_fee();
  void set_allocated_open_ledger_fee(::org::xrpl::rpc::v1::XRPDropsAmount* open_ledger_fee);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.Fee)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::org::xrpl::rpc::v1::XRPDropsAmount* base_fee_;
  ::org::xrpl::rpc::v1::XRPDropsAmount* median_fee_;
  ::org::xrpl::rpc::v1::XRPDropsAmount* minimum_fee_;
  ::org::xrpl::rpc::v1::XRPDropsAmount* open_ledger_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto;
};
// -------------------------------------------------------------------

class FeeLevels :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xrpl.rpc.v1.FeeLevels) */ {
 public:
  FeeLevels();
  virtual ~FeeLevels();

  FeeLevels(const FeeLevels& from);
  FeeLevels(FeeLevels&& from) noexcept
    : FeeLevels() {
    *this = ::std::move(from);
  }

  inline FeeLevels& operator=(const FeeLevels& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeLevels& operator=(FeeLevels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeLevels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeeLevels* internal_default_instance() {
    return reinterpret_cast<const FeeLevels*>(
               &_FeeLevels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FeeLevels* other);
  friend void swap(FeeLevels& a, FeeLevels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeeLevels* New() const final {
    return CreateMaybeMessage<FeeLevels>(nullptr);
  }

  FeeLevels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeLevels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeLevels& from);
  void MergeFrom(const FeeLevels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeLevels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xrpl.rpc.v1.FeeLevels";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto);
    return ::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 median_level = 1 [jstype = JS_STRING];
  void clear_median_level();
  static const int kMedianLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 median_level() const;
  void set_median_level(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 minimum_level = 2 [jstype = JS_STRING];
  void clear_minimum_level();
  static const int kMinimumLevelFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 minimum_level() const;
  void set_minimum_level(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 open_ledger_level = 3 [jstype = JS_STRING];
  void clear_open_ledger_level();
  static const int kOpenLedgerLevelFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_ledger_level() const;
  void set_open_ledger_level(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 reference_level = 4 [jstype = JS_STRING];
  void clear_reference_level();
  static const int kReferenceLevelFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 reference_level() const;
  void set_reference_level(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:org.xrpl.rpc.v1.FeeLevels)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 median_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minimum_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_ledger_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reference_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFeeRequest

// string client_ip = 1;
inline void GetFeeRequest::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFeeRequest::client_ip() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
  return client_ip_.GetNoArena();
}
inline void GetFeeRequest::set_client_ip(const std::string& value) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
}
inline void GetFeeRequest::set_client_ip(std::string&& value) {
  
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
}
inline void GetFeeRequest::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
}
inline void GetFeeRequest::set_client_ip(const char* value, size_t size) {
  
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
}
inline std::string* GetFeeRequest::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFeeRequest::release_client_ip() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
  
  return client_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFeeRequest::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetFeeRequest.client_ip)
}

// -------------------------------------------------------------------

// GetFeeResponse

// uint64 current_ledger_size = 1 [jstype = JS_STRING];
inline void GetFeeResponse::clear_current_ledger_size() {
  current_ledger_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFeeResponse::current_ledger_size() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeResponse.current_ledger_size)
  return current_ledger_size_;
}
inline void GetFeeResponse::set_current_ledger_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_ledger_size_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetFeeResponse.current_ledger_size)
}

// uint64 current_queue_size = 2 [jstype = JS_STRING];
inline void GetFeeResponse::clear_current_queue_size() {
  current_queue_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFeeResponse::current_queue_size() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeResponse.current_queue_size)
  return current_queue_size_;
}
inline void GetFeeResponse::set_current_queue_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_queue_size_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetFeeResponse.current_queue_size)
}

// .org.xrpl.rpc.v1.Fee fee = 3;
inline bool GetFeeResponse::has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline void GetFeeResponse::clear_fee() {
  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
inline const ::org::xrpl::rpc::v1::Fee& GetFeeResponse::fee() const {
  const ::org::xrpl::rpc::v1::Fee* p = fee_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeResponse.fee)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::Fee*>(
      &::org::xrpl::rpc::v1::_Fee_default_instance_);
}
inline ::org::xrpl::rpc::v1::Fee* GetFeeResponse::release_fee() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetFeeResponse.fee)
  
  ::org::xrpl::rpc::v1::Fee* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::Fee* GetFeeResponse::mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::Fee>(GetArenaNoVirtual());
    fee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetFeeResponse.fee)
  return fee_;
}
inline void GetFeeResponse::set_allocated_fee(::org::xrpl::rpc::v1::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fee_;
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetFeeResponse.fee)
}

// uint64 expected_ledger_size = 4 [jstype = JS_STRING];
inline void GetFeeResponse::clear_expected_ledger_size() {
  expected_ledger_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFeeResponse::expected_ledger_size() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeResponse.expected_ledger_size)
  return expected_ledger_size_;
}
inline void GetFeeResponse::set_expected_ledger_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expected_ledger_size_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetFeeResponse.expected_ledger_size)
}

// uint32 ledger_current_index = 5;
inline void GetFeeResponse::clear_ledger_current_index() {
  ledger_current_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetFeeResponse::ledger_current_index() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeResponse.ledger_current_index)
  return ledger_current_index_;
}
inline void GetFeeResponse::set_ledger_current_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ledger_current_index_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetFeeResponse.ledger_current_index)
}

// .org.xrpl.rpc.v1.FeeLevels levels = 6;
inline bool GetFeeResponse::has_levels() const {
  return this != internal_default_instance() && levels_ != nullptr;
}
inline void GetFeeResponse::clear_levels() {
  if (GetArenaNoVirtual() == nullptr && levels_ != nullptr) {
    delete levels_;
  }
  levels_ = nullptr;
}
inline const ::org::xrpl::rpc::v1::FeeLevels& GetFeeResponse::levels() const {
  const ::org::xrpl::rpc::v1::FeeLevels* p = levels_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeResponse.levels)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::FeeLevels*>(
      &::org::xrpl::rpc::v1::_FeeLevels_default_instance_);
}
inline ::org::xrpl::rpc::v1::FeeLevels* GetFeeResponse::release_levels() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.GetFeeResponse.levels)
  
  ::org::xrpl::rpc::v1::FeeLevels* temp = levels_;
  levels_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::FeeLevels* GetFeeResponse::mutable_levels() {
  
  if (levels_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::FeeLevels>(GetArenaNoVirtual());
    levels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.GetFeeResponse.levels)
  return levels_;
}
inline void GetFeeResponse::set_allocated_levels(::org::xrpl::rpc::v1::FeeLevels* levels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete levels_;
  }
  if (levels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      levels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, levels, submessage_arena);
    }
    
  } else {
    
  }
  levels_ = levels;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetFeeResponse.levels)
}

// uint64 max_queue_size = 7 [jstype = JS_STRING];
inline void GetFeeResponse::clear_max_queue_size() {
  max_queue_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFeeResponse::max_queue_size() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.GetFeeResponse.max_queue_size)
  return max_queue_size_;
}
inline void GetFeeResponse::set_max_queue_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_queue_size_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.GetFeeResponse.max_queue_size)
}

// -------------------------------------------------------------------

// Fee

// .org.xrpl.rpc.v1.XRPDropsAmount base_fee = 1;
inline bool Fee::has_base_fee() const {
  return this != internal_default_instance() && base_fee_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::XRPDropsAmount& Fee::base_fee() const {
  const ::org::xrpl::rpc::v1::XRPDropsAmount* p = base_fee_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Fee.base_fee)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      &::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::release_base_fee() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Fee.base_fee)
  
  ::org::xrpl::rpc::v1::XRPDropsAmount* temp = base_fee_;
  base_fee_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::mutable_base_fee() {
  
  if (base_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::XRPDropsAmount>(GetArenaNoVirtual());
    base_fee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Fee.base_fee)
  return base_fee_;
}
inline void Fee::set_allocated_base_fee(::org::xrpl::rpc::v1::XRPDropsAmount* base_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_fee_);
  }
  if (base_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_fee, submessage_arena);
    }
    
  } else {
    
  }
  base_fee_ = base_fee;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Fee.base_fee)
}

// .org.xrpl.rpc.v1.XRPDropsAmount median_fee = 2;
inline bool Fee::has_median_fee() const {
  return this != internal_default_instance() && median_fee_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::XRPDropsAmount& Fee::median_fee() const {
  const ::org::xrpl::rpc::v1::XRPDropsAmount* p = median_fee_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Fee.median_fee)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      &::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::release_median_fee() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Fee.median_fee)
  
  ::org::xrpl::rpc::v1::XRPDropsAmount* temp = median_fee_;
  median_fee_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::mutable_median_fee() {
  
  if (median_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::XRPDropsAmount>(GetArenaNoVirtual());
    median_fee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Fee.median_fee)
  return median_fee_;
}
inline void Fee::set_allocated_median_fee(::org::xrpl::rpc::v1::XRPDropsAmount* median_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(median_fee_);
  }
  if (median_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      median_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, median_fee, submessage_arena);
    }
    
  } else {
    
  }
  median_fee_ = median_fee;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Fee.median_fee)
}

// .org.xrpl.rpc.v1.XRPDropsAmount minimum_fee = 3;
inline bool Fee::has_minimum_fee() const {
  return this != internal_default_instance() && minimum_fee_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::XRPDropsAmount& Fee::minimum_fee() const {
  const ::org::xrpl::rpc::v1::XRPDropsAmount* p = minimum_fee_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Fee.minimum_fee)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      &::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::release_minimum_fee() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Fee.minimum_fee)
  
  ::org::xrpl::rpc::v1::XRPDropsAmount* temp = minimum_fee_;
  minimum_fee_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::mutable_minimum_fee() {
  
  if (minimum_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::XRPDropsAmount>(GetArenaNoVirtual());
    minimum_fee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Fee.minimum_fee)
  return minimum_fee_;
}
inline void Fee::set_allocated_minimum_fee(::org::xrpl::rpc::v1::XRPDropsAmount* minimum_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_fee_);
  }
  if (minimum_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      minimum_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_fee, submessage_arena);
    }
    
  } else {
    
  }
  minimum_fee_ = minimum_fee;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Fee.minimum_fee)
}

// .org.xrpl.rpc.v1.XRPDropsAmount open_ledger_fee = 4;
inline bool Fee::has_open_ledger_fee() const {
  return this != internal_default_instance() && open_ledger_fee_ != nullptr;
}
inline const ::org::xrpl::rpc::v1::XRPDropsAmount& Fee::open_ledger_fee() const {
  const ::org::xrpl::rpc::v1::XRPDropsAmount* p = open_ledger_fee_;
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.Fee.open_ledger_fee)
  return p != nullptr ? *p : *reinterpret_cast<const ::org::xrpl::rpc::v1::XRPDropsAmount*>(
      &::org::xrpl::rpc::v1::_XRPDropsAmount_default_instance_);
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::release_open_ledger_fee() {
  // @@protoc_insertion_point(field_release:org.xrpl.rpc.v1.Fee.open_ledger_fee)
  
  ::org::xrpl::rpc::v1::XRPDropsAmount* temp = open_ledger_fee_;
  open_ledger_fee_ = nullptr;
  return temp;
}
inline ::org::xrpl::rpc::v1::XRPDropsAmount* Fee::mutable_open_ledger_fee() {
  
  if (open_ledger_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xrpl::rpc::v1::XRPDropsAmount>(GetArenaNoVirtual());
    open_ledger_fee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:org.xrpl.rpc.v1.Fee.open_ledger_fee)
  return open_ledger_fee_;
}
inline void Fee::set_allocated_open_ledger_fee(::org::xrpl::rpc::v1::XRPDropsAmount* open_ledger_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_ledger_fee_);
  }
  if (open_ledger_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_ledger_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_ledger_fee, submessage_arena);
    }
    
  } else {
    
  }
  open_ledger_fee_ = open_ledger_fee;
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.Fee.open_ledger_fee)
}

// -------------------------------------------------------------------

// FeeLevels

// uint64 median_level = 1 [jstype = JS_STRING];
inline void FeeLevels::clear_median_level() {
  median_level_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeLevels::median_level() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.FeeLevels.median_level)
  return median_level_;
}
inline void FeeLevels::set_median_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  median_level_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.FeeLevels.median_level)
}

// uint64 minimum_level = 2 [jstype = JS_STRING];
inline void FeeLevels::clear_minimum_level() {
  minimum_level_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeLevels::minimum_level() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.FeeLevels.minimum_level)
  return minimum_level_;
}
inline void FeeLevels::set_minimum_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minimum_level_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.FeeLevels.minimum_level)
}

// uint64 open_ledger_level = 3 [jstype = JS_STRING];
inline void FeeLevels::clear_open_ledger_level() {
  open_ledger_level_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeLevels::open_ledger_level() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.FeeLevels.open_ledger_level)
  return open_ledger_level_;
}
inline void FeeLevels::set_open_ledger_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_ledger_level_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.FeeLevels.open_ledger_level)
}

// uint64 reference_level = 4 [jstype = JS_STRING];
inline void FeeLevels::clear_reference_level() {
  reference_level_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeLevels::reference_level() const {
  // @@protoc_insertion_point(field_get:org.xrpl.rpc.v1.FeeLevels.reference_level)
  return reference_level_;
}
inline void FeeLevels::set_reference_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reference_level_ = value;
  // @@protoc_insertion_point(field_set:org.xrpl.rpc.v1.FeeLevels.reference_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_org_2fxrpl_2frpc_2fv1_2fget_5ffee_2eproto
