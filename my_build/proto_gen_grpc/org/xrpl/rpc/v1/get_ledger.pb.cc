// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger.proto

#include "org/xrpl/rpc/v1/get_ledger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class GetLedgerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLedgerRequest> _instance;
} _GetLedgerRequest_default_instance_;
class GetLedgerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLedgerResponse> _instance;
  const ::org::xrpl::rpc::v1::TransactionHashList* hashes_list_;
  const ::org::xrpl::rpc::v1::TransactionAndMetadataList* transactions_list_;
} _GetLedgerResponse_default_instance_;
class TransactionHashListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionHashList> _instance;
} _TransactionHashList_default_instance_;
class TransactionAndMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionAndMetadata> _instance;
} _TransactionAndMetadata_default_instance_;
class TransactionAndMetadataListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionAndMetadataList> _instance;
} _TransactionAndMetadataList_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_GetLedgerRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetLedgerRequest_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetLedgerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetLedgerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLedgerRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetLedgerRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto}, {
      &scc_info_LedgerSpecifier_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static void InitDefaultsscc_info_GetLedgerResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_GetLedgerResponse_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::GetLedgerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::GetLedgerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLedgerResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetLedgerResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto}, {
      &scc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,
      &scc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,
      &scc_info_RawLedgerObjects_org_2fxrpl_2frpc_2fv1_2fledger_2eproto.base,}};

static void InitDefaultsscc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_TransactionAndMetadata_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::TransactionAndMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::TransactionAndMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto}, {}};

static void InitDefaultsscc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_TransactionAndMetadataList_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::TransactionAndMetadataList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::TransactionAndMetadataList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto}, {
      &scc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,}};

static void InitDefaultsscc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_TransactionHashList_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::TransactionHashList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::TransactionHashList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, transactions_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, expand_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, get_objects_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, client_ip_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, ledger_header_),
  offsetof(::org::xrpl::rpc::v1::GetLedgerResponseDefaultTypeInternal, hashes_list_),
  offsetof(::org::xrpl::rpc::v1::GetLedgerResponseDefaultTypeInternal, transactions_list_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, validated_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, ledger_objects_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, skiplist_included_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, is_unlimited_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionHashList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionHashList, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadata, transaction_blob_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadata, metadata_blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadataList, transactions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerRequest)},
  { 11, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerResponse)},
  { 24, -1, sizeof(::org::xrpl::rpc::v1::TransactionHashList)},
  { 30, -1, sizeof(::org::xrpl::rpc::v1::TransactionAndMetadata)},
  { 37, -1, sizeof(::org::xrpl::rpc::v1::TransactionAndMetadataList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetLedgerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_GetLedgerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_TransactionHashList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_TransactionAndMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_TransactionAndMetadataList_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[] =
  "\n org/xrpl/rpc/v1/get_ledger.proto\022\017org."
  "xrpl.rpc.v1\032\034org/xrpl/rpc/v1/ledger.prot"
  "o\"\240\001\n\020GetLedgerRequest\0220\n\006ledger\030\001 \001(\0132 "
  ".org.xrpl.rpc.v1.LedgerSpecifier\022\024\n\014tran"
  "sactions\030\002 \001(\010\022\016\n\006expand\030\003 \001(\010\022\023\n\013get_ob"
  "jects\030\004 \001(\010\022\021\n\tclient_ip\030\005 \001(\t\022\014\n\004user\030\006"
  " \001(\t\"\300\002\n\021GetLedgerResponse\022\025\n\rledger_hea"
  "der\030\001 \001(\014\022;\n\013hashes_list\030\002 \001(\0132$.org.xrp"
  "l.rpc.v1.TransactionHashListH\000\022H\n\021transa"
  "ctions_list\030\003 \001(\0132+.org.xrpl.rpc.v1.Tran"
  "sactionAndMetadataListH\000\022\021\n\tvalidated\030\004 "
  "\001(\010\0229\n\016ledger_objects\030\005 \001(\0132!.org.xrpl.r"
  "pc.v1.RawLedgerObjects\022\031\n\021skiplist_inclu"
  "ded\030\006 \001(\010\022\024\n\014is_unlimited\030\007 \001(\010B\016\n\014trans"
  "actions\"%\n\023TransactionHashList\022\016\n\006hashes"
  "\030\001 \003(\014\"I\n\026TransactionAndMetadata\022\030\n\020tran"
  "saction_blob\030\001 \001(\014\022\025\n\rmetadata_blob\030\002 \001("
  "\014\"[\n\032TransactionAndMetadataList\022=\n\014trans"
  "actions\030\001 \003(\0132\'.org.xrpl.rpc.v1.Transact"
  "ionAndMetadataB\023\n\017org.xrpl.rpc.v1P\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_sccs[5] = {
  &scc_info_GetLedgerRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,
  &scc_info_GetLedgerResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,
  &scc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,
  &scc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,
  &scc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto, "org/xrpl/rpc/v1/get_ledger.proto", 803,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto, 5, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

void GetLedgerRequest::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetLedgerRequest_default_instance_._instance.get_mutable()->ledger_ = const_cast< ::org::xrpl::rpc::v1::LedgerSpecifier*>(
      ::org::xrpl::rpc::v1::LedgerSpecifier::internal_default_instance());
}
class GetLedgerRequest::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetLedgerRequest* msg);
};

const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerRequest::HasBitSetters::ledger(const GetLedgerRequest* msg) {
  return *msg->ledger_;
}
void GetLedgerRequest::clear_ledger() {
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgerRequest::kLedgerFieldNumber;
const int GetLedgerRequest::kTransactionsFieldNumber;
const int GetLedgerRequest::kExpandFieldNumber;
const int GetLedgerRequest::kGetObjectsFieldNumber;
const int GetLedgerRequest::kClientIpFieldNumber;
const int GetLedgerRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgerRequest::GetLedgerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetLedgerRequest)
}
GetLedgerRequest::GetLedgerRequest(const GetLedgerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_ledger()) {
    ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from.ledger_);
  } else {
    ledger_ = nullptr;
  }
  ::memcpy(&transactions_, &from.transactions_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_objects_) -
    reinterpret_cast<char*>(&transactions_)) + sizeof(get_objects_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerRequest)
}

void GetLedgerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLedgerRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ledger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_objects_) -
      reinterpret_cast<char*>(&ledger_)) + sizeof(get_objects_));
}

GetLedgerRequest::~GetLedgerRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerRequest)
  SharedDtor();
}

void GetLedgerRequest::SharedDtor() {
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ledger_;
}

void GetLedgerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLedgerRequest& GetLedgerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLedgerRequest_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  return *internal_default_instance();
}


void GetLedgerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ledger_ != nullptr) {
    delete ledger_;
  }
  ledger_ = nullptr;
  ::memset(&transactions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_objects_) -
      reinterpret_cast<char*>(&transactions_)) + sizeof(get_objects_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLedgerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ledger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool expand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool get_objects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          get_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_ip(), ptr, ctx, "org.xrpl.rpc.v1.GetLedgerRequest.client_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_user(), ptr, ctx, "org.xrpl.rpc.v1.GetLedgerRequest.user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLedgerRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetLedgerRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool transactions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transactions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool expand = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool get_objects = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), static_cast<int>(this->client_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetLedgerRequest.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "org.xrpl.rpc.v1.GetLedgerRequest.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetLedgerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetLedgerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLedgerRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
  if (this->has_ledger()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ledger(this), output);
  }

  // bool transactions = 2;
  if (this->transactions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->transactions(), output);
  }

  // bool expand = 3;
  if (this->expand() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->expand(), output);
  }

  // bool get_objects = 4;
  if (this->get_objects() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->get_objects(), output);
  }

  // string client_ip = 5;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerRequest.client_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_ip(), output);
  }

  // string user = 6;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerRequest.user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetLedgerRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLedgerRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
  if (this->has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ledger(this), target);
  }

  // bool transactions = 2;
  if (this->transactions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->transactions(), target);
  }

  // bool expand = 3;
  if (this->expand() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->expand(), target);
  }

  // bool get_objects = 4;
  if (this->get_objects() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->get_objects(), target);
  }

  // string client_ip = 5;
  if (this->client_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), static_cast<int>(this->client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerRequest.client_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->client_ip(), target);
  }

  // string user = 6;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerRequest.user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerRequest)
  return target;
}

size_t GetLedgerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_ip = 5;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // string user = 6;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->user());
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
  if (this->has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_);
  }

  // bool transactions = 2;
  if (this->transactions() != 0) {
    total_size += 1 + 1;
  }

  // bool expand = 3;
  if (this->expand() != 0) {
    total_size += 1 + 1;
  }

  // bool get_objects = 4;
  if (this->get_objects() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLedgerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLedgerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLedgerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetLedgerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetLedgerRequest)
    MergeFrom(*source);
  }
}

void GetLedgerRequest::MergeFrom(const GetLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_ip().size() > 0) {

    client_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_ledger()) {
    mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(from.ledger());
  }
  if (from.transactions() != 0) {
    set_transactions(from.transactions());
  }
  if (from.expand() != 0) {
    set_expand(from.expand());
  }
  if (from.get_objects() != 0) {
    set_get_objects(from.get_objects());
  }
}

void GetLedgerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgerRequest::CopyFrom(const GetLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerRequest::IsInitialized() const {
  return true;
}

void GetLedgerRequest::Swap(GetLedgerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgerRequest::InternalSwap(GetLedgerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_ip_.Swap(&other->client_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ledger_, other->ledger_);
  swap(transactions_, other->transactions_);
  swap(expand_, other->expand_);
  swap(get_objects_, other->get_objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLedgerResponse::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_GetLedgerResponse_default_instance_.hashes_list_ = const_cast< ::org::xrpl::rpc::v1::TransactionHashList*>(
      ::org::xrpl::rpc::v1::TransactionHashList::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetLedgerResponse_default_instance_.transactions_list_ = const_cast< ::org::xrpl::rpc::v1::TransactionAndMetadataList*>(
      ::org::xrpl::rpc::v1::TransactionAndMetadataList::internal_default_instance());
  ::org::xrpl::rpc::v1::_GetLedgerResponse_default_instance_._instance.get_mutable()->ledger_objects_ = const_cast< ::org::xrpl::rpc::v1::RawLedgerObjects*>(
      ::org::xrpl::rpc::v1::RawLedgerObjects::internal_default_instance());
}
class GetLedgerResponse::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::TransactionHashList& hashes_list(const GetLedgerResponse* msg);
  static const ::org::xrpl::rpc::v1::TransactionAndMetadataList& transactions_list(const GetLedgerResponse* msg);
  static const ::org::xrpl::rpc::v1::RawLedgerObjects& ledger_objects(const GetLedgerResponse* msg);
};

const ::org::xrpl::rpc::v1::TransactionHashList&
GetLedgerResponse::HasBitSetters::hashes_list(const GetLedgerResponse* msg) {
  return *msg->transactions_.hashes_list_;
}
const ::org::xrpl::rpc::v1::TransactionAndMetadataList&
GetLedgerResponse::HasBitSetters::transactions_list(const GetLedgerResponse* msg) {
  return *msg->transactions_.transactions_list_;
}
const ::org::xrpl::rpc::v1::RawLedgerObjects&
GetLedgerResponse::HasBitSetters::ledger_objects(const GetLedgerResponse* msg) {
  return *msg->ledger_objects_;
}
void GetLedgerResponse::set_allocated_hashes_list(::org::xrpl::rpc::v1::TransactionHashList* hashes_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transactions();
  if (hashes_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hashes_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hashes_list, submessage_arena);
    }
    set_has_hashes_list();
    transactions_.hashes_list_ = hashes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerResponse.hashes_list)
}
void GetLedgerResponse::set_allocated_transactions_list(::org::xrpl::rpc::v1::TransactionAndMetadataList* transactions_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transactions();
  if (transactions_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transactions_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactions_list, submessage_arena);
    }
    set_has_transactions_list();
    transactions_.transactions_list_ = transactions_list;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerResponse.transactions_list)
}
void GetLedgerResponse::clear_ledger_objects() {
  if (GetArenaNoVirtual() == nullptr && ledger_objects_ != nullptr) {
    delete ledger_objects_;
  }
  ledger_objects_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgerResponse::kLedgerHeaderFieldNumber;
const int GetLedgerResponse::kHashesListFieldNumber;
const int GetLedgerResponse::kTransactionsListFieldNumber;
const int GetLedgerResponse::kValidatedFieldNumber;
const int GetLedgerResponse::kLedgerObjectsFieldNumber;
const int GetLedgerResponse::kSkiplistIncludedFieldNumber;
const int GetLedgerResponse::kIsUnlimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgerResponse::GetLedgerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.GetLedgerResponse)
}
GetLedgerResponse::GetLedgerResponse(const GetLedgerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ledger_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ledger_header().size() > 0) {
    ledger_header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ledger_header_);
  }
  if (from.has_ledger_objects()) {
    ledger_objects_ = new ::org::xrpl::rpc::v1::RawLedgerObjects(*from.ledger_objects_);
  } else {
    ledger_objects_ = nullptr;
  }
  ::memcpy(&validated_, &from.validated_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_unlimited_) -
    reinterpret_cast<char*>(&validated_)) + sizeof(is_unlimited_));
  clear_has_transactions();
  switch (from.transactions_case()) {
    case kHashesList: {
      mutable_hashes_list()->::org::xrpl::rpc::v1::TransactionHashList::MergeFrom(from.hashes_list());
      break;
    }
    case kTransactionsList: {
      mutable_transactions_list()->::org::xrpl::rpc::v1::TransactionAndMetadataList::MergeFrom(from.transactions_list());
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerResponse)
}

void GetLedgerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLedgerResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  ledger_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ledger_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unlimited_) -
      reinterpret_cast<char*>(&ledger_objects_)) + sizeof(is_unlimited_));
  clear_has_transactions();
}

GetLedgerResponse::~GetLedgerResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerResponse)
  SharedDtor();
}

void GetLedgerResponse::SharedDtor() {
  ledger_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ledger_objects_;
  if (has_transactions()) {
    clear_transactions();
  }
}

void GetLedgerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLedgerResponse& GetLedgerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLedgerResponse_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  return *internal_default_instance();
}


void GetLedgerResponse::clear_transactions() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.GetLedgerResponse)
  switch (transactions_case()) {
    case kHashesList: {
      delete transactions_.hashes_list_;
      break;
    }
    case kTransactionsList: {
      delete transactions_.transactions_list_;
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTIONS_NOT_SET;
}


void GetLedgerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ledger_header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ledger_objects_ != nullptr) {
    delete ledger_objects_;
  }
  ledger_objects_ = nullptr;
  ::memset(&validated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unlimited_) -
      reinterpret_cast<char*>(&validated_)) + sizeof(is_unlimited_));
  clear_transactions();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLedgerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ledger_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ledger_header(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_hashes_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_transactions_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool validated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_ledger_objects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skiplist_included = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          skiplist_included_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_unlimited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_unlimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLedgerResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.GetLedgerResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes ledger_header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ledger_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hashes_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transactions_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool validated = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool skiplist_included = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skiplist_included_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_unlimited = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unlimited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.GetLedgerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.GetLedgerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLedgerResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.GetLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ledger_header = 1;
  if (this->ledger_header().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ledger_header(), output);
  }

  // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
  if (has_hashes_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::hashes_list(this), output);
  }

  // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
  if (has_transactions_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::transactions_list(this), output);
  }

  // bool validated = 4;
  if (this->validated() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->validated(), output);
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
  if (this->has_ledger_objects()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ledger_objects(this), output);
  }

  // bool skiplist_included = 6;
  if (this->skiplist_included() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->skiplist_included(), output);
  }

  // bool is_unlimited = 7;
  if (this->is_unlimited() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_unlimited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.GetLedgerResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLedgerResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ledger_header = 1;
  if (this->ledger_header().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->ledger_header(), target);
  }

  // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
  if (has_hashes_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::hashes_list(this), target);
  }

  // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
  if (has_transactions_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::transactions_list(this), target);
  }

  // bool validated = 4;
  if (this->validated() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->validated(), target);
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
  if (this->has_ledger_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ledger_objects(this), target);
  }

  // bool skiplist_included = 6;
  if (this->skiplist_included() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->skiplist_included(), target);
  }

  // bool is_unlimited = 7;
  if (this->is_unlimited() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_unlimited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerResponse)
  return target;
}

size_t GetLedgerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ledger_header = 1;
  if (this->ledger_header().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ledger_header());
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
  if (this->has_ledger_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ledger_objects_);
  }

  // bool validated = 4;
  if (this->validated() != 0) {
    total_size += 1 + 1;
  }

  // bool skiplist_included = 6;
  if (this->skiplist_included() != 0) {
    total_size += 1 + 1;
  }

  // bool is_unlimited = 7;
  if (this->is_unlimited() != 0) {
    total_size += 1 + 1;
  }

  switch (transactions_case()) {
    // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
    case kHashesList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transactions_.hashes_list_);
      break;
    }
    // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
    case kTransactionsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transactions_.transactions_list_);
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLedgerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.GetLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLedgerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLedgerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.GetLedgerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.GetLedgerResponse)
    MergeFrom(*source);
  }
}

void GetLedgerResponse::MergeFrom(const GetLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ledger_header().size() > 0) {

    ledger_header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ledger_header_);
  }
  if (from.has_ledger_objects()) {
    mutable_ledger_objects()->::org::xrpl::rpc::v1::RawLedgerObjects::MergeFrom(from.ledger_objects());
  }
  if (from.validated() != 0) {
    set_validated(from.validated());
  }
  if (from.skiplist_included() != 0) {
    set_skiplist_included(from.skiplist_included());
  }
  if (from.is_unlimited() != 0) {
    set_is_unlimited(from.is_unlimited());
  }
  switch (from.transactions_case()) {
    case kHashesList: {
      mutable_hashes_list()->::org::xrpl::rpc::v1::TransactionHashList::MergeFrom(from.hashes_list());
      break;
    }
    case kTransactionsList: {
      mutable_transactions_list()->::org::xrpl::rpc::v1::TransactionAndMetadataList::MergeFrom(from.transactions_list());
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
}

void GetLedgerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.GetLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgerResponse::CopyFrom(const GetLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerResponse::IsInitialized() const {
  return true;
}

void GetLedgerResponse::Swap(GetLedgerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgerResponse::InternalSwap(GetLedgerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ledger_header_.Swap(&other->ledger_header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ledger_objects_, other->ledger_objects_);
  swap(validated_, other->validated_);
  swap(skiplist_included_, other->skiplist_included_);
  swap(is_unlimited_, other->is_unlimited_);
  swap(transactions_, other->transactions_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionHashList::InitAsDefaultInstance() {
}
class TransactionHashList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionHashList::kHashesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionHashList::TransactionHashList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.TransactionHashList)
}
TransactionHashList::TransactionHashList(const TransactionHashList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TransactionHashList)
}

void TransactionHashList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
}

TransactionHashList::~TransactionHashList() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TransactionHashList)
  SharedDtor();
}

void TransactionHashList::SharedDtor() {
}

void TransactionHashList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionHashList& TransactionHashList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionHashList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  return *internal_default_instance();
}


void TransactionHashList::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TransactionHashList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionHashList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_hashes(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionHashList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.TransactionHashList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes hashes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_hashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.TransactionHashList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.TransactionHashList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionHashList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.TransactionHashList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->hashes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.TransactionHashList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionHashList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TransactionHashList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->hashes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TransactionHashList)
  return target;
}

size_t TransactionHashList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TransactionHashList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->hashes_size());
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->hashes(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionHashList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.TransactionHashList)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionHashList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionHashList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.TransactionHashList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.TransactionHashList)
    MergeFrom(*source);
  }
}

void TransactionHashList::MergeFrom(const TransactionHashList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TransactionHashList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
}

void TransactionHashList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.TransactionHashList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionHashList::CopyFrom(const TransactionHashList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TransactionHashList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionHashList::IsInitialized() const {
  return true;
}

void TransactionHashList::Swap(TransactionHashList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionHashList::InternalSwap(TransactionHashList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hashes_.InternalSwap(CastToBase(&other->hashes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionHashList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionAndMetadata::InitAsDefaultInstance() {
}
class TransactionAndMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionAndMetadata::kTransactionBlobFieldNumber;
const int TransactionAndMetadata::kMetadataBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionAndMetadata::TransactionAndMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.TransactionAndMetadata)
}
TransactionAndMetadata::TransactionAndMetadata(const TransactionAndMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transaction_blob().size() > 0) {
    transaction_blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_blob_);
  }
  metadata_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.metadata_blob().size() > 0) {
    metadata_blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_blob_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TransactionAndMetadata)
}

void TransactionAndMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  transaction_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransactionAndMetadata::~TransactionAndMetadata() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TransactionAndMetadata)
  SharedDtor();
}

void TransactionAndMetadata::SharedDtor() {
  transaction_blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionAndMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionAndMetadata& TransactionAndMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionAndMetadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  return *internal_default_instance();
}


void TransactionAndMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionAndMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transaction_blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transaction_blob(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes metadata_blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata_blob(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionAndMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes transaction_blob = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes metadata_blob = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.TransactionAndMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.TransactionAndMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionAndMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_blob = 1;
  if (this->transaction_blob().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction_blob(), output);
  }

  // bytes metadata_blob = 2;
  if (this->metadata_blob().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->metadata_blob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.TransactionAndMetadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionAndMetadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_blob = 1;
  if (this->transaction_blob().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction_blob(), target);
  }

  // bytes metadata_blob = 2;
  if (this->metadata_blob().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->metadata_blob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TransactionAndMetadata)
  return target;
}

size_t TransactionAndMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction_blob = 1;
  if (this->transaction_blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->transaction_blob());
  }

  // bytes metadata_blob = 2;
  if (this->metadata_blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->metadata_blob());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionAndMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionAndMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionAndMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.TransactionAndMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.TransactionAndMetadata)
    MergeFrom(*source);
  }
}

void TransactionAndMetadata::MergeFrom(const TransactionAndMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_blob().size() > 0) {

    transaction_blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_blob_);
  }
  if (from.metadata_blob().size() > 0) {

    metadata_blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_blob_);
  }
}

void TransactionAndMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionAndMetadata::CopyFrom(const TransactionAndMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAndMetadata::IsInitialized() const {
  return true;
}

void TransactionAndMetadata::Swap(TransactionAndMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionAndMetadata::InternalSwap(TransactionAndMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_blob_.Swap(&other->transaction_blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_blob_.Swap(&other->metadata_blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionAndMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionAndMetadataList::InitAsDefaultInstance() {
}
class TransactionAndMetadataList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionAndMetadataList::kTransactionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionAndMetadataList::TransactionAndMetadataList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.TransactionAndMetadataList)
}
TransactionAndMetadataList::TransactionAndMetadataList(const TransactionAndMetadataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TransactionAndMetadataList)
}

void TransactionAndMetadataList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
}

TransactionAndMetadataList::~TransactionAndMetadataList() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TransactionAndMetadataList)
  SharedDtor();
}

void TransactionAndMetadataList::SharedDtor() {
}

void TransactionAndMetadataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionAndMetadataList& TransactionAndMetadataList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionAndMetadataList_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto.base);
  return *internal_default_instance();
}


void TransactionAndMetadataList::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionAndMetadataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionAndMetadataList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.TransactionAndMetadataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.TransactionAndMetadataList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionAndMetadataList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->transactions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.TransactionAndMetadataList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionAndMetadataList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transactions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TransactionAndMetadataList)
  return target;
}

size_t TransactionAndMetadataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionAndMetadataList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionAndMetadataList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionAndMetadataList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.TransactionAndMetadataList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.TransactionAndMetadataList)
    MergeFrom(*source);
  }
}

void TransactionAndMetadataList::MergeFrom(const TransactionAndMetadataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void TransactionAndMetadataList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionAndMetadataList::CopyFrom(const TransactionAndMetadataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAndMetadataList::IsInitialized() const {
  return true;
}

void TransactionAndMetadataList::Swap(TransactionAndMetadataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionAndMetadataList::InternalSwap(TransactionAndMetadataList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionAndMetadataList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerRequest* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetLedgerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerResponse* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::GetLedgerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TransactionHashList* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionHashList >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::TransactionHashList >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TransactionAndMetadata* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionAndMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::TransactionAndMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TransactionAndMetadataList* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionAndMetadataList >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::TransactionAndMetadataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
