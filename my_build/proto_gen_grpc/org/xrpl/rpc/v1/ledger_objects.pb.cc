// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/ledger_objects.proto

#include "org/xrpl/rpc/v1/ledger_objects.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Authorize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Balance_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseFee_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BookDirectory_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BookNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseTime_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestinationNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DisabledValidator_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Domain_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmailHash_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinishAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hash_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HighLimit_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HighNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HighQualityIn_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HighQualityOut_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Index_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexNext_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexPrevious_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LowLimit_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LowNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LowQualityIn_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LowQualityOut_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Owner_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OwnerCount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceFeeUnits_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegularKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReserveBase_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReserveIncrement_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RootIndex_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMax_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleDelay_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignerEntry_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignerListID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignerQuorum_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TakerGets_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TakerGetsCurreny_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TakerGetsIssuer_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TakerPays_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TakerPaysCurrency_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TakerPaysIssuer_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TickSize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TicketCount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TicketSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferRate_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorToDisable_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorToReEnable_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto;
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
class LedgerObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LedgerObject> _instance;
  const ::org::xrpl::rpc::v1::AccountRoot* account_root_;
  const ::org::xrpl::rpc::v1::Amendments* amendments_;
  const ::org::xrpl::rpc::v1::Check* check_;
  const ::org::xrpl::rpc::v1::DepositPreauthObject* deposit_preauth_;
  const ::org::xrpl::rpc::v1::DirectoryNode* directory_node_;
  const ::org::xrpl::rpc::v1::Escrow* escrow_;
  const ::org::xrpl::rpc::v1::FeeSettings* fee_settings_;
  const ::org::xrpl::rpc::v1::LedgerHashes* ledger_hashes_;
  const ::org::xrpl::rpc::v1::Offer* offer_;
  const ::org::xrpl::rpc::v1::PayChannel* pay_channel_;
  const ::org::xrpl::rpc::v1::RippleState* ripple_state_;
  const ::org::xrpl::rpc::v1::SignerList* signer_list_;
  const ::org::xrpl::rpc::v1::NegativeUNL* negative_unl_;
  const ::org::xrpl::rpc::v1::TicketObject* ticket_;
} _LedgerObject_default_instance_;
class AccountRootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountRoot> _instance;
} _AccountRoot_default_instance_;
class Amendments_AmendmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Amendments_Amendment> _instance;
} _Amendments_Amendment_default_instance_;
class Amendments_MajorityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Amendments_Majority> _instance;
} _Amendments_Majority_default_instance_;
class AmendmentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Amendments> _instance;
} _Amendments_default_instance_;
class CheckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Check> _instance;
} _Check_default_instance_;
class DepositPreauthObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositPreauthObject> _instance;
} _DepositPreauthObject_default_instance_;
class DirectoryNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectoryNode> _instance;
} _DirectoryNode_default_instance_;
class EscrowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Escrow> _instance;
} _Escrow_default_instance_;
class FeeSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeSettings> _instance;
} _FeeSettings_default_instance_;
class LedgerHashesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LedgerHashes> _instance;
} _LedgerHashes_default_instance_;
class OfferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Offer> _instance;
} _Offer_default_instance_;
class PayChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayChannel> _instance;
} _PayChannel_default_instance_;
class RippleStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RippleState> _instance;
} _RippleState_default_instance_;
class SignerListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignerList> _instance;
} _SignerList_default_instance_;
class TicketObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TicketObject> _instance;
} _TicketObject_default_instance_;
class NegativeUNLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NegativeUNL> _instance;
} _NegativeUNL_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static void InitDefaultsscc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_AccountRoot_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::AccountRoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::AccountRoot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, InitDefaultsscc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Balance_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerCount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_AccountTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Domain_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_EmailHash_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_MessageKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_RegularKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TickSize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TransferRate_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TicketCount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Amendments_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Amendments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Amendments::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Amendments_Amendment_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Amendments_Amendment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Amendments_Amendment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {}};

static void InitDefaultsscc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Amendments_Majority_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Amendments_Majority();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Amendments_Majority::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_CloseTime_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Check_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Check();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Check::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsscc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SendMax_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_InvoiceID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SourceTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::DepositPreauthObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::DepositPreauthObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Authorize_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_DirectoryNode_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::DirectoryNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::DirectoryNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_RootIndex_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Index_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_IndexNext_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_IndexPrevious_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Owner_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerPaysCurrency_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerPaysIssuer_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerGetsCurreny_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerGetsIssuer_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Escrow_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Escrow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Escrow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsscc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Condition_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_CancelAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_FinishAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SourceTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_FeeSettings_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::FeeSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::FeeSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_BaseFee_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_ReferenceFeeUnits_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_ReserveBase_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_ReserveIncrement_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_LedgerHashes_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::LedgerHashes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::LedgerHashes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_LastLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Hash_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_LedgerObject_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::LedgerObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::LedgerObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsscc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
      &scc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,}};

static void InitDefaultsscc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_NegativeUNL_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::NegativeUNL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::NegativeUNL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_DisabledValidator_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_ValidatorToDisable_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_ValidatorToReEnable_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_Offer_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::Offer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::Offer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsscc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Sequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerPays_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TakerGets_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_BookDirectory_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_BookNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_PayChannel_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::PayChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::PayChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, InitDefaultsscc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Destination_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Amount_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Balance_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PublicKey_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SettleDelay_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Expiration_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_CancelAfter_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SourceTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationTag_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_DestinationNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_RippleState_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::RippleState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::RippleState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsscc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Balance_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_LowLimit_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_HighLimit_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_LowNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_HighNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_LowQualityIn_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_LowQualityOut_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_HighQualityIn_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_HighQualityOut_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_SignerList_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::SignerList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::SignerList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SignerEntry_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SignerListID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_SignerQuorum_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::xrpl::rpc::v1::_TicketObject_default_instance_;
    new (ptr) ::org::xrpl::rpc::v1::TicketObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::xrpl::rpc::v1::TicketObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto}, {
      &scc_info_Flags_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_Account_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_OwnerNode_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionID_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_PreviousTransactionLedgerSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,
      &scc_info_TicketSequence_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerObject, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerObject, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, account_root_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, amendments_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, check_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, deposit_preauth_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, directory_node_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, escrow_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, fee_settings_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, ledger_hashes_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, offer_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, pay_channel_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, ripple_state_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, signer_list_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, negative_unl_),
  offsetof(::org::xrpl::rpc::v1::LedgerObjectDefaultTypeInternal, ticket_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerObject, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, balance_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, owner_count_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, previous_transaction_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, account_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, domain_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, email_hash_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, message_key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, regular_key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, tick_size_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, transfer_rate_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::AccountRoot, ticket_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments_Amendment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments_Amendment, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments_Majority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments_Majority, amendment_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments_Majority, close_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments, amendments_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments, majorities_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Amendments, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, owner_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, previous_transaction_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, send_max_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, destination_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, destination_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, expiration_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, invoice_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Check, source_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauthObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauthObject, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauthObject, authorize_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauthObject, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauthObject, owner_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauthObject, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DepositPreauthObject, previous_transaction_ledger_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, root_index_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, indexes_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, index_next_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, index_previous_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, owner_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, taker_pays_currency_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, taker_pays_issuer_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, taker_gets_currency_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::DirectoryNode, taker_gets_issuer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, condition_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, cancel_after_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, finish_after_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, source_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, destination_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, owner_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, destination_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Escrow, previous_transaction_ledger_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeSettings, base_fee_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeSettings, reference_fee_units_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeSettings, reserve_base_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeSettings, reserve_increment_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::FeeSettings, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerHashes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerHashes, last_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerHashes, hashes_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerHashes, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, taker_pays_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, taker_gets_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, book_directory_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, book_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, owner_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, expiration_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::Offer, previous_transaction_ledger_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, destination_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, amount_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, balance_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, public_key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, settle_delay_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, owner_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, previous_transaction_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, expiration_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, cancel_after_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, source_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, destination_tag_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::PayChannel, destination_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, balance_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, low_limit_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, high_limit_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, low_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, high_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, low_quality_in_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, low_quality_out_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, high_quality_in_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, high_quality_out_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RippleState, previous_transaction_ledger_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, previous_transaction_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, owner_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, signer_entries_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, signer_list_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::SignerList, signer_quorum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketObject, flags_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketObject, account_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketObject, owner_node_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketObject, previous_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketObject, previous_transaction_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TicketObject, ticket_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::NegativeUNL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::NegativeUNL, disabled_validators_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::NegativeUNL, validator_to_disable_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::NegativeUNL, validator_to_re_enable_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::NegativeUNL, flags_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::xrpl::rpc::v1::LedgerObject)},
  { 20, -1, sizeof(::org::xrpl::rpc::v1::AccountRoot)},
  { 40, -1, sizeof(::org::xrpl::rpc::v1::Amendments_Amendment)},
  { 46, -1, sizeof(::org::xrpl::rpc::v1::Amendments_Majority)},
  { 53, -1, sizeof(::org::xrpl::rpc::v1::Amendments)},
  { 61, -1, sizeof(::org::xrpl::rpc::v1::Check)},
  { 79, -1, sizeof(::org::xrpl::rpc::v1::DepositPreauthObject)},
  { 90, -1, sizeof(::org::xrpl::rpc::v1::DirectoryNode)},
  { 105, -1, sizeof(::org::xrpl::rpc::v1::Escrow)},
  { 123, -1, sizeof(::org::xrpl::rpc::v1::FeeSettings)},
  { 133, -1, sizeof(::org::xrpl::rpc::v1::LedgerHashes)},
  { 141, -1, sizeof(::org::xrpl::rpc::v1::Offer)},
  { 157, -1, sizeof(::org::xrpl::rpc::v1::PayChannel)},
  { 177, -1, sizeof(::org::xrpl::rpc::v1::RippleState)},
  { 194, -1, sizeof(::org::xrpl::rpc::v1::SignerList)},
  { 206, -1, sizeof(::org::xrpl::rpc::v1::TicketObject)},
  { 217, -1, sizeof(::org::xrpl::rpc::v1::NegativeUNL)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_LedgerObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_AccountRoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Amendments_Amendment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Amendments_Majority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Amendments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Check_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_DirectoryNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Escrow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_FeeSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_LedgerHashes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_Offer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_PayChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_RippleState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_SignerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_TicketObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::xrpl::rpc::v1::_NegativeUNL_default_instance_),
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto[] =
  "\n$org/xrpl/rpc/v1/ledger_objects.proto\022\017"
  "org.xrpl.rpc.v1\032\034org/xrpl/rpc/v1/common."
  "proto\"\355\005\n\014LedgerObject\0224\n\014account_root\030\001"
  " \001(\0132\034.org.xrpl.rpc.v1.AccountRootH\000\0221\n\n"
  "amendments\030\002 \001(\0132\033.org.xrpl.rpc.v1.Amend"
  "mentsH\000\022\'\n\005check\030\003 \001(\0132\026.org.xrpl.rpc.v1"
  ".CheckH\000\022@\n\017deposit_preauth\030\004 \001(\0132%.org."
  "xrpl.rpc.v1.DepositPreauthObjectH\000\0228\n\016di"
  "rectory_node\030\005 \001(\0132\036.org.xrpl.rpc.v1.Dir"
  "ectoryNodeH\000\022)\n\006escrow\030\006 \001(\0132\027.org.xrpl."
  "rpc.v1.EscrowH\000\0224\n\014fee_settings\030\007 \001(\0132\034."
  "org.xrpl.rpc.v1.FeeSettingsH\000\0226\n\rledger_"
  "hashes\030\010 \001(\0132\035.org.xrpl.rpc.v1.LedgerHas"
  "hesH\000\022\'\n\005offer\030\t \001(\0132\026.org.xrpl.rpc.v1.O"
  "fferH\000\0222\n\013pay_channel\030\n \001(\0132\033.org.xrpl.r"
  "pc.v1.PayChannelH\000\0224\n\014ripple_state\030\013 \001(\013"
  "2\034.org.xrpl.rpc.v1.RippleStateH\000\0222\n\013sign"
  "er_list\030\014 \001(\0132\033.org.xrpl.rpc.v1.SignerLi"
  "stH\000\0224\n\014negative_unl\030\r \001(\0132\034.org.xrpl.rp"
  "c.v1.NegativeUNLH\000\022/\n\006ticket\030\016 \001(\0132\035.org"
  ".xrpl.rpc.v1.TicketObjectH\000B\010\n\006object\"\260\006"
  "\n\013AccountRoot\022)\n\007account\030\001 \001(\0132\030.org.xrp"
  "l.rpc.v1.Account\022)\n\007balance\030\002 \001(\0132\030.org."
  "xrpl.rpc.v1.Balance\022+\n\010sequence\030\003 \001(\0132\031."
  "org.xrpl.rpc.v1.Sequence\022%\n\005flags\030\004 \001(\0132"
  "\026.org.xrpl.rpc.v1.Flags\0220\n\013owner_count\030\005"
  " \001(\0132\033.org.xrpl.rpc.v1.OwnerCount\022G\n\027pre"
  "vious_transaction_id\030\006 \001(\0132&.org.xrpl.rp"
  "c.v1.PreviousTransactionID\022`\n$previous_t"
  "ransaction_ledger_sequence\030\007 \001(\01322.org.x"
  "rpl.rpc.v1.PreviousTransactionLedgerSequ"
  "ence\022E\n\026account_transaction_id\030\010 \001(\0132%.o"
  "rg.xrpl.rpc.v1.AccountTransactionID\022\'\n\006d"
  "omain\030\t \001(\0132\027.org.xrpl.rpc.v1.Domain\022.\n\n"
  "email_hash\030\n \001(\0132\032.org.xrpl.rpc.v1.Email"
  "Hash\0220\n\013message_key\030\013 \001(\0132\033.org.xrpl.rpc"
  ".v1.MessageKey\0220\n\013regular_key\030\014 \001(\0132\033.or"
  "g.xrpl.rpc.v1.RegularKey\022,\n\ttick_size\030\r "
  "\001(\0132\031.org.xrpl.rpc.v1.TickSize\0224\n\rtransf"
  "er_rate\030\016 \001(\0132\035.org.xrpl.rpc.v1.Transfer"
  "Rate\0222\n\014ticket_count\030\017 \001(\0132\034.org.xrpl.rp"
  "c.v1.TicketCount\"\272\002\n\nAmendments\0229\n\namend"
  "ments\030\001 \003(\0132%.org.xrpl.rpc.v1.Amendments"
  ".Amendment\0228\n\nmajorities\030\002 \003(\0132$.org.xrp"
  "l.rpc.v1.Amendments.Majority\022%\n\005flags\030\003 "
  "\001(\0132\026.org.xrpl.rpc.v1.Flags\032\032\n\tAmendment"
  "\022\r\n\005value\030\001 \001(\014\032t\n\010Majority\0228\n\tamendment"
  "\030\001 \001(\0132%.org.xrpl.rpc.v1.Amendments.Amen"
  "dment\022.\n\nclose_time\030\002 \001(\0132\032.org.xrpl.rpc"
  ".v1.CloseTime\"\307\005\n\005Check\022)\n\007account\030\001 \001(\013"
  "2\030.org.xrpl.rpc.v1.Account\0221\n\013destinatio"
  "n\030\002 \001(\0132\034.org.xrpl.rpc.v1.Destination\022%\n"
  "\005flags\030\003 \001(\0132\026.org.xrpl.rpc.v1.Flags\022.\n\n"
  "owner_node\030\004 \001(\0132\032.org.xrpl.rpc.v1.Owner"
  "Node\022G\n\027previous_transaction_id\030\005 \001(\0132&."
  "org.xrpl.rpc.v1.PreviousTransactionID\022`\n"
  "$previous_transaction_ledger_sequence\030\006 "
  "\001(\01322.org.xrpl.rpc.v1.PreviousTransactio"
  "nLedgerSequence\022*\n\010send_max\030\007 \001(\0132\030.org."
  "xrpl.rpc.v1.SendMax\022+\n\010sequence\030\010 \001(\0132\031."
  "org.xrpl.rpc.v1.Sequence\022:\n\020destination_"
  "node\030\t \001(\0132 .org.xrpl.rpc.v1.Destination"
  "Node\0228\n\017destination_tag\030\n \001(\0132\037.org.xrpl"
  ".rpc.v1.DestinationTag\022/\n\nexpiration\030\013 \001"
  "(\0132\033.org.xrpl.rpc.v1.Expiration\022.\n\ninvoi"
  "ce_id\030\014 \001(\0132\032.org.xrpl.rpc.v1.InvoiceID\022"
  ".\n\nsource_tag\030\r \001(\0132\032.org.xrpl.rpc.v1.So"
  "urceTag\"\362\002\n\024DepositPreauthObject\022)\n\007acco"
  "unt\030\001 \001(\0132\030.org.xrpl.rpc.v1.Account\022-\n\ta"
  "uthorize\030\002 \001(\0132\032.org.xrpl.rpc.v1.Authori"
  "ze\022%\n\005flags\030\003 \001(\0132\026.org.xrpl.rpc.v1.Flag"
  "s\022.\n\nowner_node\030\004 \001(\0132\032.org.xrpl.rpc.v1."
  "OwnerNode\022G\n\027previous_transaction_id\030\005 \001"
  "(\0132&.org.xrpl.rpc.v1.PreviousTransaction"
  "ID\022`\n$previous_transaction_ledger_sequen"
  "ce\030\006 \001(\01322.org.xrpl.rpc.v1.PreviousTrans"
  "actionLedgerSequence\"\231\004\n\rDirectoryNode\022%"
  "\n\005flags\030\001 \001(\0132\026.org.xrpl.rpc.v1.Flags\022.\n"
  "\nroot_index\030\002 \001(\0132\032.org.xrpl.rpc.v1.Root"
  "Index\022\'\n\007indexes\030\003 \003(\0132\026.org.xrpl.rpc.v1"
  ".Index\022.\n\nindex_next\030\004 \001(\0132\032.org.xrpl.rp"
  "c.v1.IndexNext\0226\n\016index_previous\030\005 \001(\0132\036"
  ".org.xrpl.rpc.v1.IndexPrevious\022%\n\005owner\030"
  "\006 \001(\0132\026.org.xrpl.rpc.v1.Owner\022\?\n\023taker_p"
  "ays_currency\030\007 \001(\0132\".org.xrpl.rpc.v1.Tak"
  "erPaysCurrency\022;\n\021taker_pays_issuer\030\010 \001("
  "\0132 .org.xrpl.rpc.v1.TakerPaysIssuer\022>\n\023t"
  "aker_gets_currency\030\t \001(\0132!.org.xrpl.rpc."
  "v1.TakerGetsCurreny\022;\n\021taker_gets_issuer"
  "\030\n \001(\0132 .org.xrpl.rpc.v1.TakerGetsIssuer"
  "\"\316\005\n\006Escrow\022)\n\007account\030\001 \001(\0132\030.org.xrpl."
  "rpc.v1.Account\0221\n\013destination\030\002 \001(\0132\034.or"
  "g.xrpl.rpc.v1.Destination\022\'\n\006amount\030\003 \001("
  "\0132\027.org.xrpl.rpc.v1.Amount\022-\n\tcondition\030"
  "\004 \001(\0132\032.org.xrpl.rpc.v1.Condition\0222\n\014can"
  "cel_after\030\005 \001(\0132\034.org.xrpl.rpc.v1.Cancel"
  "After\0222\n\014finish_after\030\006 \001(\0132\034.org.xrpl.r"
  "pc.v1.FinishAfter\022%\n\005flags\030\007 \001(\0132\026.org.x"
  "rpl.rpc.v1.Flags\022.\n\nsource_tag\030\010 \001(\0132\032.o"
  "rg.xrpl.rpc.v1.SourceTag\0228\n\017destination_"
  "tag\030\t \001(\0132\037.org.xrpl.rpc.v1.DestinationT"
  "ag\022.\n\nowner_node\030\n \001(\0132\032.org.xrpl.rpc.v1"
  ".OwnerNode\022:\n\020destination_node\030\013 \001(\0132 .o"
  "rg.xrpl.rpc.v1.DestinationNode\022G\n\027previo"
  "us_transaction_id\030\014 \001(\0132&.org.xrpl.rpc.v"
  "1.PreviousTransactionID\022`\n$previous_tran"
  "saction_ledger_sequence\030\r \001(\01322.org.xrpl"
  ".rpc.v1.PreviousTransactionLedgerSequenc"
  "e\"\223\002\n\013FeeSettings\022*\n\010base_fee\030\001 \001(\0132\030.or"
  "g.xrpl.rpc.v1.BaseFee\022\?\n\023reference_fee_u"
  "nits\030\002 \001(\0132\".org.xrpl.rpc.v1.ReferenceFe"
  "eUnits\0222\n\014reserve_base\030\003 \001(\0132\034.org.xrpl."
  "rpc.v1.ReserveBase\022<\n\021reserve_increment\030"
  "\004 \001(\0132!.org.xrpl.rpc.v1.ReserveIncrement"
  "\022%\n\005flags\030\005 \001(\0132\026.org.xrpl.rpc.v1.Flags\""
  "\237\001\n\014LedgerHashes\022A\n\024last_ledger_sequence"
  "\030\001 \001(\0132#.org.xrpl.rpc.v1.LastLedgerSeque"
  "nce\022%\n\006hashes\030\002 \003(\0132\025.org.xrpl.rpc.v1.Ha"
  "sh\022%\n\005flags\030\003 \001(\0132\026.org.xrpl.rpc.v1.Flag"
  "s\"\330\004\n\005Offer\022)\n\007account\030\001 \001(\0132\030.org.xrpl."
  "rpc.v1.Account\022+\n\010sequence\030\002 \001(\0132\031.org.x"
  "rpl.rpc.v1.Sequence\022%\n\005flags\030\003 \001(\0132\026.org"
  ".xrpl.rpc.v1.Flags\022.\n\ntaker_pays\030\004 \001(\0132\032"
  ".org.xrpl.rpc.v1.TakerPays\022.\n\ntaker_gets"
  "\030\005 \001(\0132\032.org.xrpl.rpc.v1.TakerGets\0226\n\016bo"
  "ok_directory\030\006 \001(\0132\036.org.xrpl.rpc.v1.Boo"
  "kDirectory\022,\n\tbook_node\030\007 \001(\0132\031.org.xrpl"
  ".rpc.v1.BookNode\022.\n\nowner_node\030\010 \001(\0132\032.o"
  "rg.xrpl.rpc.v1.OwnerNode\022/\n\nexpiration\030\t"
  " \001(\0132\033.org.xrpl.rpc.v1.Expiration\022G\n\027pre"
  "vious_transaction_id\030\n \001(\0132&.org.xrpl.rp"
  "c.v1.PreviousTransactionID\022`\n$previous_t"
  "ransaction_ledger_sequence\030\013 \001(\01322.org.x"
  "rpl.rpc.v1.PreviousTransactionLedgerSequ"
  "ence\"\257\006\n\nPayChannel\022)\n\007account\030\001 \001(\0132\030.o"
  "rg.xrpl.rpc.v1.Account\0221\n\013destination\030\002 "
  "\001(\0132\034.org.xrpl.rpc.v1.Destination\022\'\n\006amo"
  "unt\030\003 \001(\0132\027.org.xrpl.rpc.v1.Amount\022)\n\007ba"
  "lance\030\004 \001(\0132\030.org.xrpl.rpc.v1.Balance\022.\n"
  "\npublic_key\030\005 \001(\0132\032.org.xrpl.rpc.v1.Publ"
  "icKey\0222\n\014settle_delay\030\006 \001(\0132\034.org.xrpl.r"
  "pc.v1.SettleDelay\022.\n\nowner_node\030\007 \001(\0132\032."
  "org.xrpl.rpc.v1.OwnerNode\022G\n\027previous_tr"
  "ansaction_id\030\010 \001(\0132&.org.xrpl.rpc.v1.Pre"
  "viousTransactionID\022`\n$previous_transacti"
  "on_ledger_sequence\030\t \001(\01322.org.xrpl.rpc."
  "v1.PreviousTransactionLedgerSequence\022%\n\005"
  "flags\030\n \001(\0132\026.org.xrpl.rpc.v1.Flags\022/\n\ne"
  "xpiration\030\013 \001(\0132\033.org.xrpl.rpc.v1.Expira"
  "tion\0222\n\014cancel_after\030\014 \001(\0132\034.org.xrpl.rp"
  "c.v1.CancelAfter\022.\n\nsource_tag\030\r \001(\0132\032.o"
  "rg.xrpl.rpc.v1.SourceTag\0228\n\017destination_"
  "tag\030\016 \001(\0132\037.org.xrpl.rpc.v1.DestinationT"
  "ag\022:\n\020destination_node\030\017 \001(\0132 .org.xrpl."
  "rpc.v1.DestinationNode\"\246\005\n\013RippleState\022)"
  "\n\007balance\030\001 \001(\0132\030.org.xrpl.rpc.v1.Balanc"
  "e\022%\n\005flags\030\002 \001(\0132\026.org.xrpl.rpc.v1.Flags"
  "\022,\n\tlow_limit\030\003 \001(\0132\031.org.xrpl.rpc.v1.Lo"
  "wLimit\022.\n\nhigh_limit\030\004 \001(\0132\032.org.xrpl.rp"
  "c.v1.HighLimit\022*\n\010low_node\030\005 \001(\0132\030.org.x"
  "rpl.rpc.v1.LowNode\022,\n\thigh_node\030\006 \001(\0132\031."
  "org.xrpl.rpc.v1.HighNode\0225\n\016low_quality_"
  "in\030\007 \001(\0132\035.org.xrpl.rpc.v1.LowQualityIn\022"
  "7\n\017low_quality_out\030\010 \001(\0132\036.org.xrpl.rpc."
  "v1.LowQualityOut\0227\n\017high_quality_in\030\t \001("
  "\0132\036.org.xrpl.rpc.v1.HighQualityIn\0229\n\020hig"
  "h_quality_out\030\n \001(\0132\037.org.xrpl.rpc.v1.Hi"
  "ghQualityOut\022G\n\027previous_transaction_id\030"
  "\013 \001(\0132&.org.xrpl.rpc.v1.PreviousTransact"
  "ionID\022`\n$previous_transaction_ledger_seq"
  "uence\030\014 \001(\01322.org.xrpl.rpc.v1.PreviousTr"
  "ansactionLedgerSequence\"\261\003\n\nSignerList\022%"
  "\n\005flags\030\001 \001(\0132\026.org.xrpl.rpc.v1.Flags\022G\n"
  "\027previous_transaction_id\030\002 \001(\0132&.org.xrp"
  "l.rpc.v1.PreviousTransactionID\022`\n$previo"
  "us_transaction_ledger_sequence\030\003 \001(\01322.o"
  "rg.xrpl.rpc.v1.PreviousTransactionLedger"
  "Sequence\022.\n\nowner_node\030\004 \001(\0132\032.org.xrpl."
  "rpc.v1.OwnerNode\0224\n\016signer_entries\030\005 \003(\013"
  "2\034.org.xrpl.rpc.v1.SignerEntry\0225\n\016signer"
  "_list_id\030\006 \001(\0132\035.org.xrpl.rpc.v1.SignerL"
  "istID\0224\n\rsigner_quorum\030\007 \001(\0132\035.org.xrpl."
  "rpc.v1.SignerQuorum\"\365\002\n\014TicketObject\022%\n\005"
  "flags\030\001 \001(\0132\026.org.xrpl.rpc.v1.Flags\022)\n\007a"
  "ccount\030\002 \001(\0132\030.org.xrpl.rpc.v1.Account\022."
  "\n\nowner_node\030\003 \001(\0132\032.org.xrpl.rpc.v1.Own"
  "erNode\022G\n\027previous_transaction_id\030\004 \001(\0132"
  "&.org.xrpl.rpc.v1.PreviousTransactionID\022"
  "`\n$previous_transaction_ledger_sequence\030"
  "\005 \001(\01322.org.xrpl.rpc.v1.PreviousTransact"
  "ionLedgerSequence\0228\n\017ticket_sequence\030\006 \001"
  "(\0132\037.org.xrpl.rpc.v1.TicketSequence\"\376\001\n\013"
  "NegativeUNL\022\?\n\023disabled_validators\030\001 \003(\013"
  "2\".org.xrpl.rpc.v1.DisabledValidator\022A\n\024"
  "validator_to_disable\030\002 \001(\0132#.org.xrpl.rp"
  "c.v1.ValidatorToDisable\022D\n\026validator_to_"
  "re_enable\030\003 \001(\0132$.org.xrpl.rpc.v1.Valida"
  "torToReEnable\022%\n\005flags\030\004 \001(\0132\026.org.xrpl."
  "rpc.v1.Flags*\224\004\n\017LedgerEntryType\022!\n\035LEDG"
  "ER_ENTRY_TYPE_UNSPECIFIED\020\000\022\"\n\036LEDGER_EN"
  "TRY_TYPE_ACCOUNT_ROOT\020\001\022 \n\034LEDGER_ENTRY_"
  "TYPE_AMENDMENTS\020\002\022\033\n\027LEDGER_ENTRY_TYPE_C"
  "HECK\020\003\022%\n!LEDGER_ENTRY_TYPE_DEPOSIT_PREA"
  "UTH\020\004\022$\n LEDGER_ENTRY_TYPE_DIRECTORY_NOD"
  "E\020\005\022\034\n\030LEDGER_ENTRY_TYPE_ESCROW\020\006\022\"\n\036LED"
  "GER_ENTRY_TYPE_FEE_SETTINGS\020\007\022#\n\037LEDGER_"
  "ENTRY_TYPE_LEDGER_HASHES\020\010\022\033\n\027LEDGER_ENT"
  "RY_TYPE_OFFER\020\t\022!\n\035LEDGER_ENTRY_TYPE_PAY"
  "_CHANNEL\020\n\022\"\n\036LEDGER_ENTRY_TYPE_RIPPLE_S"
  "TATE\020\013\022!\n\035LEDGER_ENTRY_TYPE_SIGNER_LIST\020"
  "\014\022\"\n\036LEDGER_ENTRY_TYPE_NEGATIVE_UNL\020\r\022\034\n"
  "\030LEDGER_ENTRY_TYPE_TICKET\020\016B\023\n\017org.xrpl."
  "rpc.v1P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_sccs[17] = {
  &scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
  &scc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_once;
static bool descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto = {
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_initialized, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto, "org/xrpl/rpc/v1/ledger_objects.proto", 8496,
  &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_sccs, descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto_deps, 17, 1,
  schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto::offsets,
  file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto, 17, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto, file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto), true);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LedgerEntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto);
  return file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto[0];
}
bool LedgerEntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LedgerObject::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.account_root_ = const_cast< ::org::xrpl::rpc::v1::AccountRoot*>(
      ::org::xrpl::rpc::v1::AccountRoot::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.amendments_ = const_cast< ::org::xrpl::rpc::v1::Amendments*>(
      ::org::xrpl::rpc::v1::Amendments::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.check_ = const_cast< ::org::xrpl::rpc::v1::Check*>(
      ::org::xrpl::rpc::v1::Check::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.deposit_preauth_ = const_cast< ::org::xrpl::rpc::v1::DepositPreauthObject*>(
      ::org::xrpl::rpc::v1::DepositPreauthObject::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.directory_node_ = const_cast< ::org::xrpl::rpc::v1::DirectoryNode*>(
      ::org::xrpl::rpc::v1::DirectoryNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.escrow_ = const_cast< ::org::xrpl::rpc::v1::Escrow*>(
      ::org::xrpl::rpc::v1::Escrow::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.fee_settings_ = const_cast< ::org::xrpl::rpc::v1::FeeSettings*>(
      ::org::xrpl::rpc::v1::FeeSettings::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.ledger_hashes_ = const_cast< ::org::xrpl::rpc::v1::LedgerHashes*>(
      ::org::xrpl::rpc::v1::LedgerHashes::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.offer_ = const_cast< ::org::xrpl::rpc::v1::Offer*>(
      ::org::xrpl::rpc::v1::Offer::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.pay_channel_ = const_cast< ::org::xrpl::rpc::v1::PayChannel*>(
      ::org::xrpl::rpc::v1::PayChannel::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.ripple_state_ = const_cast< ::org::xrpl::rpc::v1::RippleState*>(
      ::org::xrpl::rpc::v1::RippleState::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.signer_list_ = const_cast< ::org::xrpl::rpc::v1::SignerList*>(
      ::org::xrpl::rpc::v1::SignerList::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.negative_unl_ = const_cast< ::org::xrpl::rpc::v1::NegativeUNL*>(
      ::org::xrpl::rpc::v1::NegativeUNL::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerObject_default_instance_.ticket_ = const_cast< ::org::xrpl::rpc::v1::TicketObject*>(
      ::org::xrpl::rpc::v1::TicketObject::internal_default_instance());
}
class LedgerObject::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::AccountRoot& account_root(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::Amendments& amendments(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::Check& check(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::DepositPreauthObject& deposit_preauth(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::DirectoryNode& directory_node(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::Escrow& escrow(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::FeeSettings& fee_settings(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::LedgerHashes& ledger_hashes(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::Offer& offer(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::PayChannel& pay_channel(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::RippleState& ripple_state(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::SignerList& signer_list(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::NegativeUNL& negative_unl(const LedgerObject* msg);
  static const ::org::xrpl::rpc::v1::TicketObject& ticket(const LedgerObject* msg);
};

const ::org::xrpl::rpc::v1::AccountRoot&
LedgerObject::HasBitSetters::account_root(const LedgerObject* msg) {
  return *msg->object_.account_root_;
}
const ::org::xrpl::rpc::v1::Amendments&
LedgerObject::HasBitSetters::amendments(const LedgerObject* msg) {
  return *msg->object_.amendments_;
}
const ::org::xrpl::rpc::v1::Check&
LedgerObject::HasBitSetters::check(const LedgerObject* msg) {
  return *msg->object_.check_;
}
const ::org::xrpl::rpc::v1::DepositPreauthObject&
LedgerObject::HasBitSetters::deposit_preauth(const LedgerObject* msg) {
  return *msg->object_.deposit_preauth_;
}
const ::org::xrpl::rpc::v1::DirectoryNode&
LedgerObject::HasBitSetters::directory_node(const LedgerObject* msg) {
  return *msg->object_.directory_node_;
}
const ::org::xrpl::rpc::v1::Escrow&
LedgerObject::HasBitSetters::escrow(const LedgerObject* msg) {
  return *msg->object_.escrow_;
}
const ::org::xrpl::rpc::v1::FeeSettings&
LedgerObject::HasBitSetters::fee_settings(const LedgerObject* msg) {
  return *msg->object_.fee_settings_;
}
const ::org::xrpl::rpc::v1::LedgerHashes&
LedgerObject::HasBitSetters::ledger_hashes(const LedgerObject* msg) {
  return *msg->object_.ledger_hashes_;
}
const ::org::xrpl::rpc::v1::Offer&
LedgerObject::HasBitSetters::offer(const LedgerObject* msg) {
  return *msg->object_.offer_;
}
const ::org::xrpl::rpc::v1::PayChannel&
LedgerObject::HasBitSetters::pay_channel(const LedgerObject* msg) {
  return *msg->object_.pay_channel_;
}
const ::org::xrpl::rpc::v1::RippleState&
LedgerObject::HasBitSetters::ripple_state(const LedgerObject* msg) {
  return *msg->object_.ripple_state_;
}
const ::org::xrpl::rpc::v1::SignerList&
LedgerObject::HasBitSetters::signer_list(const LedgerObject* msg) {
  return *msg->object_.signer_list_;
}
const ::org::xrpl::rpc::v1::NegativeUNL&
LedgerObject::HasBitSetters::negative_unl(const LedgerObject* msg) {
  return *msg->object_.negative_unl_;
}
const ::org::xrpl::rpc::v1::TicketObject&
LedgerObject::HasBitSetters::ticket(const LedgerObject* msg) {
  return *msg->object_.ticket_;
}
void LedgerObject::set_allocated_account_root(::org::xrpl::rpc::v1::AccountRoot* account_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (account_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_root, submessage_arena);
    }
    set_has_account_root();
    object_.account_root_ = account_root;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.account_root)
}
void LedgerObject::set_allocated_amendments(::org::xrpl::rpc::v1::Amendments* amendments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (amendments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amendments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amendments, submessage_arena);
    }
    set_has_amendments();
    object_.amendments_ = amendments;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.amendments)
}
void LedgerObject::set_allocated_check(::org::xrpl::rpc::v1::Check* check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check, submessage_arena);
    }
    set_has_check();
    object_.check_ = check;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.check)
}
void LedgerObject::set_allocated_deposit_preauth(::org::xrpl::rpc::v1::DepositPreauthObject* deposit_preauth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (deposit_preauth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deposit_preauth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit_preauth, submessage_arena);
    }
    set_has_deposit_preauth();
    object_.deposit_preauth_ = deposit_preauth;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.deposit_preauth)
}
void LedgerObject::set_allocated_directory_node(::org::xrpl::rpc::v1::DirectoryNode* directory_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (directory_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      directory_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directory_node, submessage_arena);
    }
    set_has_directory_node();
    object_.directory_node_ = directory_node;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.directory_node)
}
void LedgerObject::set_allocated_escrow(::org::xrpl::rpc::v1::Escrow* escrow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (escrow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      escrow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, escrow, submessage_arena);
    }
    set_has_escrow();
    object_.escrow_ = escrow;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.escrow)
}
void LedgerObject::set_allocated_fee_settings(::org::xrpl::rpc::v1::FeeSettings* fee_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (fee_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee_settings, submessage_arena);
    }
    set_has_fee_settings();
    object_.fee_settings_ = fee_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.fee_settings)
}
void LedgerObject::set_allocated_ledger_hashes(::org::xrpl::rpc::v1::LedgerHashes* ledger_hashes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (ledger_hashes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ledger_hashes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger_hashes, submessage_arena);
    }
    set_has_ledger_hashes();
    object_.ledger_hashes_ = ledger_hashes;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.ledger_hashes)
}
void LedgerObject::set_allocated_offer(::org::xrpl::rpc::v1::Offer* offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer, submessage_arena);
    }
    set_has_offer();
    object_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.offer)
}
void LedgerObject::set_allocated_pay_channel(::org::xrpl::rpc::v1::PayChannel* pay_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (pay_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pay_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pay_channel, submessage_arena);
    }
    set_has_pay_channel();
    object_.pay_channel_ = pay_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.pay_channel)
}
void LedgerObject::set_allocated_ripple_state(::org::xrpl::rpc::v1::RippleState* ripple_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (ripple_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ripple_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ripple_state, submessage_arena);
    }
    set_has_ripple_state();
    object_.ripple_state_ = ripple_state;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.ripple_state)
}
void LedgerObject::set_allocated_signer_list(::org::xrpl::rpc::v1::SignerList* signer_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (signer_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signer_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signer_list, submessage_arena);
    }
    set_has_signer_list();
    object_.signer_list_ = signer_list;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.signer_list)
}
void LedgerObject::set_allocated_negative_unl(::org::xrpl::rpc::v1::NegativeUNL* negative_unl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (negative_unl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      negative_unl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, negative_unl, submessage_arena);
    }
    set_has_negative_unl();
    object_.negative_unl_ = negative_unl;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.negative_unl)
}
void LedgerObject::set_allocated_ticket(::org::xrpl::rpc::v1::TicketObject* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object();
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    set_has_ticket();
    object_.ticket_ = ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.LedgerObject.ticket)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerObject::kAccountRootFieldNumber;
const int LedgerObject::kAmendmentsFieldNumber;
const int LedgerObject::kCheckFieldNumber;
const int LedgerObject::kDepositPreauthFieldNumber;
const int LedgerObject::kDirectoryNodeFieldNumber;
const int LedgerObject::kEscrowFieldNumber;
const int LedgerObject::kFeeSettingsFieldNumber;
const int LedgerObject::kLedgerHashesFieldNumber;
const int LedgerObject::kOfferFieldNumber;
const int LedgerObject::kPayChannelFieldNumber;
const int LedgerObject::kRippleStateFieldNumber;
const int LedgerObject::kSignerListFieldNumber;
const int LedgerObject::kNegativeUnlFieldNumber;
const int LedgerObject::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerObject::LedgerObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.LedgerObject)
}
LedgerObject::LedgerObject(const LedgerObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_object();
  switch (from.object_case()) {
    case kAccountRoot: {
      mutable_account_root()->::org::xrpl::rpc::v1::AccountRoot::MergeFrom(from.account_root());
      break;
    }
    case kAmendments: {
      mutable_amendments()->::org::xrpl::rpc::v1::Amendments::MergeFrom(from.amendments());
      break;
    }
    case kCheck: {
      mutable_check()->::org::xrpl::rpc::v1::Check::MergeFrom(from.check());
      break;
    }
    case kDepositPreauth: {
      mutable_deposit_preauth()->::org::xrpl::rpc::v1::DepositPreauthObject::MergeFrom(from.deposit_preauth());
      break;
    }
    case kDirectoryNode: {
      mutable_directory_node()->::org::xrpl::rpc::v1::DirectoryNode::MergeFrom(from.directory_node());
      break;
    }
    case kEscrow: {
      mutable_escrow()->::org::xrpl::rpc::v1::Escrow::MergeFrom(from.escrow());
      break;
    }
    case kFeeSettings: {
      mutable_fee_settings()->::org::xrpl::rpc::v1::FeeSettings::MergeFrom(from.fee_settings());
      break;
    }
    case kLedgerHashes: {
      mutable_ledger_hashes()->::org::xrpl::rpc::v1::LedgerHashes::MergeFrom(from.ledger_hashes());
      break;
    }
    case kOffer: {
      mutable_offer()->::org::xrpl::rpc::v1::Offer::MergeFrom(from.offer());
      break;
    }
    case kPayChannel: {
      mutable_pay_channel()->::org::xrpl::rpc::v1::PayChannel::MergeFrom(from.pay_channel());
      break;
    }
    case kRippleState: {
      mutable_ripple_state()->::org::xrpl::rpc::v1::RippleState::MergeFrom(from.ripple_state());
      break;
    }
    case kSignerList: {
      mutable_signer_list()->::org::xrpl::rpc::v1::SignerList::MergeFrom(from.signer_list());
      break;
    }
    case kNegativeUnl: {
      mutable_negative_unl()->::org::xrpl::rpc::v1::NegativeUNL::MergeFrom(from.negative_unl());
      break;
    }
    case kTicket: {
      mutable_ticket()->::org::xrpl::rpc::v1::TicketObject::MergeFrom(from.ticket());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.LedgerObject)
}

void LedgerObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  clear_has_object();
}

LedgerObject::~LedgerObject() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.LedgerObject)
  SharedDtor();
}

void LedgerObject::SharedDtor() {
  if (has_object()) {
    clear_object();
  }
}

void LedgerObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerObject& LedgerObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LedgerObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void LedgerObject::clear_object() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.LedgerObject)
  switch (object_case()) {
    case kAccountRoot: {
      delete object_.account_root_;
      break;
    }
    case kAmendments: {
      delete object_.amendments_;
      break;
    }
    case kCheck: {
      delete object_.check_;
      break;
    }
    case kDepositPreauth: {
      delete object_.deposit_preauth_;
      break;
    }
    case kDirectoryNode: {
      delete object_.directory_node_;
      break;
    }
    case kEscrow: {
      delete object_.escrow_;
      break;
    }
    case kFeeSettings: {
      delete object_.fee_settings_;
      break;
    }
    case kLedgerHashes: {
      delete object_.ledger_hashes_;
      break;
    }
    case kOffer: {
      delete object_.offer_;
      break;
    }
    case kPayChannel: {
      delete object_.pay_channel_;
      break;
    }
    case kRippleState: {
      delete object_.ripple_state_;
      break;
    }
    case kSignerList: {
      delete object_.signer_list_;
      break;
    }
    case kNegativeUnl: {
      delete object_.negative_unl_;
      break;
    }
    case kTicket: {
      delete object_.ticket_;
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_NOT_SET;
}


void LedgerObject::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.LedgerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_object();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.AccountRoot account_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Amendments amendments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_amendments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Check check = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DepositPreauthObject deposit_preauth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_deposit_preauth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DirectoryNode directory_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_directory_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Escrow escrow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_escrow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.FeeSettings fee_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_fee_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerHashes ledger_hashes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_ledger_hashes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Offer offer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_offer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PayChannel pay_channel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_pay_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.RippleState ripple_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ripple_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SignerList signer_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_signer_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.NegativeUNL negative_unl = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_negative_unl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TicketObject ticket = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.LedgerObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.AccountRoot account_root = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Amendments amendments = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amendments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Check check = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DepositPreauthObject deposit_preauth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deposit_preauth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DirectoryNode directory_node = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_directory_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Escrow escrow = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_escrow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.FeeSettings fee_settings = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fee_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LedgerHashes ledger_hashes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ledger_hashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Offer offer = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PayChannel pay_channel = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pay_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.RippleState ripple_state = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ripple_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SignerList signer_list = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signer_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.NegativeUNL negative_unl = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_negative_unl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TicketObject ticket = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.LedgerObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.LedgerObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.LedgerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountRoot account_root = 1;
  if (has_account_root()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account_root(this), output);
  }

  // .org.xrpl.rpc.v1.Amendments amendments = 2;
  if (has_amendments()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::amendments(this), output);
  }

  // .org.xrpl.rpc.v1.Check check = 3;
  if (has_check()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::check(this), output);
  }

  // .org.xrpl.rpc.v1.DepositPreauthObject deposit_preauth = 4;
  if (has_deposit_preauth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::deposit_preauth(this), output);
  }

  // .org.xrpl.rpc.v1.DirectoryNode directory_node = 5;
  if (has_directory_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::directory_node(this), output);
  }

  // .org.xrpl.rpc.v1.Escrow escrow = 6;
  if (has_escrow()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::escrow(this), output);
  }

  // .org.xrpl.rpc.v1.FeeSettings fee_settings = 7;
  if (has_fee_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::fee_settings(this), output);
  }

  // .org.xrpl.rpc.v1.LedgerHashes ledger_hashes = 8;
  if (has_ledger_hashes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::ledger_hashes(this), output);
  }

  // .org.xrpl.rpc.v1.Offer offer = 9;
  if (has_offer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::offer(this), output);
  }

  // .org.xrpl.rpc.v1.PayChannel pay_channel = 10;
  if (has_pay_channel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::pay_channel(this), output);
  }

  // .org.xrpl.rpc.v1.RippleState ripple_state = 11;
  if (has_ripple_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::ripple_state(this), output);
  }

  // .org.xrpl.rpc.v1.SignerList signer_list = 12;
  if (has_signer_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::signer_list(this), output);
  }

  // .org.xrpl.rpc.v1.NegativeUNL negative_unl = 13;
  if (has_negative_unl()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::negative_unl(this), output);
  }

  // .org.xrpl.rpc.v1.TicketObject ticket = 14;
  if (has_ticket()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::ticket(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.LedgerObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* LedgerObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.LedgerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.AccountRoot account_root = 1;
  if (has_account_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account_root(this), target);
  }

  // .org.xrpl.rpc.v1.Amendments amendments = 2;
  if (has_amendments()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::amendments(this), target);
  }

  // .org.xrpl.rpc.v1.Check check = 3;
  if (has_check()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::check(this), target);
  }

  // .org.xrpl.rpc.v1.DepositPreauthObject deposit_preauth = 4;
  if (has_deposit_preauth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::deposit_preauth(this), target);
  }

  // .org.xrpl.rpc.v1.DirectoryNode directory_node = 5;
  if (has_directory_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::directory_node(this), target);
  }

  // .org.xrpl.rpc.v1.Escrow escrow = 6;
  if (has_escrow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::escrow(this), target);
  }

  // .org.xrpl.rpc.v1.FeeSettings fee_settings = 7;
  if (has_fee_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::fee_settings(this), target);
  }

  // .org.xrpl.rpc.v1.LedgerHashes ledger_hashes = 8;
  if (has_ledger_hashes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::ledger_hashes(this), target);
  }

  // .org.xrpl.rpc.v1.Offer offer = 9;
  if (has_offer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::offer(this), target);
  }

  // .org.xrpl.rpc.v1.PayChannel pay_channel = 10;
  if (has_pay_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::pay_channel(this), target);
  }

  // .org.xrpl.rpc.v1.RippleState ripple_state = 11;
  if (has_ripple_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::ripple_state(this), target);
  }

  // .org.xrpl.rpc.v1.SignerList signer_list = 12;
  if (has_signer_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::signer_list(this), target);
  }

  // .org.xrpl.rpc.v1.NegativeUNL negative_unl = 13;
  if (has_negative_unl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::negative_unl(this), target);
  }

  // .org.xrpl.rpc.v1.TicketObject ticket = 14;
  if (has_ticket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::ticket(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.LedgerObject)
  return target;
}

size_t LedgerObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.LedgerObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (object_case()) {
    // .org.xrpl.rpc.v1.AccountRoot account_root = 1;
    case kAccountRoot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.account_root_);
      break;
    }
    // .org.xrpl.rpc.v1.Amendments amendments = 2;
    case kAmendments: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.amendments_);
      break;
    }
    // .org.xrpl.rpc.v1.Check check = 3;
    case kCheck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.check_);
      break;
    }
    // .org.xrpl.rpc.v1.DepositPreauthObject deposit_preauth = 4;
    case kDepositPreauth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.deposit_preauth_);
      break;
    }
    // .org.xrpl.rpc.v1.DirectoryNode directory_node = 5;
    case kDirectoryNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.directory_node_);
      break;
    }
    // .org.xrpl.rpc.v1.Escrow escrow = 6;
    case kEscrow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.escrow_);
      break;
    }
    // .org.xrpl.rpc.v1.FeeSettings fee_settings = 7;
    case kFeeSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.fee_settings_);
      break;
    }
    // .org.xrpl.rpc.v1.LedgerHashes ledger_hashes = 8;
    case kLedgerHashes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.ledger_hashes_);
      break;
    }
    // .org.xrpl.rpc.v1.Offer offer = 9;
    case kOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.offer_);
      break;
    }
    // .org.xrpl.rpc.v1.PayChannel pay_channel = 10;
    case kPayChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.pay_channel_);
      break;
    }
    // .org.xrpl.rpc.v1.RippleState ripple_state = 11;
    case kRippleState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.ripple_state_);
      break;
    }
    // .org.xrpl.rpc.v1.SignerList signer_list = 12;
    case kSignerList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.signer_list_);
      break;
    }
    // .org.xrpl.rpc.v1.NegativeUNL negative_unl = 13;
    case kNegativeUnl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.negative_unl_);
      break;
    }
    // .org.xrpl.rpc.v1.TicketObject ticket = 14;
    case kTicket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_.ticket_);
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.LedgerObject)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LedgerObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.LedgerObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.LedgerObject)
    MergeFrom(*source);
  }
}

void LedgerObject::MergeFrom(const LedgerObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.LedgerObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.object_case()) {
    case kAccountRoot: {
      mutable_account_root()->::org::xrpl::rpc::v1::AccountRoot::MergeFrom(from.account_root());
      break;
    }
    case kAmendments: {
      mutable_amendments()->::org::xrpl::rpc::v1::Amendments::MergeFrom(from.amendments());
      break;
    }
    case kCheck: {
      mutable_check()->::org::xrpl::rpc::v1::Check::MergeFrom(from.check());
      break;
    }
    case kDepositPreauth: {
      mutable_deposit_preauth()->::org::xrpl::rpc::v1::DepositPreauthObject::MergeFrom(from.deposit_preauth());
      break;
    }
    case kDirectoryNode: {
      mutable_directory_node()->::org::xrpl::rpc::v1::DirectoryNode::MergeFrom(from.directory_node());
      break;
    }
    case kEscrow: {
      mutable_escrow()->::org::xrpl::rpc::v1::Escrow::MergeFrom(from.escrow());
      break;
    }
    case kFeeSettings: {
      mutable_fee_settings()->::org::xrpl::rpc::v1::FeeSettings::MergeFrom(from.fee_settings());
      break;
    }
    case kLedgerHashes: {
      mutable_ledger_hashes()->::org::xrpl::rpc::v1::LedgerHashes::MergeFrom(from.ledger_hashes());
      break;
    }
    case kOffer: {
      mutable_offer()->::org::xrpl::rpc::v1::Offer::MergeFrom(from.offer());
      break;
    }
    case kPayChannel: {
      mutable_pay_channel()->::org::xrpl::rpc::v1::PayChannel::MergeFrom(from.pay_channel());
      break;
    }
    case kRippleState: {
      mutable_ripple_state()->::org::xrpl::rpc::v1::RippleState::MergeFrom(from.ripple_state());
      break;
    }
    case kSignerList: {
      mutable_signer_list()->::org::xrpl::rpc::v1::SignerList::MergeFrom(from.signer_list());
      break;
    }
    case kNegativeUnl: {
      mutable_negative_unl()->::org::xrpl::rpc::v1::NegativeUNL::MergeFrom(from.negative_unl());
      break;
    }
    case kTicket: {
      mutable_ticket()->::org::xrpl::rpc::v1::TicketObject::MergeFrom(from.ticket());
      break;
    }
    case OBJECT_NOT_SET: {
      break;
    }
  }
}

void LedgerObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.LedgerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerObject::CopyFrom(const LedgerObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.LedgerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerObject::IsInitialized() const {
  return true;
}

void LedgerObject::Swap(LedgerObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerObject::InternalSwap(LedgerObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_, other->object_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LedgerObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountRoot::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->balance_ = const_cast< ::org::xrpl::rpc::v1::Balance*>(
      ::org::xrpl::rpc::v1::Balance::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::org::xrpl::rpc::v1::Sequence*>(
      ::org::xrpl::rpc::v1::Sequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->owner_count_ = const_cast< ::org::xrpl::rpc::v1::OwnerCount*>(
      ::org::xrpl::rpc::v1::OwnerCount::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->account_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::AccountTransactionID*>(
      ::org::xrpl::rpc::v1::AccountTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->domain_ = const_cast< ::org::xrpl::rpc::v1::Domain*>(
      ::org::xrpl::rpc::v1::Domain::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->email_hash_ = const_cast< ::org::xrpl::rpc::v1::EmailHash*>(
      ::org::xrpl::rpc::v1::EmailHash::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->message_key_ = const_cast< ::org::xrpl::rpc::v1::MessageKey*>(
      ::org::xrpl::rpc::v1::MessageKey::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->regular_key_ = const_cast< ::org::xrpl::rpc::v1::RegularKey*>(
      ::org::xrpl::rpc::v1::RegularKey::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->tick_size_ = const_cast< ::org::xrpl::rpc::v1::TickSize*>(
      ::org::xrpl::rpc::v1::TickSize::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->transfer_rate_ = const_cast< ::org::xrpl::rpc::v1::TransferRate*>(
      ::org::xrpl::rpc::v1::TransferRate::internal_default_instance());
  ::org::xrpl::rpc::v1::_AccountRoot_default_instance_._instance.get_mutable()->ticket_count_ = const_cast< ::org::xrpl::rpc::v1::TicketCount*>(
      ::org::xrpl::rpc::v1::TicketCount::internal_default_instance());
}
class AccountRoot::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::Balance& balance(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::Sequence& sequence(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::OwnerCount& owner_count(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::AccountTransactionID& account_transaction_id(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::Domain& domain(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::EmailHash& email_hash(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::MessageKey& message_key(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::RegularKey& regular_key(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::TickSize& tick_size(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::TransferRate& transfer_rate(const AccountRoot* msg);
  static const ::org::xrpl::rpc::v1::TicketCount& ticket_count(const AccountRoot* msg);
};

const ::org::xrpl::rpc::v1::Account&
AccountRoot::HasBitSetters::account(const AccountRoot* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Balance&
AccountRoot::HasBitSetters::balance(const AccountRoot* msg) {
  return *msg->balance_;
}
const ::org::xrpl::rpc::v1::Sequence&
AccountRoot::HasBitSetters::sequence(const AccountRoot* msg) {
  return *msg->sequence_;
}
const ::org::xrpl::rpc::v1::Flags&
AccountRoot::HasBitSetters::flags(const AccountRoot* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::OwnerCount&
AccountRoot::HasBitSetters::owner_count(const AccountRoot* msg) {
  return *msg->owner_count_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
AccountRoot::HasBitSetters::previous_transaction_id(const AccountRoot* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
AccountRoot::HasBitSetters::previous_transaction_ledger_sequence(const AccountRoot* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::AccountTransactionID&
AccountRoot::HasBitSetters::account_transaction_id(const AccountRoot* msg) {
  return *msg->account_transaction_id_;
}
const ::org::xrpl::rpc::v1::Domain&
AccountRoot::HasBitSetters::domain(const AccountRoot* msg) {
  return *msg->domain_;
}
const ::org::xrpl::rpc::v1::EmailHash&
AccountRoot::HasBitSetters::email_hash(const AccountRoot* msg) {
  return *msg->email_hash_;
}
const ::org::xrpl::rpc::v1::MessageKey&
AccountRoot::HasBitSetters::message_key(const AccountRoot* msg) {
  return *msg->message_key_;
}
const ::org::xrpl::rpc::v1::RegularKey&
AccountRoot::HasBitSetters::regular_key(const AccountRoot* msg) {
  return *msg->regular_key_;
}
const ::org::xrpl::rpc::v1::TickSize&
AccountRoot::HasBitSetters::tick_size(const AccountRoot* msg) {
  return *msg->tick_size_;
}
const ::org::xrpl::rpc::v1::TransferRate&
AccountRoot::HasBitSetters::transfer_rate(const AccountRoot* msg) {
  return *msg->transfer_rate_;
}
const ::org::xrpl::rpc::v1::TicketCount&
AccountRoot::HasBitSetters::ticket_count(const AccountRoot* msg) {
  return *msg->ticket_count_;
}
void AccountRoot::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void AccountRoot::clear_balance() {
  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
}
void AccountRoot::clear_sequence() {
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
}
void AccountRoot::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void AccountRoot::clear_owner_count() {
  if (GetArenaNoVirtual() == nullptr && owner_count_ != nullptr) {
    delete owner_count_;
  }
  owner_count_ = nullptr;
}
void AccountRoot::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void AccountRoot::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
void AccountRoot::clear_account_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && account_transaction_id_ != nullptr) {
    delete account_transaction_id_;
  }
  account_transaction_id_ = nullptr;
}
void AccountRoot::clear_domain() {
  if (GetArenaNoVirtual() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
}
void AccountRoot::clear_email_hash() {
  if (GetArenaNoVirtual() == nullptr && email_hash_ != nullptr) {
    delete email_hash_;
  }
  email_hash_ = nullptr;
}
void AccountRoot::clear_message_key() {
  if (GetArenaNoVirtual() == nullptr && message_key_ != nullptr) {
    delete message_key_;
  }
  message_key_ = nullptr;
}
void AccountRoot::clear_regular_key() {
  if (GetArenaNoVirtual() == nullptr && regular_key_ != nullptr) {
    delete regular_key_;
  }
  regular_key_ = nullptr;
}
void AccountRoot::clear_tick_size() {
  if (GetArenaNoVirtual() == nullptr && tick_size_ != nullptr) {
    delete tick_size_;
  }
  tick_size_ = nullptr;
}
void AccountRoot::clear_transfer_rate() {
  if (GetArenaNoVirtual() == nullptr && transfer_rate_ != nullptr) {
    delete transfer_rate_;
  }
  transfer_rate_ = nullptr;
}
void AccountRoot::clear_ticket_count() {
  if (GetArenaNoVirtual() == nullptr && ticket_count_ != nullptr) {
    delete ticket_count_;
  }
  ticket_count_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountRoot::kAccountFieldNumber;
const int AccountRoot::kBalanceFieldNumber;
const int AccountRoot::kSequenceFieldNumber;
const int AccountRoot::kFlagsFieldNumber;
const int AccountRoot::kOwnerCountFieldNumber;
const int AccountRoot::kPreviousTransactionIdFieldNumber;
const int AccountRoot::kPreviousTransactionLedgerSequenceFieldNumber;
const int AccountRoot::kAccountTransactionIdFieldNumber;
const int AccountRoot::kDomainFieldNumber;
const int AccountRoot::kEmailHashFieldNumber;
const int AccountRoot::kMessageKeyFieldNumber;
const int AccountRoot::kRegularKeyFieldNumber;
const int AccountRoot::kTickSizeFieldNumber;
const int AccountRoot::kTransferRateFieldNumber;
const int AccountRoot::kTicketCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountRoot::AccountRoot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.AccountRoot)
}
AccountRoot::AccountRoot(const AccountRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_balance()) {
    balance_ = new ::org::xrpl::rpc::v1::Balance(*from.balance_);
  } else {
    balance_ = nullptr;
  }
  if (from.has_sequence()) {
    sequence_ = new ::org::xrpl::rpc::v1::Sequence(*from.sequence_);
  } else {
    sequence_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_owner_count()) {
    owner_count_ = new ::org::xrpl::rpc::v1::OwnerCount(*from.owner_count_);
  } else {
    owner_count_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  if (from.has_account_transaction_id()) {
    account_transaction_id_ = new ::org::xrpl::rpc::v1::AccountTransactionID(*from.account_transaction_id_);
  } else {
    account_transaction_id_ = nullptr;
  }
  if (from.has_domain()) {
    domain_ = new ::org::xrpl::rpc::v1::Domain(*from.domain_);
  } else {
    domain_ = nullptr;
  }
  if (from.has_email_hash()) {
    email_hash_ = new ::org::xrpl::rpc::v1::EmailHash(*from.email_hash_);
  } else {
    email_hash_ = nullptr;
  }
  if (from.has_message_key()) {
    message_key_ = new ::org::xrpl::rpc::v1::MessageKey(*from.message_key_);
  } else {
    message_key_ = nullptr;
  }
  if (from.has_regular_key()) {
    regular_key_ = new ::org::xrpl::rpc::v1::RegularKey(*from.regular_key_);
  } else {
    regular_key_ = nullptr;
  }
  if (from.has_tick_size()) {
    tick_size_ = new ::org::xrpl::rpc::v1::TickSize(*from.tick_size_);
  } else {
    tick_size_ = nullptr;
  }
  if (from.has_transfer_rate()) {
    transfer_rate_ = new ::org::xrpl::rpc::v1::TransferRate(*from.transfer_rate_);
  } else {
    transfer_rate_ = nullptr;
  }
  if (from.has_ticket_count()) {
    ticket_count_ = new ::org::xrpl::rpc::v1::TicketCount(*from.ticket_count_);
  } else {
    ticket_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.AccountRoot)
}

void AccountRoot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_count_) -
      reinterpret_cast<char*>(&account_)) + sizeof(ticket_count_));
}

AccountRoot::~AccountRoot() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.AccountRoot)
  SharedDtor();
}

void AccountRoot::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete balance_;
  if (this != internal_default_instance()) delete sequence_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete owner_count_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
  if (this != internal_default_instance()) delete account_transaction_id_;
  if (this != internal_default_instance()) delete domain_;
  if (this != internal_default_instance()) delete email_hash_;
  if (this != internal_default_instance()) delete message_key_;
  if (this != internal_default_instance()) delete regular_key_;
  if (this != internal_default_instance()) delete tick_size_;
  if (this != internal_default_instance()) delete transfer_rate_;
  if (this != internal_default_instance()) delete ticket_count_;
}

void AccountRoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountRoot& AccountRoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountRoot_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void AccountRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.AccountRoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_count_ != nullptr) {
    delete owner_count_;
  }
  owner_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && account_transaction_id_ != nullptr) {
    delete account_transaction_id_;
  }
  account_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && email_hash_ != nullptr) {
    delete email_hash_;
  }
  email_hash_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && message_key_ != nullptr) {
    delete message_key_;
  }
  message_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && regular_key_ != nullptr) {
    delete regular_key_;
  }
  regular_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tick_size_ != nullptr) {
    delete tick_size_;
  }
  tick_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transfer_rate_ != nullptr) {
    delete transfer_rate_;
  }
  transfer_rate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ticket_count_ != nullptr) {
    delete ticket_count_;
  }
  ticket_count_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountRoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Balance balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Sequence sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerCount owner_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_owner_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_account_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Domain domain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_domain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.EmailHash email_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_email_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.MessageKey message_key = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_message_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.RegularKey regular_key = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_regular_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TickSize tick_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_tick_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransferRate transfer_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_transfer_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TicketCount ticket_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_ticket_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountRoot::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.AccountRoot)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Balance balance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_balance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Sequence sequence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerCount owner_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Domain domain = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.EmailHash email_hash = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_email_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.MessageKey message_key = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.RegularKey regular_key = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regular_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TickSize tick_size = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tick_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TransferRate transfer_rate = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TicketCount ticket_count = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.AccountRoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.AccountRoot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountRoot::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.AccountRoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.Balance balance = 2;
  if (this->has_balance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::balance(this), output);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 3;
  if (this->has_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::sequence(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 4;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerCount owner_count = 5;
  if (this->has_owner_count()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::owner_count(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 6;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 7;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 8;
  if (this->has_account_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::account_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.Domain domain = 9;
  if (this->has_domain()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::domain(this), output);
  }

  // .org.xrpl.rpc.v1.EmailHash email_hash = 10;
  if (this->has_email_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::email_hash(this), output);
  }

  // .org.xrpl.rpc.v1.MessageKey message_key = 11;
  if (this->has_message_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::message_key(this), output);
  }

  // .org.xrpl.rpc.v1.RegularKey regular_key = 12;
  if (this->has_regular_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::regular_key(this), output);
  }

  // .org.xrpl.rpc.v1.TickSize tick_size = 13;
  if (this->has_tick_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::tick_size(this), output);
  }

  // .org.xrpl.rpc.v1.TransferRate transfer_rate = 14;
  if (this->has_transfer_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::transfer_rate(this), output);
  }

  // .org.xrpl.rpc.v1.TicketCount ticket_count = 15;
  if (this->has_ticket_count()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::ticket_count(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.AccountRoot)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountRoot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.AccountRoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.Balance balance = 2;
  if (this->has_balance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::balance(this), target);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 3;
  if (this->has_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::sequence(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 4;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerCount owner_count = 5;
  if (this->has_owner_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::owner_count(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 6;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 7;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 8;
  if (this->has_account_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::account_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.Domain domain = 9;
  if (this->has_domain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::domain(this), target);
  }

  // .org.xrpl.rpc.v1.EmailHash email_hash = 10;
  if (this->has_email_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::email_hash(this), target);
  }

  // .org.xrpl.rpc.v1.MessageKey message_key = 11;
  if (this->has_message_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::message_key(this), target);
  }

  // .org.xrpl.rpc.v1.RegularKey regular_key = 12;
  if (this->has_regular_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::regular_key(this), target);
  }

  // .org.xrpl.rpc.v1.TickSize tick_size = 13;
  if (this->has_tick_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::tick_size(this), target);
  }

  // .org.xrpl.rpc.v1.TransferRate transfer_rate = 14;
  if (this->has_transfer_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::transfer_rate(this), target);
  }

  // .org.xrpl.rpc.v1.TicketCount ticket_count = 15;
  if (this->has_ticket_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::ticket_count(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.AccountRoot)
  return target;
}

size_t AccountRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.AccountRoot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Balance balance = 2;
  if (this->has_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balance_);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 3;
  if (this->has_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequence_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 4;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.OwnerCount owner_count = 5;
  if (this->has_owner_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_count_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 6;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 7;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.AccountTransactionID account_transaction_id = 8;
  if (this->has_account_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_transaction_id_);
  }

  // .org.xrpl.rpc.v1.Domain domain = 9;
  if (this->has_domain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *domain_);
  }

  // .org.xrpl.rpc.v1.EmailHash email_hash = 10;
  if (this->has_email_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *email_hash_);
  }

  // .org.xrpl.rpc.v1.MessageKey message_key = 11;
  if (this->has_message_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_key_);
  }

  // .org.xrpl.rpc.v1.RegularKey regular_key = 12;
  if (this->has_regular_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regular_key_);
  }

  // .org.xrpl.rpc.v1.TickSize tick_size = 13;
  if (this->has_tick_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_size_);
  }

  // .org.xrpl.rpc.v1.TransferRate transfer_rate = 14;
  if (this->has_transfer_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_rate_);
  }

  // .org.xrpl.rpc.v1.TicketCount ticket_count = 15;
  if (this->has_ticket_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_count_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountRoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.AccountRoot)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountRoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountRoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.AccountRoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.AccountRoot)
    MergeFrom(*source);
  }
}

void AccountRoot::MergeFrom(const AccountRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.AccountRoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_balance()) {
    mutable_balance()->::org::xrpl::rpc::v1::Balance::MergeFrom(from.balance());
  }
  if (from.has_sequence()) {
    mutable_sequence()->::org::xrpl::rpc::v1::Sequence::MergeFrom(from.sequence());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_owner_count()) {
    mutable_owner_count()->::org::xrpl::rpc::v1::OwnerCount::MergeFrom(from.owner_count());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
  if (from.has_account_transaction_id()) {
    mutable_account_transaction_id()->::org::xrpl::rpc::v1::AccountTransactionID::MergeFrom(from.account_transaction_id());
  }
  if (from.has_domain()) {
    mutable_domain()->::org::xrpl::rpc::v1::Domain::MergeFrom(from.domain());
  }
  if (from.has_email_hash()) {
    mutable_email_hash()->::org::xrpl::rpc::v1::EmailHash::MergeFrom(from.email_hash());
  }
  if (from.has_message_key()) {
    mutable_message_key()->::org::xrpl::rpc::v1::MessageKey::MergeFrom(from.message_key());
  }
  if (from.has_regular_key()) {
    mutable_regular_key()->::org::xrpl::rpc::v1::RegularKey::MergeFrom(from.regular_key());
  }
  if (from.has_tick_size()) {
    mutable_tick_size()->::org::xrpl::rpc::v1::TickSize::MergeFrom(from.tick_size());
  }
  if (from.has_transfer_rate()) {
    mutable_transfer_rate()->::org::xrpl::rpc::v1::TransferRate::MergeFrom(from.transfer_rate());
  }
  if (from.has_ticket_count()) {
    mutable_ticket_count()->::org::xrpl::rpc::v1::TicketCount::MergeFrom(from.ticket_count());
  }
}

void AccountRoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.AccountRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRoot::CopyFrom(const AccountRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.AccountRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRoot::IsInitialized() const {
  return true;
}

void AccountRoot::Swap(AccountRoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountRoot::InternalSwap(AccountRoot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(balance_, other->balance_);
  swap(sequence_, other->sequence_);
  swap(flags_, other->flags_);
  swap(owner_count_, other->owner_count_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
  swap(account_transaction_id_, other->account_transaction_id_);
  swap(domain_, other->domain_);
  swap(email_hash_, other->email_hash_);
  swap(message_key_, other->message_key_);
  swap(regular_key_, other->regular_key_);
  swap(tick_size_, other->tick_size_);
  swap(transfer_rate_, other->transfer_rate_);
  swap(ticket_count_, other->ticket_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountRoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Amendments_Amendment::InitAsDefaultInstance() {
}
class Amendments_Amendment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Amendments_Amendment::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Amendments_Amendment::Amendments_Amendment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Amendments.Amendment)
}
Amendments_Amendment::Amendments_Amendment(const Amendments_Amendment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Amendments.Amendment)
}

void Amendments_Amendment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Amendments_Amendment::~Amendments_Amendment() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Amendments.Amendment)
  SharedDtor();
}

void Amendments_Amendment::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Amendments_Amendment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Amendments_Amendment& Amendments_Amendment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Amendments_Amendment_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void Amendments_Amendment::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Amendments.Amendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Amendments_Amendment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Amendments_Amendment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Amendments.Amendment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Amendments.Amendment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Amendments.Amendment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Amendments_Amendment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Amendments.Amendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Amendments.Amendment)
}

::PROTOBUF_NAMESPACE_ID::uint8* Amendments_Amendment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Amendments.Amendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Amendments.Amendment)
  return target;
}

size_t Amendments_Amendment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Amendments.Amendment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Amendments_Amendment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Amendments.Amendment)
  GOOGLE_DCHECK_NE(&from, this);
  const Amendments_Amendment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Amendments_Amendment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Amendments.Amendment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Amendments.Amendment)
    MergeFrom(*source);
  }
}

void Amendments_Amendment::MergeFrom(const Amendments_Amendment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Amendments.Amendment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Amendments_Amendment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Amendments.Amendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Amendments_Amendment::CopyFrom(const Amendments_Amendment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Amendments.Amendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amendments_Amendment::IsInitialized() const {
  return true;
}

void Amendments_Amendment::Swap(Amendments_Amendment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Amendments_Amendment::InternalSwap(Amendments_Amendment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Amendments_Amendment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Amendments_Majority::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Amendments_Majority_default_instance_._instance.get_mutable()->amendment_ = const_cast< ::org::xrpl::rpc::v1::Amendments_Amendment*>(
      ::org::xrpl::rpc::v1::Amendments_Amendment::internal_default_instance());
  ::org::xrpl::rpc::v1::_Amendments_Majority_default_instance_._instance.get_mutable()->close_time_ = const_cast< ::org::xrpl::rpc::v1::CloseTime*>(
      ::org::xrpl::rpc::v1::CloseTime::internal_default_instance());
}
class Amendments_Majority::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Amendments_Amendment& amendment(const Amendments_Majority* msg);
  static const ::org::xrpl::rpc::v1::CloseTime& close_time(const Amendments_Majority* msg);
};

const ::org::xrpl::rpc::v1::Amendments_Amendment&
Amendments_Majority::HasBitSetters::amendment(const Amendments_Majority* msg) {
  return *msg->amendment_;
}
const ::org::xrpl::rpc::v1::CloseTime&
Amendments_Majority::HasBitSetters::close_time(const Amendments_Majority* msg) {
  return *msg->close_time_;
}
void Amendments_Majority::clear_close_time() {
  if (GetArenaNoVirtual() == nullptr && close_time_ != nullptr) {
    delete close_time_;
  }
  close_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Amendments_Majority::kAmendmentFieldNumber;
const int Amendments_Majority::kCloseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Amendments_Majority::Amendments_Majority()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Amendments.Majority)
}
Amendments_Majority::Amendments_Majority(const Amendments_Majority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_amendment()) {
    amendment_ = new ::org::xrpl::rpc::v1::Amendments_Amendment(*from.amendment_);
  } else {
    amendment_ = nullptr;
  }
  if (from.has_close_time()) {
    close_time_ = new ::org::xrpl::rpc::v1::CloseTime(*from.close_time_);
  } else {
    close_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Amendments.Majority)
}

void Amendments_Majority::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&amendment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_time_) -
      reinterpret_cast<char*>(&amendment_)) + sizeof(close_time_));
}

Amendments_Majority::~Amendments_Majority() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Amendments.Majority)
  SharedDtor();
}

void Amendments_Majority::SharedDtor() {
  if (this != internal_default_instance()) delete amendment_;
  if (this != internal_default_instance()) delete close_time_;
}

void Amendments_Majority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Amendments_Majority& Amendments_Majority::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Amendments_Majority_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void Amendments_Majority::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Amendments.Majority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amendment_ != nullptr) {
    delete amendment_;
  }
  amendment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && close_time_ != nullptr) {
    delete close_time_;
  }
  close_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Amendments_Majority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Amendments.Amendment amendment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_amendment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CloseTime close_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_close_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Amendments_Majority::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Amendments.Majority)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Amendments.Amendment amendment = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amendment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CloseTime close_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_close_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Amendments.Majority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Amendments.Majority)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Amendments_Majority::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Amendments.Majority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amendments.Amendment amendment = 1;
  if (this->has_amendment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::amendment(this), output);
  }

  // .org.xrpl.rpc.v1.CloseTime close_time = 2;
  if (this->has_close_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::close_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Amendments.Majority)
}

::PROTOBUF_NAMESPACE_ID::uint8* Amendments_Majority::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Amendments.Majority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amendments.Amendment amendment = 1;
  if (this->has_amendment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::amendment(this), target);
  }

  // .org.xrpl.rpc.v1.CloseTime close_time = 2;
  if (this->has_close_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::close_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Amendments.Majority)
  return target;
}

size_t Amendments_Majority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Amendments.Majority)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Amendments.Amendment amendment = 1;
  if (this->has_amendment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amendment_);
  }

  // .org.xrpl.rpc.v1.CloseTime close_time = 2;
  if (this->has_close_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *close_time_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Amendments_Majority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Amendments.Majority)
  GOOGLE_DCHECK_NE(&from, this);
  const Amendments_Majority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Amendments_Majority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Amendments.Majority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Amendments.Majority)
    MergeFrom(*source);
  }
}

void Amendments_Majority::MergeFrom(const Amendments_Majority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Amendments.Majority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amendment()) {
    mutable_amendment()->::org::xrpl::rpc::v1::Amendments_Amendment::MergeFrom(from.amendment());
  }
  if (from.has_close_time()) {
    mutable_close_time()->::org::xrpl::rpc::v1::CloseTime::MergeFrom(from.close_time());
  }
}

void Amendments_Majority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Amendments.Majority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Amendments_Majority::CopyFrom(const Amendments_Majority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Amendments.Majority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amendments_Majority::IsInitialized() const {
  return true;
}

void Amendments_Majority::Swap(Amendments_Majority* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Amendments_Majority::InternalSwap(Amendments_Majority* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amendment_, other->amendment_);
  swap(close_time_, other->close_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Amendments_Majority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Amendments::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Amendments_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
}
class Amendments::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Flags& flags(const Amendments* msg);
};

const ::org::xrpl::rpc::v1::Flags&
Amendments::HasBitSetters::flags(const Amendments* msg) {
  return *msg->flags_;
}
void Amendments::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Amendments::kAmendmentsFieldNumber;
const int Amendments::kMajoritiesFieldNumber;
const int Amendments::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Amendments::Amendments()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Amendments)
}
Amendments::Amendments(const Amendments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      amendments_(from.amendments_),
      majorities_(from.majorities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Amendments)
}

void Amendments::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  flags_ = nullptr;
}

Amendments::~Amendments() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Amendments)
  SharedDtor();
}

void Amendments::SharedDtor() {
  if (this != internal_default_instance()) delete flags_;
}

void Amendments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Amendments& Amendments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Amendments_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void Amendments::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Amendments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amendments_.Clear();
  majorities_.Clear();
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Amendments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.Amendments.Amendment amendments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_amendments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.Amendments.Majority majorities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_majorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Amendments::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Amendments)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.xrpl.rpc.v1.Amendments.Amendment amendments = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_amendments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.Amendments.Majority majorities = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_majorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Amendments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Amendments)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Amendments::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Amendments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Amendments.Amendment amendments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->amendments_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->amendments(static_cast<int>(i)),
      output);
  }

  // repeated .org.xrpl.rpc.v1.Amendments.Majority majorities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->majorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->majorities(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::flags(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Amendments)
}

::PROTOBUF_NAMESPACE_ID::uint8* Amendments::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Amendments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Amendments.Amendment amendments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->amendments_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->amendments(static_cast<int>(i)), target);
  }

  // repeated .org.xrpl.rpc.v1.Amendments.Majority majorities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->majorities_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->majorities(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::flags(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Amendments)
  return target;
}

size_t Amendments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Amendments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Amendments.Amendment amendments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->amendments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->amendments(static_cast<int>(i)));
    }
  }

  // repeated .org.xrpl.rpc.v1.Amendments.Majority majorities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->majorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->majorities(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Amendments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Amendments)
  GOOGLE_DCHECK_NE(&from, this);
  const Amendments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Amendments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Amendments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Amendments)
    MergeFrom(*source);
  }
}

void Amendments::MergeFrom(const Amendments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Amendments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amendments_.MergeFrom(from.amendments_);
  majorities_.MergeFrom(from.majorities_);
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
}

void Amendments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Amendments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Amendments::CopyFrom(const Amendments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Amendments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amendments::IsInitialized() const {
  return true;
}

void Amendments::Swap(Amendments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Amendments::InternalSwap(Amendments* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&amendments_)->InternalSwap(CastToBase(&other->amendments_));
  CastToBase(&majorities_)->InternalSwap(CastToBase(&other->majorities_));
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Amendments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Check::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->owner_node_ = const_cast< ::org::xrpl::rpc::v1::OwnerNode*>(
      ::org::xrpl::rpc::v1::OwnerNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->send_max_ = const_cast< ::org::xrpl::rpc::v1::SendMax*>(
      ::org::xrpl::rpc::v1::SendMax::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::org::xrpl::rpc::v1::Sequence*>(
      ::org::xrpl::rpc::v1::Sequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->destination_node_ = const_cast< ::org::xrpl::rpc::v1::DestinationNode*>(
      ::org::xrpl::rpc::v1::DestinationNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::org::xrpl::rpc::v1::Expiration*>(
      ::org::xrpl::rpc::v1::Expiration::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->invoice_id_ = const_cast< ::org::xrpl::rpc::v1::InvoiceID*>(
      ::org::xrpl::rpc::v1::InvoiceID::internal_default_instance());
  ::org::xrpl::rpc::v1::_Check_default_instance_._instance.get_mutable()->source_tag_ = const_cast< ::org::xrpl::rpc::v1::SourceTag*>(
      ::org::xrpl::rpc::v1::SourceTag::internal_default_instance());
}
class Check::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const Check* msg);
  static const ::org::xrpl::rpc::v1::Destination& destination(const Check* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const Check* msg);
  static const ::org::xrpl::rpc::v1::OwnerNode& owner_node(const Check* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const Check* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const Check* msg);
  static const ::org::xrpl::rpc::v1::SendMax& send_max(const Check* msg);
  static const ::org::xrpl::rpc::v1::Sequence& sequence(const Check* msg);
  static const ::org::xrpl::rpc::v1::DestinationNode& destination_node(const Check* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const Check* msg);
  static const ::org::xrpl::rpc::v1::Expiration& expiration(const Check* msg);
  static const ::org::xrpl::rpc::v1::InvoiceID& invoice_id(const Check* msg);
  static const ::org::xrpl::rpc::v1::SourceTag& source_tag(const Check* msg);
};

const ::org::xrpl::rpc::v1::Account&
Check::HasBitSetters::account(const Check* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Destination&
Check::HasBitSetters::destination(const Check* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::Flags&
Check::HasBitSetters::flags(const Check* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::OwnerNode&
Check::HasBitSetters::owner_node(const Check* msg) {
  return *msg->owner_node_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
Check::HasBitSetters::previous_transaction_id(const Check* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
Check::HasBitSetters::previous_transaction_ledger_sequence(const Check* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::SendMax&
Check::HasBitSetters::send_max(const Check* msg) {
  return *msg->send_max_;
}
const ::org::xrpl::rpc::v1::Sequence&
Check::HasBitSetters::sequence(const Check* msg) {
  return *msg->sequence_;
}
const ::org::xrpl::rpc::v1::DestinationNode&
Check::HasBitSetters::destination_node(const Check* msg) {
  return *msg->destination_node_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
Check::HasBitSetters::destination_tag(const Check* msg) {
  return *msg->destination_tag_;
}
const ::org::xrpl::rpc::v1::Expiration&
Check::HasBitSetters::expiration(const Check* msg) {
  return *msg->expiration_;
}
const ::org::xrpl::rpc::v1::InvoiceID&
Check::HasBitSetters::invoice_id(const Check* msg) {
  return *msg->invoice_id_;
}
const ::org::xrpl::rpc::v1::SourceTag&
Check::HasBitSetters::source_tag(const Check* msg) {
  return *msg->source_tag_;
}
void Check::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void Check::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void Check::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void Check::clear_owner_node() {
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
}
void Check::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void Check::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
void Check::clear_send_max() {
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
}
void Check::clear_sequence() {
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
}
void Check::clear_destination_node() {
  if (GetArenaNoVirtual() == nullptr && destination_node_ != nullptr) {
    delete destination_node_;
  }
  destination_node_ = nullptr;
}
void Check::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
void Check::clear_expiration() {
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
void Check::clear_invoice_id() {
  if (GetArenaNoVirtual() == nullptr && invoice_id_ != nullptr) {
    delete invoice_id_;
  }
  invoice_id_ = nullptr;
}
void Check::clear_source_tag() {
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Check::kAccountFieldNumber;
const int Check::kDestinationFieldNumber;
const int Check::kFlagsFieldNumber;
const int Check::kOwnerNodeFieldNumber;
const int Check::kPreviousTransactionIdFieldNumber;
const int Check::kPreviousTransactionLedgerSequenceFieldNumber;
const int Check::kSendMaxFieldNumber;
const int Check::kSequenceFieldNumber;
const int Check::kDestinationNodeFieldNumber;
const int Check::kDestinationTagFieldNumber;
const int Check::kExpirationFieldNumber;
const int Check::kInvoiceIdFieldNumber;
const int Check::kSourceTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Check::Check()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Check)
}
Check::Check(const Check& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_owner_node()) {
    owner_node_ = new ::org::xrpl::rpc::v1::OwnerNode(*from.owner_node_);
  } else {
    owner_node_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  if (from.has_send_max()) {
    send_max_ = new ::org::xrpl::rpc::v1::SendMax(*from.send_max_);
  } else {
    send_max_ = nullptr;
  }
  if (from.has_sequence()) {
    sequence_ = new ::org::xrpl::rpc::v1::Sequence(*from.sequence_);
  } else {
    sequence_ = nullptr;
  }
  if (from.has_destination_node()) {
    destination_node_ = new ::org::xrpl::rpc::v1::DestinationNode(*from.destination_node_);
  } else {
    destination_node_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  if (from.has_expiration()) {
    expiration_ = new ::org::xrpl::rpc::v1::Expiration(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  if (from.has_invoice_id()) {
    invoice_id_ = new ::org::xrpl::rpc::v1::InvoiceID(*from.invoice_id_);
  } else {
    invoice_id_ = nullptr;
  }
  if (from.has_source_tag()) {
    source_tag_ = new ::org::xrpl::rpc::v1::SourceTag(*from.source_tag_);
  } else {
    source_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Check)
}

void Check::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_tag_) -
      reinterpret_cast<char*>(&account_)) + sizeof(source_tag_));
}

Check::~Check() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Check)
  SharedDtor();
}

void Check::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete owner_node_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
  if (this != internal_default_instance()) delete send_max_;
  if (this != internal_default_instance()) delete sequence_;
  if (this != internal_default_instance()) delete destination_node_;
  if (this != internal_default_instance()) delete destination_tag_;
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete invoice_id_;
  if (this != internal_default_instance()) delete source_tag_;
}

void Check::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Check& Check::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Check_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void Check::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Check)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_node_ != nullptr) {
    delete destination_node_;
  }
  destination_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && invoice_id_ != nullptr) {
    delete invoice_id_;
  }
  invoice_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Check::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_owner_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SendMax send_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_send_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Sequence sequence = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationNode destination_node = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_destination_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Expiration expiration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_expiration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.InvoiceID invoice_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_invoice_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_source_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Check::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Check)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SendMax send_max = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Sequence sequence = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationNode destination_node = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Expiration expiration = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.InvoiceID invoice_id = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_invoice_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Check)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Check)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Check::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Check)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::owner_node(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 7;
  if (this->has_send_max()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::send_max(this), output);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 8;
  if (this->has_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::sequence(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 9;
  if (this->has_destination_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::destination_node(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 10;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::destination_tag(this), output);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 11;
  if (this->has_expiration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::expiration(this), output);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 12;
  if (this->has_invoice_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::invoice_id(this), output);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
  if (this->has_source_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::source_tag(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Check)
}

::PROTOBUF_NAMESPACE_ID::uint8* Check::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Check)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::owner_node(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 7;
  if (this->has_send_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::send_max(this), target);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 8;
  if (this->has_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::sequence(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 9;
  if (this->has_destination_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::destination_node(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 10;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::destination_tag(this), target);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 11;
  if (this->has_expiration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::expiration(this), target);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 12;
  if (this->has_invoice_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::invoice_id(this), target);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
  if (this->has_source_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::source_tag(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Check)
  return target;
}

size_t Check::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Check)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_node_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.SendMax send_max = 7;
  if (this->has_send_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_max_);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 8;
  if (this->has_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequence_);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 9;
  if (this->has_destination_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_node_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 10;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 11;
  if (this->has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  // .org.xrpl.rpc.v1.InvoiceID invoice_id = 12;
  if (this->has_invoice_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_id_);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
  if (this->has_source_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_tag_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Check::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Check)
  GOOGLE_DCHECK_NE(&from, this);
  const Check* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Check>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Check)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Check)
    MergeFrom(*source);
  }
}

void Check::MergeFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Check)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_owner_node()) {
    mutable_owner_node()->::org::xrpl::rpc::v1::OwnerNode::MergeFrom(from.owner_node());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
  if (from.has_send_max()) {
    mutable_send_max()->::org::xrpl::rpc::v1::SendMax::MergeFrom(from.send_max());
  }
  if (from.has_sequence()) {
    mutable_sequence()->::org::xrpl::rpc::v1::Sequence::MergeFrom(from.sequence());
  }
  if (from.has_destination_node()) {
    mutable_destination_node()->::org::xrpl::rpc::v1::DestinationNode::MergeFrom(from.destination_node());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::org::xrpl::rpc::v1::Expiration::MergeFrom(from.expiration());
  }
  if (from.has_invoice_id()) {
    mutable_invoice_id()->::org::xrpl::rpc::v1::InvoiceID::MergeFrom(from.invoice_id());
  }
  if (from.has_source_tag()) {
    mutable_source_tag()->::org::xrpl::rpc::v1::SourceTag::MergeFrom(from.source_tag());
  }
}

void Check::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Check)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Check::CopyFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Check)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Check::IsInitialized() const {
  return true;
}

void Check::Swap(Check* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Check::InternalSwap(Check* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(destination_, other->destination_);
  swap(flags_, other->flags_);
  swap(owner_node_, other->owner_node_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
  swap(send_max_, other->send_max_);
  swap(sequence_, other->sequence_);
  swap(destination_node_, other->destination_node_);
  swap(destination_tag_, other->destination_tag_);
  swap(expiration_, other->expiration_);
  swap(invoice_id_, other->invoice_id_);
  swap(source_tag_, other->source_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Check::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepositPreauthObject::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_._instance.get_mutable()->authorize_ = const_cast< ::org::xrpl::rpc::v1::Authorize*>(
      ::org::xrpl::rpc::v1::Authorize::internal_default_instance());
  ::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_._instance.get_mutable()->owner_node_ = const_cast< ::org::xrpl::rpc::v1::OwnerNode*>(
      ::org::xrpl::rpc::v1::OwnerNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_DepositPreauthObject_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
}
class DepositPreauthObject::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const DepositPreauthObject* msg);
  static const ::org::xrpl::rpc::v1::Authorize& authorize(const DepositPreauthObject* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const DepositPreauthObject* msg);
  static const ::org::xrpl::rpc::v1::OwnerNode& owner_node(const DepositPreauthObject* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const DepositPreauthObject* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const DepositPreauthObject* msg);
};

const ::org::xrpl::rpc::v1::Account&
DepositPreauthObject::HasBitSetters::account(const DepositPreauthObject* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Authorize&
DepositPreauthObject::HasBitSetters::authorize(const DepositPreauthObject* msg) {
  return *msg->authorize_;
}
const ::org::xrpl::rpc::v1::Flags&
DepositPreauthObject::HasBitSetters::flags(const DepositPreauthObject* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::OwnerNode&
DepositPreauthObject::HasBitSetters::owner_node(const DepositPreauthObject* msg) {
  return *msg->owner_node_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
DepositPreauthObject::HasBitSetters::previous_transaction_id(const DepositPreauthObject* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
DepositPreauthObject::HasBitSetters::previous_transaction_ledger_sequence(const DepositPreauthObject* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
void DepositPreauthObject::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void DepositPreauthObject::clear_authorize() {
  if (GetArenaNoVirtual() == nullptr && authorize_ != nullptr) {
    delete authorize_;
  }
  authorize_ = nullptr;
}
void DepositPreauthObject::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void DepositPreauthObject::clear_owner_node() {
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
}
void DepositPreauthObject::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void DepositPreauthObject::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepositPreauthObject::kAccountFieldNumber;
const int DepositPreauthObject::kAuthorizeFieldNumber;
const int DepositPreauthObject::kFlagsFieldNumber;
const int DepositPreauthObject::kOwnerNodeFieldNumber;
const int DepositPreauthObject::kPreviousTransactionIdFieldNumber;
const int DepositPreauthObject::kPreviousTransactionLedgerSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepositPreauthObject::DepositPreauthObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.DepositPreauthObject)
}
DepositPreauthObject::DepositPreauthObject(const DepositPreauthObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_authorize()) {
    authorize_ = new ::org::xrpl::rpc::v1::Authorize(*from.authorize_);
  } else {
    authorize_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_owner_node()) {
    owner_node_ = new ::org::xrpl::rpc::v1::OwnerNode(*from.owner_node_);
  } else {
    owner_node_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.DepositPreauthObject)
}

void DepositPreauthObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_transaction_ledger_sequence_) -
      reinterpret_cast<char*>(&account_)) + sizeof(previous_transaction_ledger_sequence_));
}

DepositPreauthObject::~DepositPreauthObject() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.DepositPreauthObject)
  SharedDtor();
}

void DepositPreauthObject::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete authorize_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete owner_node_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
}

void DepositPreauthObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositPreauthObject& DepositPreauthObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositPreauthObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void DepositPreauthObject::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.DepositPreauthObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && authorize_ != nullptr) {
    delete authorize_;
  }
  authorize_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DepositPreauthObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Authorize authorize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_authorize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_owner_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DepositPreauthObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.DepositPreauthObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Authorize authorize = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authorize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.DepositPreauthObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.DepositPreauthObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DepositPreauthObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.DepositPreauthObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.Authorize authorize = 2;
  if (this->has_authorize()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::authorize(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::owner_node(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.DepositPreauthObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositPreauthObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.DepositPreauthObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.Authorize authorize = 2;
  if (this->has_authorize()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::authorize(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::owner_node(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.DepositPreauthObject)
  return target;
}

size_t DepositPreauthObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.DepositPreauthObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Authorize authorize = 2;
  if (this->has_authorize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *authorize_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_node_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 5;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 6;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositPreauthObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.DepositPreauthObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositPreauthObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositPreauthObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.DepositPreauthObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.DepositPreauthObject)
    MergeFrom(*source);
  }
}

void DepositPreauthObject::MergeFrom(const DepositPreauthObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.DepositPreauthObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_authorize()) {
    mutable_authorize()->::org::xrpl::rpc::v1::Authorize::MergeFrom(from.authorize());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_owner_node()) {
    mutable_owner_node()->::org::xrpl::rpc::v1::OwnerNode::MergeFrom(from.owner_node());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
}

void DepositPreauthObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.DepositPreauthObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositPreauthObject::CopyFrom(const DepositPreauthObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.DepositPreauthObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositPreauthObject::IsInitialized() const {
  return true;
}

void DepositPreauthObject::Swap(DepositPreauthObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepositPreauthObject::InternalSwap(DepositPreauthObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(authorize_, other->authorize_);
  swap(flags_, other->flags_);
  swap(owner_node_, other->owner_node_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositPreauthObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectoryNode::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->root_index_ = const_cast< ::org::xrpl::rpc::v1::RootIndex*>(
      ::org::xrpl::rpc::v1::RootIndex::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->index_next_ = const_cast< ::org::xrpl::rpc::v1::IndexNext*>(
      ::org::xrpl::rpc::v1::IndexNext::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->index_previous_ = const_cast< ::org::xrpl::rpc::v1::IndexPrevious*>(
      ::org::xrpl::rpc::v1::IndexPrevious::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->owner_ = const_cast< ::org::xrpl::rpc::v1::Owner*>(
      ::org::xrpl::rpc::v1::Owner::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->taker_pays_currency_ = const_cast< ::org::xrpl::rpc::v1::TakerPaysCurrency*>(
      ::org::xrpl::rpc::v1::TakerPaysCurrency::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->taker_pays_issuer_ = const_cast< ::org::xrpl::rpc::v1::TakerPaysIssuer*>(
      ::org::xrpl::rpc::v1::TakerPaysIssuer::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->taker_gets_currency_ = const_cast< ::org::xrpl::rpc::v1::TakerGetsCurreny*>(
      ::org::xrpl::rpc::v1::TakerGetsCurreny::internal_default_instance());
  ::org::xrpl::rpc::v1::_DirectoryNode_default_instance_._instance.get_mutable()->taker_gets_issuer_ = const_cast< ::org::xrpl::rpc::v1::TakerGetsIssuer*>(
      ::org::xrpl::rpc::v1::TakerGetsIssuer::internal_default_instance());
}
class DirectoryNode::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Flags& flags(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::RootIndex& root_index(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::IndexNext& index_next(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::IndexPrevious& index_previous(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::Owner& owner(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::TakerPaysCurrency& taker_pays_currency(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::TakerPaysIssuer& taker_pays_issuer(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::TakerGetsCurreny& taker_gets_currency(const DirectoryNode* msg);
  static const ::org::xrpl::rpc::v1::TakerGetsIssuer& taker_gets_issuer(const DirectoryNode* msg);
};

const ::org::xrpl::rpc::v1::Flags&
DirectoryNode::HasBitSetters::flags(const DirectoryNode* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::RootIndex&
DirectoryNode::HasBitSetters::root_index(const DirectoryNode* msg) {
  return *msg->root_index_;
}
const ::org::xrpl::rpc::v1::IndexNext&
DirectoryNode::HasBitSetters::index_next(const DirectoryNode* msg) {
  return *msg->index_next_;
}
const ::org::xrpl::rpc::v1::IndexPrevious&
DirectoryNode::HasBitSetters::index_previous(const DirectoryNode* msg) {
  return *msg->index_previous_;
}
const ::org::xrpl::rpc::v1::Owner&
DirectoryNode::HasBitSetters::owner(const DirectoryNode* msg) {
  return *msg->owner_;
}
const ::org::xrpl::rpc::v1::TakerPaysCurrency&
DirectoryNode::HasBitSetters::taker_pays_currency(const DirectoryNode* msg) {
  return *msg->taker_pays_currency_;
}
const ::org::xrpl::rpc::v1::TakerPaysIssuer&
DirectoryNode::HasBitSetters::taker_pays_issuer(const DirectoryNode* msg) {
  return *msg->taker_pays_issuer_;
}
const ::org::xrpl::rpc::v1::TakerGetsCurreny&
DirectoryNode::HasBitSetters::taker_gets_currency(const DirectoryNode* msg) {
  return *msg->taker_gets_currency_;
}
const ::org::xrpl::rpc::v1::TakerGetsIssuer&
DirectoryNode::HasBitSetters::taker_gets_issuer(const DirectoryNode* msg) {
  return *msg->taker_gets_issuer_;
}
void DirectoryNode::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void DirectoryNode::clear_root_index() {
  if (GetArenaNoVirtual() == nullptr && root_index_ != nullptr) {
    delete root_index_;
  }
  root_index_ = nullptr;
}
void DirectoryNode::clear_indexes() {
  indexes_.Clear();
}
void DirectoryNode::clear_index_next() {
  if (GetArenaNoVirtual() == nullptr && index_next_ != nullptr) {
    delete index_next_;
  }
  index_next_ = nullptr;
}
void DirectoryNode::clear_index_previous() {
  if (GetArenaNoVirtual() == nullptr && index_previous_ != nullptr) {
    delete index_previous_;
  }
  index_previous_ = nullptr;
}
void DirectoryNode::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void DirectoryNode::clear_taker_pays_currency() {
  if (GetArenaNoVirtual() == nullptr && taker_pays_currency_ != nullptr) {
    delete taker_pays_currency_;
  }
  taker_pays_currency_ = nullptr;
}
void DirectoryNode::clear_taker_pays_issuer() {
  if (GetArenaNoVirtual() == nullptr && taker_pays_issuer_ != nullptr) {
    delete taker_pays_issuer_;
  }
  taker_pays_issuer_ = nullptr;
}
void DirectoryNode::clear_taker_gets_currency() {
  if (GetArenaNoVirtual() == nullptr && taker_gets_currency_ != nullptr) {
    delete taker_gets_currency_;
  }
  taker_gets_currency_ = nullptr;
}
void DirectoryNode::clear_taker_gets_issuer() {
  if (GetArenaNoVirtual() == nullptr && taker_gets_issuer_ != nullptr) {
    delete taker_gets_issuer_;
  }
  taker_gets_issuer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryNode::kFlagsFieldNumber;
const int DirectoryNode::kRootIndexFieldNumber;
const int DirectoryNode::kIndexesFieldNumber;
const int DirectoryNode::kIndexNextFieldNumber;
const int DirectoryNode::kIndexPreviousFieldNumber;
const int DirectoryNode::kOwnerFieldNumber;
const int DirectoryNode::kTakerPaysCurrencyFieldNumber;
const int DirectoryNode::kTakerPaysIssuerFieldNumber;
const int DirectoryNode::kTakerGetsCurrencyFieldNumber;
const int DirectoryNode::kTakerGetsIssuerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryNode::DirectoryNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.DirectoryNode)
}
DirectoryNode::DirectoryNode(const DirectoryNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indexes_(from.indexes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_root_index()) {
    root_index_ = new ::org::xrpl::rpc::v1::RootIndex(*from.root_index_);
  } else {
    root_index_ = nullptr;
  }
  if (from.has_index_next()) {
    index_next_ = new ::org::xrpl::rpc::v1::IndexNext(*from.index_next_);
  } else {
    index_next_ = nullptr;
  }
  if (from.has_index_previous()) {
    index_previous_ = new ::org::xrpl::rpc::v1::IndexPrevious(*from.index_previous_);
  } else {
    index_previous_ = nullptr;
  }
  if (from.has_owner()) {
    owner_ = new ::org::xrpl::rpc::v1::Owner(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_taker_pays_currency()) {
    taker_pays_currency_ = new ::org::xrpl::rpc::v1::TakerPaysCurrency(*from.taker_pays_currency_);
  } else {
    taker_pays_currency_ = nullptr;
  }
  if (from.has_taker_pays_issuer()) {
    taker_pays_issuer_ = new ::org::xrpl::rpc::v1::TakerPaysIssuer(*from.taker_pays_issuer_);
  } else {
    taker_pays_issuer_ = nullptr;
  }
  if (from.has_taker_gets_currency()) {
    taker_gets_currency_ = new ::org::xrpl::rpc::v1::TakerGetsCurreny(*from.taker_gets_currency_);
  } else {
    taker_gets_currency_ = nullptr;
  }
  if (from.has_taker_gets_issuer()) {
    taker_gets_issuer_ = new ::org::xrpl::rpc::v1::TakerGetsIssuer(*from.taker_gets_issuer_);
  } else {
    taker_gets_issuer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.DirectoryNode)
}

void DirectoryNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taker_gets_issuer_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(taker_gets_issuer_));
}

DirectoryNode::~DirectoryNode() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.DirectoryNode)
  SharedDtor();
}

void DirectoryNode::SharedDtor() {
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete root_index_;
  if (this != internal_default_instance()) delete index_next_;
  if (this != internal_default_instance()) delete index_previous_;
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete taker_pays_currency_;
  if (this != internal_default_instance()) delete taker_pays_issuer_;
  if (this != internal_default_instance()) delete taker_gets_currency_;
  if (this != internal_default_instance()) delete taker_gets_issuer_;
}

void DirectoryNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectoryNode& DirectoryNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectoryNode_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void DirectoryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.DirectoryNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indexes_.Clear();
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && root_index_ != nullptr) {
    delete root_index_;
  }
  root_index_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && index_next_ != nullptr) {
    delete index_next_;
  }
  index_next_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && index_previous_ != nullptr) {
    delete index_previous_;
  }
  index_previous_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_pays_currency_ != nullptr) {
    delete taker_pays_currency_;
  }
  taker_pays_currency_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_pays_issuer_ != nullptr) {
    delete taker_pays_issuer_;
  }
  taker_pays_issuer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_gets_currency_ != nullptr) {
    delete taker_gets_currency_;
  }
  taker_gets_currency_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_gets_issuer_ != nullptr) {
    delete taker_gets_issuer_;
  }
  taker_gets_issuer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DirectoryNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Flags flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.RootIndex root_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_root_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.Index indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.IndexNext index_next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_index_next(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.IndexPrevious index_previous = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_index_previous(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Owner owner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerPaysCurrency taker_pays_currency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_taker_pays_currency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerPaysIssuer taker_pays_issuer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_taker_pays_issuer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerGetsCurreny taker_gets_currency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_taker_gets_currency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerGetsIssuer taker_gets_issuer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_taker_gets_issuer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DirectoryNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.DirectoryNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Flags flags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.RootIndex root_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_root_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.Index indexes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_indexes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.IndexNext index_next = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_index_next()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.IndexPrevious index_previous = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_index_previous()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Owner owner = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerPaysCurrency taker_pays_currency = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_pays_currency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerPaysIssuer taker_pays_issuer = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_pays_issuer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerGetsCurreny taker_gets_currency = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_gets_currency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerGetsIssuer taker_gets_issuer = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_gets_issuer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.DirectoryNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.DirectoryNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DirectoryNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.DirectoryNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.RootIndex root_index = 2;
  if (this->has_root_index()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::root_index(this), output);
  }

  // repeated .org.xrpl.rpc.v1.Index indexes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indexes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->indexes(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.IndexNext index_next = 4;
  if (this->has_index_next()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::index_next(this), output);
  }

  // .org.xrpl.rpc.v1.IndexPrevious index_previous = 5;
  if (this->has_index_previous()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::index_previous(this), output);
  }

  // .org.xrpl.rpc.v1.Owner owner = 6;
  if (this->has_owner()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::owner(this), output);
  }

  // .org.xrpl.rpc.v1.TakerPaysCurrency taker_pays_currency = 7;
  if (this->has_taker_pays_currency()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::taker_pays_currency(this), output);
  }

  // .org.xrpl.rpc.v1.TakerPaysIssuer taker_pays_issuer = 8;
  if (this->has_taker_pays_issuer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::taker_pays_issuer(this), output);
  }

  // .org.xrpl.rpc.v1.TakerGetsCurreny taker_gets_currency = 9;
  if (this->has_taker_gets_currency()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::taker_gets_currency(this), output);
  }

  // .org.xrpl.rpc.v1.TakerGetsIssuer taker_gets_issuer = 10;
  if (this->has_taker_gets_issuer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::taker_gets_issuer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.DirectoryNode)
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectoryNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.DirectoryNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.RootIndex root_index = 2;
  if (this->has_root_index()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::root_index(this), target);
  }

  // repeated .org.xrpl.rpc.v1.Index indexes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indexes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->indexes(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.IndexNext index_next = 4;
  if (this->has_index_next()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::index_next(this), target);
  }

  // .org.xrpl.rpc.v1.IndexPrevious index_previous = 5;
  if (this->has_index_previous()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::index_previous(this), target);
  }

  // .org.xrpl.rpc.v1.Owner owner = 6;
  if (this->has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::owner(this), target);
  }

  // .org.xrpl.rpc.v1.TakerPaysCurrency taker_pays_currency = 7;
  if (this->has_taker_pays_currency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::taker_pays_currency(this), target);
  }

  // .org.xrpl.rpc.v1.TakerPaysIssuer taker_pays_issuer = 8;
  if (this->has_taker_pays_issuer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::taker_pays_issuer(this), target);
  }

  // .org.xrpl.rpc.v1.TakerGetsCurreny taker_gets_currency = 9;
  if (this->has_taker_gets_currency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::taker_gets_currency(this), target);
  }

  // .org.xrpl.rpc.v1.TakerGetsIssuer taker_gets_issuer = 10;
  if (this->has_taker_gets_issuer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::taker_gets_issuer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.DirectoryNode)
  return target;
}

size_t DirectoryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.DirectoryNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Index indexes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->indexes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->indexes(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.RootIndex root_index = 2;
  if (this->has_root_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_index_);
  }

  // .org.xrpl.rpc.v1.IndexNext index_next = 4;
  if (this->has_index_next()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_next_);
  }

  // .org.xrpl.rpc.v1.IndexPrevious index_previous = 5;
  if (this->has_index_previous()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_previous_);
  }

  // .org.xrpl.rpc.v1.Owner owner = 6;
  if (this->has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .org.xrpl.rpc.v1.TakerPaysCurrency taker_pays_currency = 7;
  if (this->has_taker_pays_currency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_pays_currency_);
  }

  // .org.xrpl.rpc.v1.TakerPaysIssuer taker_pays_issuer = 8;
  if (this->has_taker_pays_issuer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_pays_issuer_);
  }

  // .org.xrpl.rpc.v1.TakerGetsCurreny taker_gets_currency = 9;
  if (this->has_taker_gets_currency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_gets_currency_);
  }

  // .org.xrpl.rpc.v1.TakerGetsIssuer taker_gets_issuer = 10;
  if (this->has_taker_gets_issuer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_gets_issuer_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectoryNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.DirectoryNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectoryNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectoryNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.DirectoryNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.DirectoryNode)
    MergeFrom(*source);
  }
}

void DirectoryNode::MergeFrom(const DirectoryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.DirectoryNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indexes_.MergeFrom(from.indexes_);
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_root_index()) {
    mutable_root_index()->::org::xrpl::rpc::v1::RootIndex::MergeFrom(from.root_index());
  }
  if (from.has_index_next()) {
    mutable_index_next()->::org::xrpl::rpc::v1::IndexNext::MergeFrom(from.index_next());
  }
  if (from.has_index_previous()) {
    mutable_index_previous()->::org::xrpl::rpc::v1::IndexPrevious::MergeFrom(from.index_previous());
  }
  if (from.has_owner()) {
    mutable_owner()->::org::xrpl::rpc::v1::Owner::MergeFrom(from.owner());
  }
  if (from.has_taker_pays_currency()) {
    mutable_taker_pays_currency()->::org::xrpl::rpc::v1::TakerPaysCurrency::MergeFrom(from.taker_pays_currency());
  }
  if (from.has_taker_pays_issuer()) {
    mutable_taker_pays_issuer()->::org::xrpl::rpc::v1::TakerPaysIssuer::MergeFrom(from.taker_pays_issuer());
  }
  if (from.has_taker_gets_currency()) {
    mutable_taker_gets_currency()->::org::xrpl::rpc::v1::TakerGetsCurreny::MergeFrom(from.taker_gets_currency());
  }
  if (from.has_taker_gets_issuer()) {
    mutable_taker_gets_issuer()->::org::xrpl::rpc::v1::TakerGetsIssuer::MergeFrom(from.taker_gets_issuer());
  }
}

void DirectoryNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.DirectoryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryNode::CopyFrom(const DirectoryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.DirectoryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryNode::IsInitialized() const {
  return true;
}

void DirectoryNode::Swap(DirectoryNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryNode::InternalSwap(DirectoryNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&indexes_)->InternalSwap(CastToBase(&other->indexes_));
  swap(flags_, other->flags_);
  swap(root_index_, other->root_index_);
  swap(index_next_, other->index_next_);
  swap(index_previous_, other->index_previous_);
  swap(owner_, other->owner_);
  swap(taker_pays_currency_, other->taker_pays_currency_);
  swap(taker_pays_issuer_, other->taker_pays_issuer_);
  swap(taker_gets_currency_, other->taker_gets_currency_);
  swap(taker_gets_issuer_, other->taker_gets_issuer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Escrow::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->condition_ = const_cast< ::org::xrpl::rpc::v1::Condition*>(
      ::org::xrpl::rpc::v1::Condition::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->cancel_after_ = const_cast< ::org::xrpl::rpc::v1::CancelAfter*>(
      ::org::xrpl::rpc::v1::CancelAfter::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->finish_after_ = const_cast< ::org::xrpl::rpc::v1::FinishAfter*>(
      ::org::xrpl::rpc::v1::FinishAfter::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->source_tag_ = const_cast< ::org::xrpl::rpc::v1::SourceTag*>(
      ::org::xrpl::rpc::v1::SourceTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->owner_node_ = const_cast< ::org::xrpl::rpc::v1::OwnerNode*>(
      ::org::xrpl::rpc::v1::OwnerNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->destination_node_ = const_cast< ::org::xrpl::rpc::v1::DestinationNode*>(
      ::org::xrpl::rpc::v1::DestinationNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_Escrow_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
}
class Escrow::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::Destination& destination(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::Amount& amount(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::Condition& condition(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::CancelAfter& cancel_after(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::FinishAfter& finish_after(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::SourceTag& source_tag(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::OwnerNode& owner_node(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::DestinationNode& destination_node(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const Escrow* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const Escrow* msg);
};

const ::org::xrpl::rpc::v1::Account&
Escrow::HasBitSetters::account(const Escrow* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Destination&
Escrow::HasBitSetters::destination(const Escrow* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::Amount&
Escrow::HasBitSetters::amount(const Escrow* msg) {
  return *msg->amount_;
}
const ::org::xrpl::rpc::v1::Condition&
Escrow::HasBitSetters::condition(const Escrow* msg) {
  return *msg->condition_;
}
const ::org::xrpl::rpc::v1::CancelAfter&
Escrow::HasBitSetters::cancel_after(const Escrow* msg) {
  return *msg->cancel_after_;
}
const ::org::xrpl::rpc::v1::FinishAfter&
Escrow::HasBitSetters::finish_after(const Escrow* msg) {
  return *msg->finish_after_;
}
const ::org::xrpl::rpc::v1::Flags&
Escrow::HasBitSetters::flags(const Escrow* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::SourceTag&
Escrow::HasBitSetters::source_tag(const Escrow* msg) {
  return *msg->source_tag_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
Escrow::HasBitSetters::destination_tag(const Escrow* msg) {
  return *msg->destination_tag_;
}
const ::org::xrpl::rpc::v1::OwnerNode&
Escrow::HasBitSetters::owner_node(const Escrow* msg) {
  return *msg->owner_node_;
}
const ::org::xrpl::rpc::v1::DestinationNode&
Escrow::HasBitSetters::destination_node(const Escrow* msg) {
  return *msg->destination_node_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
Escrow::HasBitSetters::previous_transaction_id(const Escrow* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
Escrow::HasBitSetters::previous_transaction_ledger_sequence(const Escrow* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
void Escrow::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void Escrow::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void Escrow::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void Escrow::clear_condition() {
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
void Escrow::clear_cancel_after() {
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
}
void Escrow::clear_finish_after() {
  if (GetArenaNoVirtual() == nullptr && finish_after_ != nullptr) {
    delete finish_after_;
  }
  finish_after_ = nullptr;
}
void Escrow::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void Escrow::clear_source_tag() {
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
}
void Escrow::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
void Escrow::clear_owner_node() {
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
}
void Escrow::clear_destination_node() {
  if (GetArenaNoVirtual() == nullptr && destination_node_ != nullptr) {
    delete destination_node_;
  }
  destination_node_ = nullptr;
}
void Escrow::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void Escrow::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Escrow::kAccountFieldNumber;
const int Escrow::kDestinationFieldNumber;
const int Escrow::kAmountFieldNumber;
const int Escrow::kConditionFieldNumber;
const int Escrow::kCancelAfterFieldNumber;
const int Escrow::kFinishAfterFieldNumber;
const int Escrow::kFlagsFieldNumber;
const int Escrow::kSourceTagFieldNumber;
const int Escrow::kDestinationTagFieldNumber;
const int Escrow::kOwnerNodeFieldNumber;
const int Escrow::kDestinationNodeFieldNumber;
const int Escrow::kPreviousTransactionIdFieldNumber;
const int Escrow::kPreviousTransactionLedgerSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Escrow::Escrow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Escrow)
}
Escrow::Escrow(const Escrow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_amount()) {
    amount_ = new ::org::xrpl::rpc::v1::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::org::xrpl::rpc::v1::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_cancel_after()) {
    cancel_after_ = new ::org::xrpl::rpc::v1::CancelAfter(*from.cancel_after_);
  } else {
    cancel_after_ = nullptr;
  }
  if (from.has_finish_after()) {
    finish_after_ = new ::org::xrpl::rpc::v1::FinishAfter(*from.finish_after_);
  } else {
    finish_after_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_source_tag()) {
    source_tag_ = new ::org::xrpl::rpc::v1::SourceTag(*from.source_tag_);
  } else {
    source_tag_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  if (from.has_owner_node()) {
    owner_node_ = new ::org::xrpl::rpc::v1::OwnerNode(*from.owner_node_);
  } else {
    owner_node_ = nullptr;
  }
  if (from.has_destination_node()) {
    destination_node_ = new ::org::xrpl::rpc::v1::DestinationNode(*from.destination_node_);
  } else {
    destination_node_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Escrow)
}

void Escrow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_transaction_ledger_sequence_) -
      reinterpret_cast<char*>(&account_)) + sizeof(previous_transaction_ledger_sequence_));
}

Escrow::~Escrow() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Escrow)
  SharedDtor();
}

void Escrow::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete cancel_after_;
  if (this != internal_default_instance()) delete finish_after_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete source_tag_;
  if (this != internal_default_instance()) delete destination_tag_;
  if (this != internal_default_instance()) delete owner_node_;
  if (this != internal_default_instance()) delete destination_node_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
}

void Escrow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Escrow& Escrow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Escrow_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void Escrow::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Escrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && finish_after_ != nullptr) {
    delete finish_after_;
  }
  finish_after_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_node_ != nullptr) {
    delete destination_node_;
  }
  destination_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Escrow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Amount amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cancel_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.FinishAfter finish_after = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_finish_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SourceTag source_tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_source_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerNode owner_node = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_owner_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationNode destination_node = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_destination_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Escrow::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Escrow)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Amount amount = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cancel_after()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.FinishAfter finish_after = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_finish_after()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SourceTag source_tag = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerNode owner_node = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationNode destination_node = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Escrow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Escrow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Escrow::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Escrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.Condition condition = 4;
  if (this->has_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::condition(this), output);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
  if (this->has_cancel_after()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::cancel_after(this), output);
  }

  // .org.xrpl.rpc.v1.FinishAfter finish_after = 6;
  if (this->has_finish_after()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::finish_after(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 7;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 8;
  if (this->has_source_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::source_tag(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 9;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::destination_tag(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 10;
  if (this->has_owner_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::owner_node(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 11;
  if (this->has_destination_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::destination_node(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 12;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 13;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Escrow)
}

::PROTOBUF_NAMESPACE_ID::uint8* Escrow::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Escrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.Condition condition = 4;
  if (this->has_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::condition(this), target);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
  if (this->has_cancel_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::cancel_after(this), target);
  }

  // .org.xrpl.rpc.v1.FinishAfter finish_after = 6;
  if (this->has_finish_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::finish_after(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 7;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 8;
  if (this->has_source_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::source_tag(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 9;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::destination_tag(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 10;
  if (this->has_owner_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::owner_node(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 11;
  if (this->has_destination_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::destination_node(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 12;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 13;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Escrow)
  return target;
}

size_t Escrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Escrow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .org.xrpl.rpc.v1.Condition condition = 4;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 5;
  if (this->has_cancel_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cancel_after_);
  }

  // .org.xrpl.rpc.v1.FinishAfter finish_after = 6;
  if (this->has_finish_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *finish_after_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 7;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 8;
  if (this->has_source_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_tag_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 9;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 10;
  if (this->has_owner_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_node_);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 11;
  if (this->has_destination_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_node_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 12;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 13;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Escrow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Escrow)
  GOOGLE_DCHECK_NE(&from, this);
  const Escrow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Escrow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Escrow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Escrow)
    MergeFrom(*source);
  }
}

void Escrow::MergeFrom(const Escrow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Escrow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_amount()) {
    mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
  }
  if (from.has_condition()) {
    mutable_condition()->::org::xrpl::rpc::v1::Condition::MergeFrom(from.condition());
  }
  if (from.has_cancel_after()) {
    mutable_cancel_after()->::org::xrpl::rpc::v1::CancelAfter::MergeFrom(from.cancel_after());
  }
  if (from.has_finish_after()) {
    mutable_finish_after()->::org::xrpl::rpc::v1::FinishAfter::MergeFrom(from.finish_after());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_source_tag()) {
    mutable_source_tag()->::org::xrpl::rpc::v1::SourceTag::MergeFrom(from.source_tag());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
  if (from.has_owner_node()) {
    mutable_owner_node()->::org::xrpl::rpc::v1::OwnerNode::MergeFrom(from.owner_node());
  }
  if (from.has_destination_node()) {
    mutable_destination_node()->::org::xrpl::rpc::v1::DestinationNode::MergeFrom(from.destination_node());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
}

void Escrow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Escrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Escrow::CopyFrom(const Escrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Escrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Escrow::IsInitialized() const {
  return true;
}

void Escrow::Swap(Escrow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Escrow::InternalSwap(Escrow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(destination_, other->destination_);
  swap(amount_, other->amount_);
  swap(condition_, other->condition_);
  swap(cancel_after_, other->cancel_after_);
  swap(finish_after_, other->finish_after_);
  swap(flags_, other->flags_);
  swap(source_tag_, other->source_tag_);
  swap(destination_tag_, other->destination_tag_);
  swap(owner_node_, other->owner_node_);
  swap(destination_node_, other->destination_node_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Escrow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeeSettings::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_FeeSettings_default_instance_._instance.get_mutable()->base_fee_ = const_cast< ::org::xrpl::rpc::v1::BaseFee*>(
      ::org::xrpl::rpc::v1::BaseFee::internal_default_instance());
  ::org::xrpl::rpc::v1::_FeeSettings_default_instance_._instance.get_mutable()->reference_fee_units_ = const_cast< ::org::xrpl::rpc::v1::ReferenceFeeUnits*>(
      ::org::xrpl::rpc::v1::ReferenceFeeUnits::internal_default_instance());
  ::org::xrpl::rpc::v1::_FeeSettings_default_instance_._instance.get_mutable()->reserve_base_ = const_cast< ::org::xrpl::rpc::v1::ReserveBase*>(
      ::org::xrpl::rpc::v1::ReserveBase::internal_default_instance());
  ::org::xrpl::rpc::v1::_FeeSettings_default_instance_._instance.get_mutable()->reserve_increment_ = const_cast< ::org::xrpl::rpc::v1::ReserveIncrement*>(
      ::org::xrpl::rpc::v1::ReserveIncrement::internal_default_instance());
  ::org::xrpl::rpc::v1::_FeeSettings_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
}
class FeeSettings::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::BaseFee& base_fee(const FeeSettings* msg);
  static const ::org::xrpl::rpc::v1::ReferenceFeeUnits& reference_fee_units(const FeeSettings* msg);
  static const ::org::xrpl::rpc::v1::ReserveBase& reserve_base(const FeeSettings* msg);
  static const ::org::xrpl::rpc::v1::ReserveIncrement& reserve_increment(const FeeSettings* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const FeeSettings* msg);
};

const ::org::xrpl::rpc::v1::BaseFee&
FeeSettings::HasBitSetters::base_fee(const FeeSettings* msg) {
  return *msg->base_fee_;
}
const ::org::xrpl::rpc::v1::ReferenceFeeUnits&
FeeSettings::HasBitSetters::reference_fee_units(const FeeSettings* msg) {
  return *msg->reference_fee_units_;
}
const ::org::xrpl::rpc::v1::ReserveBase&
FeeSettings::HasBitSetters::reserve_base(const FeeSettings* msg) {
  return *msg->reserve_base_;
}
const ::org::xrpl::rpc::v1::ReserveIncrement&
FeeSettings::HasBitSetters::reserve_increment(const FeeSettings* msg) {
  return *msg->reserve_increment_;
}
const ::org::xrpl::rpc::v1::Flags&
FeeSettings::HasBitSetters::flags(const FeeSettings* msg) {
  return *msg->flags_;
}
void FeeSettings::clear_base_fee() {
  if (GetArenaNoVirtual() == nullptr && base_fee_ != nullptr) {
    delete base_fee_;
  }
  base_fee_ = nullptr;
}
void FeeSettings::clear_reference_fee_units() {
  if (GetArenaNoVirtual() == nullptr && reference_fee_units_ != nullptr) {
    delete reference_fee_units_;
  }
  reference_fee_units_ = nullptr;
}
void FeeSettings::clear_reserve_base() {
  if (GetArenaNoVirtual() == nullptr && reserve_base_ != nullptr) {
    delete reserve_base_;
  }
  reserve_base_ = nullptr;
}
void FeeSettings::clear_reserve_increment() {
  if (GetArenaNoVirtual() == nullptr && reserve_increment_ != nullptr) {
    delete reserve_increment_;
  }
  reserve_increment_ = nullptr;
}
void FeeSettings::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeeSettings::kBaseFeeFieldNumber;
const int FeeSettings::kReferenceFeeUnitsFieldNumber;
const int FeeSettings::kReserveBaseFieldNumber;
const int FeeSettings::kReserveIncrementFieldNumber;
const int FeeSettings::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeeSettings::FeeSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.FeeSettings)
}
FeeSettings::FeeSettings(const FeeSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base_fee()) {
    base_fee_ = new ::org::xrpl::rpc::v1::BaseFee(*from.base_fee_);
  } else {
    base_fee_ = nullptr;
  }
  if (from.has_reference_fee_units()) {
    reference_fee_units_ = new ::org::xrpl::rpc::v1::ReferenceFeeUnits(*from.reference_fee_units_);
  } else {
    reference_fee_units_ = nullptr;
  }
  if (from.has_reserve_base()) {
    reserve_base_ = new ::org::xrpl::rpc::v1::ReserveBase(*from.reserve_base_);
  } else {
    reserve_base_ = nullptr;
  }
  if (from.has_reserve_increment()) {
    reserve_increment_ = new ::org::xrpl::rpc::v1::ReserveIncrement(*from.reserve_increment_);
  } else {
    reserve_increment_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.FeeSettings)
}

void FeeSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&base_fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&base_fee_)) + sizeof(flags_));
}

FeeSettings::~FeeSettings() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.FeeSettings)
  SharedDtor();
}

void FeeSettings::SharedDtor() {
  if (this != internal_default_instance()) delete base_fee_;
  if (this != internal_default_instance()) delete reference_fee_units_;
  if (this != internal_default_instance()) delete reserve_base_;
  if (this != internal_default_instance()) delete reserve_increment_;
  if (this != internal_default_instance()) delete flags_;
}

void FeeSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeSettings& FeeSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeSettings_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void FeeSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.FeeSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && base_fee_ != nullptr) {
    delete base_fee_;
  }
  base_fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reference_fee_units_ != nullptr) {
    delete reference_fee_units_;
  }
  reference_fee_units_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reserve_base_ != nullptr) {
    delete reserve_base_;
  }
  reserve_base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reserve_increment_ != nullptr) {
    delete reserve_increment_;
  }
  reserve_increment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeeSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.BaseFee base_fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.ReferenceFeeUnits reference_fee_units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_reference_fee_units(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.ReserveBase reserve_base = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_reserve_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.ReserveIncrement reserve_increment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_reserve_increment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeeSettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.FeeSettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.BaseFee base_fee = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.ReferenceFeeUnits reference_fee_units = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_fee_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.ReserveBase reserve_base = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reserve_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.ReserveIncrement reserve_increment = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reserve_increment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.FeeSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.FeeSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeeSettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.FeeSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.BaseFee base_fee = 1;
  if (this->has_base_fee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::base_fee(this), output);
  }

  // .org.xrpl.rpc.v1.ReferenceFeeUnits reference_fee_units = 2;
  if (this->has_reference_fee_units()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::reference_fee_units(this), output);
  }

  // .org.xrpl.rpc.v1.ReserveBase reserve_base = 3;
  if (this->has_reserve_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::reserve_base(this), output);
  }

  // .org.xrpl.rpc.v1.ReserveIncrement reserve_increment = 4;
  if (this->has_reserve_increment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::reserve_increment(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 5;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::flags(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.FeeSettings)
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeSettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.FeeSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.BaseFee base_fee = 1;
  if (this->has_base_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::base_fee(this), target);
  }

  // .org.xrpl.rpc.v1.ReferenceFeeUnits reference_fee_units = 2;
  if (this->has_reference_fee_units()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::reference_fee_units(this), target);
  }

  // .org.xrpl.rpc.v1.ReserveBase reserve_base = 3;
  if (this->has_reserve_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::reserve_base(this), target);
  }

  // .org.xrpl.rpc.v1.ReserveIncrement reserve_increment = 4;
  if (this->has_reserve_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::reserve_increment(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 5;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::flags(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.FeeSettings)
  return target;
}

size_t FeeSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.FeeSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.BaseFee base_fee = 1;
  if (this->has_base_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_fee_);
  }

  // .org.xrpl.rpc.v1.ReferenceFeeUnits reference_fee_units = 2;
  if (this->has_reference_fee_units()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_fee_units_);
  }

  // .org.xrpl.rpc.v1.ReserveBase reserve_base = 3;
  if (this->has_reserve_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reserve_base_);
  }

  // .org.xrpl.rpc.v1.ReserveIncrement reserve_increment = 4;
  if (this->has_reserve_increment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reserve_increment_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 5;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.FeeSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.FeeSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.FeeSettings)
    MergeFrom(*source);
  }
}

void FeeSettings::MergeFrom(const FeeSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.FeeSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_fee()) {
    mutable_base_fee()->::org::xrpl::rpc::v1::BaseFee::MergeFrom(from.base_fee());
  }
  if (from.has_reference_fee_units()) {
    mutable_reference_fee_units()->::org::xrpl::rpc::v1::ReferenceFeeUnits::MergeFrom(from.reference_fee_units());
  }
  if (from.has_reserve_base()) {
    mutable_reserve_base()->::org::xrpl::rpc::v1::ReserveBase::MergeFrom(from.reserve_base());
  }
  if (from.has_reserve_increment()) {
    mutable_reserve_increment()->::org::xrpl::rpc::v1::ReserveIncrement::MergeFrom(from.reserve_increment());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
}

void FeeSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.FeeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeSettings::CopyFrom(const FeeSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.FeeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeSettings::IsInitialized() const {
  return true;
}

void FeeSettings::Swap(FeeSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeeSettings::InternalSwap(FeeSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_fee_, other->base_fee_);
  swap(reference_fee_units_, other->reference_fee_units_);
  swap(reserve_base_, other->reserve_base_);
  swap(reserve_increment_, other->reserve_increment_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LedgerHashes::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_LedgerHashes_default_instance_._instance.get_mutable()->last_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::LastLedgerSequence*>(
      ::org::xrpl::rpc::v1::LastLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_LedgerHashes_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
}
class LedgerHashes::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::LastLedgerSequence& last_ledger_sequence(const LedgerHashes* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const LedgerHashes* msg);
};

const ::org::xrpl::rpc::v1::LastLedgerSequence&
LedgerHashes::HasBitSetters::last_ledger_sequence(const LedgerHashes* msg) {
  return *msg->last_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::Flags&
LedgerHashes::HasBitSetters::flags(const LedgerHashes* msg) {
  return *msg->flags_;
}
void LedgerHashes::clear_last_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && last_ledger_sequence_ != nullptr) {
    delete last_ledger_sequence_;
  }
  last_ledger_sequence_ = nullptr;
}
void LedgerHashes::clear_hashes() {
  hashes_.Clear();
}
void LedgerHashes::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerHashes::kLastLedgerSequenceFieldNumber;
const int LedgerHashes::kHashesFieldNumber;
const int LedgerHashes::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerHashes::LedgerHashes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.LedgerHashes)
}
LedgerHashes::LedgerHashes(const LedgerHashes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_ledger_sequence()) {
    last_ledger_sequence_ = new ::org::xrpl::rpc::v1::LastLedgerSequence(*from.last_ledger_sequence_);
  } else {
    last_ledger_sequence_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.LedgerHashes)
}

void LedgerHashes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&last_ledger_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&last_ledger_sequence_)) + sizeof(flags_));
}

LedgerHashes::~LedgerHashes() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.LedgerHashes)
  SharedDtor();
}

void LedgerHashes::SharedDtor() {
  if (this != internal_default_instance()) delete last_ledger_sequence_;
  if (this != internal_default_instance()) delete flags_;
}

void LedgerHashes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerHashes& LedgerHashes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LedgerHashes_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void LedgerHashes::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.LedgerHashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  if (GetArenaNoVirtual() == nullptr && last_ledger_sequence_ != nullptr) {
    delete last_ledger_sequence_;
  }
  last_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerHashes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_last_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.Hash hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerHashes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.LedgerHashes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.Hash hashes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_hashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.LedgerHashes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.LedgerHashes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerHashes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.LedgerHashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 1;
  if (this->has_last_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::last_ledger_sequence(this), output);
  }

  // repeated .org.xrpl.rpc.v1.Hash hashes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hashes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->hashes(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::flags(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.LedgerHashes)
}

::PROTOBUF_NAMESPACE_ID::uint8* LedgerHashes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.LedgerHashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 1;
  if (this->has_last_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::last_ledger_sequence(this), target);
  }

  // repeated .org.xrpl.rpc.v1.Hash hashes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hashes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->hashes(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::flags(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.LedgerHashes)
  return target;
}

size_t LedgerHashes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.LedgerHashes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.Hash hashes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->hashes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->hashes(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.LastLedgerSequence last_ledger_sequence = 1;
  if (this->has_last_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerHashes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.LedgerHashes)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerHashes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LedgerHashes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.LedgerHashes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.LedgerHashes)
    MergeFrom(*source);
  }
}

void LedgerHashes::MergeFrom(const LedgerHashes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.LedgerHashes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  if (from.has_last_ledger_sequence()) {
    mutable_last_ledger_sequence()->::org::xrpl::rpc::v1::LastLedgerSequence::MergeFrom(from.last_ledger_sequence());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
}

void LedgerHashes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.LedgerHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerHashes::CopyFrom(const LedgerHashes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.LedgerHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerHashes::IsInitialized() const {
  return true;
}

void LedgerHashes::Swap(LedgerHashes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerHashes::InternalSwap(LedgerHashes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&hashes_)->InternalSwap(CastToBase(&other->hashes_));
  swap(last_ledger_sequence_, other->last_ledger_sequence_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LedgerHashes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Offer::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::org::xrpl::rpc::v1::Sequence*>(
      ::org::xrpl::rpc::v1::Sequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->taker_pays_ = const_cast< ::org::xrpl::rpc::v1::TakerPays*>(
      ::org::xrpl::rpc::v1::TakerPays::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->taker_gets_ = const_cast< ::org::xrpl::rpc::v1::TakerGets*>(
      ::org::xrpl::rpc::v1::TakerGets::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->book_directory_ = const_cast< ::org::xrpl::rpc::v1::BookDirectory*>(
      ::org::xrpl::rpc::v1::BookDirectory::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->book_node_ = const_cast< ::org::xrpl::rpc::v1::BookNode*>(
      ::org::xrpl::rpc::v1::BookNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->owner_node_ = const_cast< ::org::xrpl::rpc::v1::OwnerNode*>(
      ::org::xrpl::rpc::v1::OwnerNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::org::xrpl::rpc::v1::Expiration*>(
      ::org::xrpl::rpc::v1::Expiration::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_Offer_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
}
class Offer::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const Offer* msg);
  static const ::org::xrpl::rpc::v1::Sequence& sequence(const Offer* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const Offer* msg);
  static const ::org::xrpl::rpc::v1::TakerPays& taker_pays(const Offer* msg);
  static const ::org::xrpl::rpc::v1::TakerGets& taker_gets(const Offer* msg);
  static const ::org::xrpl::rpc::v1::BookDirectory& book_directory(const Offer* msg);
  static const ::org::xrpl::rpc::v1::BookNode& book_node(const Offer* msg);
  static const ::org::xrpl::rpc::v1::OwnerNode& owner_node(const Offer* msg);
  static const ::org::xrpl::rpc::v1::Expiration& expiration(const Offer* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const Offer* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const Offer* msg);
};

const ::org::xrpl::rpc::v1::Account&
Offer::HasBitSetters::account(const Offer* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Sequence&
Offer::HasBitSetters::sequence(const Offer* msg) {
  return *msg->sequence_;
}
const ::org::xrpl::rpc::v1::Flags&
Offer::HasBitSetters::flags(const Offer* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::TakerPays&
Offer::HasBitSetters::taker_pays(const Offer* msg) {
  return *msg->taker_pays_;
}
const ::org::xrpl::rpc::v1::TakerGets&
Offer::HasBitSetters::taker_gets(const Offer* msg) {
  return *msg->taker_gets_;
}
const ::org::xrpl::rpc::v1::BookDirectory&
Offer::HasBitSetters::book_directory(const Offer* msg) {
  return *msg->book_directory_;
}
const ::org::xrpl::rpc::v1::BookNode&
Offer::HasBitSetters::book_node(const Offer* msg) {
  return *msg->book_node_;
}
const ::org::xrpl::rpc::v1::OwnerNode&
Offer::HasBitSetters::owner_node(const Offer* msg) {
  return *msg->owner_node_;
}
const ::org::xrpl::rpc::v1::Expiration&
Offer::HasBitSetters::expiration(const Offer* msg) {
  return *msg->expiration_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
Offer::HasBitSetters::previous_transaction_id(const Offer* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
Offer::HasBitSetters::previous_transaction_ledger_sequence(const Offer* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
void Offer::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void Offer::clear_sequence() {
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
}
void Offer::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void Offer::clear_taker_pays() {
  if (GetArenaNoVirtual() == nullptr && taker_pays_ != nullptr) {
    delete taker_pays_;
  }
  taker_pays_ = nullptr;
}
void Offer::clear_taker_gets() {
  if (GetArenaNoVirtual() == nullptr && taker_gets_ != nullptr) {
    delete taker_gets_;
  }
  taker_gets_ = nullptr;
}
void Offer::clear_book_directory() {
  if (GetArenaNoVirtual() == nullptr && book_directory_ != nullptr) {
    delete book_directory_;
  }
  book_directory_ = nullptr;
}
void Offer::clear_book_node() {
  if (GetArenaNoVirtual() == nullptr && book_node_ != nullptr) {
    delete book_node_;
  }
  book_node_ = nullptr;
}
void Offer::clear_owner_node() {
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
}
void Offer::clear_expiration() {
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
void Offer::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void Offer::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Offer::kAccountFieldNumber;
const int Offer::kSequenceFieldNumber;
const int Offer::kFlagsFieldNumber;
const int Offer::kTakerPaysFieldNumber;
const int Offer::kTakerGetsFieldNumber;
const int Offer::kBookDirectoryFieldNumber;
const int Offer::kBookNodeFieldNumber;
const int Offer::kOwnerNodeFieldNumber;
const int Offer::kExpirationFieldNumber;
const int Offer::kPreviousTransactionIdFieldNumber;
const int Offer::kPreviousTransactionLedgerSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Offer::Offer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.Offer)
}
Offer::Offer(const Offer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_sequence()) {
    sequence_ = new ::org::xrpl::rpc::v1::Sequence(*from.sequence_);
  } else {
    sequence_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_taker_pays()) {
    taker_pays_ = new ::org::xrpl::rpc::v1::TakerPays(*from.taker_pays_);
  } else {
    taker_pays_ = nullptr;
  }
  if (from.has_taker_gets()) {
    taker_gets_ = new ::org::xrpl::rpc::v1::TakerGets(*from.taker_gets_);
  } else {
    taker_gets_ = nullptr;
  }
  if (from.has_book_directory()) {
    book_directory_ = new ::org::xrpl::rpc::v1::BookDirectory(*from.book_directory_);
  } else {
    book_directory_ = nullptr;
  }
  if (from.has_book_node()) {
    book_node_ = new ::org::xrpl::rpc::v1::BookNode(*from.book_node_);
  } else {
    book_node_ = nullptr;
  }
  if (from.has_owner_node()) {
    owner_node_ = new ::org::xrpl::rpc::v1::OwnerNode(*from.owner_node_);
  } else {
    owner_node_ = nullptr;
  }
  if (from.has_expiration()) {
    expiration_ = new ::org::xrpl::rpc::v1::Expiration(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.Offer)
}

void Offer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_transaction_ledger_sequence_) -
      reinterpret_cast<char*>(&account_)) + sizeof(previous_transaction_ledger_sequence_));
}

Offer::~Offer() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.Offer)
  SharedDtor();
}

void Offer::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete sequence_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete taker_pays_;
  if (this != internal_default_instance()) delete taker_gets_;
  if (this != internal_default_instance()) delete book_directory_;
  if (this != internal_default_instance()) delete book_node_;
  if (this != internal_default_instance()) delete owner_node_;
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
}

void Offer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Offer& Offer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Offer_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void Offer::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.Offer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sequence_ != nullptr) {
    delete sequence_;
  }
  sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_pays_ != nullptr) {
    delete taker_pays_;
  }
  taker_pays_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && taker_gets_ != nullptr) {
    delete taker_gets_;
  }
  taker_gets_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && book_directory_ != nullptr) {
    delete book_directory_;
  }
  book_directory_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && book_node_ != nullptr) {
    delete book_node_;
  }
  book_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Offer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Sequence sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_taker_pays(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TakerGets taker_gets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_taker_gets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.BookDirectory book_directory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_book_directory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.BookNode book_node = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_book_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerNode owner_node = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_owner_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Expiration expiration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_expiration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Offer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.Offer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Sequence sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_pays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TakerGets taker_gets = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taker_gets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.BookDirectory book_directory = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_book_directory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.BookNode book_node = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_book_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerNode owner_node = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Expiration expiration = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.Offer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.Offer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Offer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.Offer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 2;
  if (this->has_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sequence(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
  if (this->has_taker_pays()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::taker_pays(this), output);
  }

  // .org.xrpl.rpc.v1.TakerGets taker_gets = 5;
  if (this->has_taker_gets()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::taker_gets(this), output);
  }

  // .org.xrpl.rpc.v1.BookDirectory book_directory = 6;
  if (this->has_book_directory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::book_directory(this), output);
  }

  // .org.xrpl.rpc.v1.BookNode book_node = 7;
  if (this->has_book_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::book_node(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 8;
  if (this->has_owner_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::owner_node(this), output);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 9;
  if (this->has_expiration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::expiration(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 10;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 11;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.Offer)
}

::PROTOBUF_NAMESPACE_ID::uint8* Offer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.Offer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 2;
  if (this->has_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sequence(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
  if (this->has_taker_pays()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::taker_pays(this), target);
  }

  // .org.xrpl.rpc.v1.TakerGets taker_gets = 5;
  if (this->has_taker_gets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::taker_gets(this), target);
  }

  // .org.xrpl.rpc.v1.BookDirectory book_directory = 6;
  if (this->has_book_directory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::book_directory(this), target);
  }

  // .org.xrpl.rpc.v1.BookNode book_node = 7;
  if (this->has_book_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::book_node(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 8;
  if (this->has_owner_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::owner_node(this), target);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 9;
  if (this->has_expiration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::expiration(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 10;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 11;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.Offer)
  return target;
}

size_t Offer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.Offer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Sequence sequence = 2;
  if (this->has_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequence_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 3;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.TakerPays taker_pays = 4;
  if (this->has_taker_pays()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_pays_);
  }

  // .org.xrpl.rpc.v1.TakerGets taker_gets = 5;
  if (this->has_taker_gets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taker_gets_);
  }

  // .org.xrpl.rpc.v1.BookDirectory book_directory = 6;
  if (this->has_book_directory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *book_directory_);
  }

  // .org.xrpl.rpc.v1.BookNode book_node = 7;
  if (this->has_book_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *book_node_);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 8;
  if (this->has_owner_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_node_);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 9;
  if (this->has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 10;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 11;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Offer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.Offer)
  GOOGLE_DCHECK_NE(&from, this);
  const Offer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Offer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.Offer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.Offer)
    MergeFrom(*source);
  }
}

void Offer::MergeFrom(const Offer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.Offer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_sequence()) {
    mutable_sequence()->::org::xrpl::rpc::v1::Sequence::MergeFrom(from.sequence());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_taker_pays()) {
    mutable_taker_pays()->::org::xrpl::rpc::v1::TakerPays::MergeFrom(from.taker_pays());
  }
  if (from.has_taker_gets()) {
    mutable_taker_gets()->::org::xrpl::rpc::v1::TakerGets::MergeFrom(from.taker_gets());
  }
  if (from.has_book_directory()) {
    mutable_book_directory()->::org::xrpl::rpc::v1::BookDirectory::MergeFrom(from.book_directory());
  }
  if (from.has_book_node()) {
    mutable_book_node()->::org::xrpl::rpc::v1::BookNode::MergeFrom(from.book_node());
  }
  if (from.has_owner_node()) {
    mutable_owner_node()->::org::xrpl::rpc::v1::OwnerNode::MergeFrom(from.owner_node());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::org::xrpl::rpc::v1::Expiration::MergeFrom(from.expiration());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
}

void Offer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.Offer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer::CopyFrom(const Offer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.Offer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer::IsInitialized() const {
  return true;
}

void Offer::Swap(Offer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Offer::InternalSwap(Offer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(sequence_, other->sequence_);
  swap(flags_, other->flags_);
  swap(taker_pays_, other->taker_pays_);
  swap(taker_gets_, other->taker_gets_);
  swap(book_directory_, other->book_directory_);
  swap(book_node_, other->book_node_);
  swap(owner_node_, other->owner_node_);
  swap(expiration_, other->expiration_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Offer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PayChannel::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->destination_ = const_cast< ::org::xrpl::rpc::v1::Destination*>(
      ::org::xrpl::rpc::v1::Destination::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->amount_ = const_cast< ::org::xrpl::rpc::v1::Amount*>(
      ::org::xrpl::rpc::v1::Amount::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->balance_ = const_cast< ::org::xrpl::rpc::v1::Balance*>(
      ::org::xrpl::rpc::v1::Balance::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::org::xrpl::rpc::v1::PublicKey*>(
      ::org::xrpl::rpc::v1::PublicKey::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->settle_delay_ = const_cast< ::org::xrpl::rpc::v1::SettleDelay*>(
      ::org::xrpl::rpc::v1::SettleDelay::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->owner_node_ = const_cast< ::org::xrpl::rpc::v1::OwnerNode*>(
      ::org::xrpl::rpc::v1::OwnerNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::org::xrpl::rpc::v1::Expiration*>(
      ::org::xrpl::rpc::v1::Expiration::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->cancel_after_ = const_cast< ::org::xrpl::rpc::v1::CancelAfter*>(
      ::org::xrpl::rpc::v1::CancelAfter::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->source_tag_ = const_cast< ::org::xrpl::rpc::v1::SourceTag*>(
      ::org::xrpl::rpc::v1::SourceTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->destination_tag_ = const_cast< ::org::xrpl::rpc::v1::DestinationTag*>(
      ::org::xrpl::rpc::v1::DestinationTag::internal_default_instance());
  ::org::xrpl::rpc::v1::_PayChannel_default_instance_._instance.get_mutable()->destination_node_ = const_cast< ::org::xrpl::rpc::v1::DestinationNode*>(
      ::org::xrpl::rpc::v1::DestinationNode::internal_default_instance());
}
class PayChannel::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Account& account(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::Destination& destination(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::Amount& amount(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::Balance& balance(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::PublicKey& public_key(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::SettleDelay& settle_delay(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::OwnerNode& owner_node(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::Expiration& expiration(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::CancelAfter& cancel_after(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::SourceTag& source_tag(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::DestinationTag& destination_tag(const PayChannel* msg);
  static const ::org::xrpl::rpc::v1::DestinationNode& destination_node(const PayChannel* msg);
};

const ::org::xrpl::rpc::v1::Account&
PayChannel::HasBitSetters::account(const PayChannel* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::Destination&
PayChannel::HasBitSetters::destination(const PayChannel* msg) {
  return *msg->destination_;
}
const ::org::xrpl::rpc::v1::Amount&
PayChannel::HasBitSetters::amount(const PayChannel* msg) {
  return *msg->amount_;
}
const ::org::xrpl::rpc::v1::Balance&
PayChannel::HasBitSetters::balance(const PayChannel* msg) {
  return *msg->balance_;
}
const ::org::xrpl::rpc::v1::PublicKey&
PayChannel::HasBitSetters::public_key(const PayChannel* msg) {
  return *msg->public_key_;
}
const ::org::xrpl::rpc::v1::SettleDelay&
PayChannel::HasBitSetters::settle_delay(const PayChannel* msg) {
  return *msg->settle_delay_;
}
const ::org::xrpl::rpc::v1::OwnerNode&
PayChannel::HasBitSetters::owner_node(const PayChannel* msg) {
  return *msg->owner_node_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
PayChannel::HasBitSetters::previous_transaction_id(const PayChannel* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
PayChannel::HasBitSetters::previous_transaction_ledger_sequence(const PayChannel* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::Flags&
PayChannel::HasBitSetters::flags(const PayChannel* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::Expiration&
PayChannel::HasBitSetters::expiration(const PayChannel* msg) {
  return *msg->expiration_;
}
const ::org::xrpl::rpc::v1::CancelAfter&
PayChannel::HasBitSetters::cancel_after(const PayChannel* msg) {
  return *msg->cancel_after_;
}
const ::org::xrpl::rpc::v1::SourceTag&
PayChannel::HasBitSetters::source_tag(const PayChannel* msg) {
  return *msg->source_tag_;
}
const ::org::xrpl::rpc::v1::DestinationTag&
PayChannel::HasBitSetters::destination_tag(const PayChannel* msg) {
  return *msg->destination_tag_;
}
const ::org::xrpl::rpc::v1::DestinationNode&
PayChannel::HasBitSetters::destination_node(const PayChannel* msg) {
  return *msg->destination_node_;
}
void PayChannel::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void PayChannel::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void PayChannel::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void PayChannel::clear_balance() {
  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
}
void PayChannel::clear_public_key() {
  if (GetArenaNoVirtual() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
void PayChannel::clear_settle_delay() {
  if (GetArenaNoVirtual() == nullptr && settle_delay_ != nullptr) {
    delete settle_delay_;
  }
  settle_delay_ = nullptr;
}
void PayChannel::clear_owner_node() {
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
}
void PayChannel::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void PayChannel::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
void PayChannel::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void PayChannel::clear_expiration() {
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
void PayChannel::clear_cancel_after() {
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
}
void PayChannel::clear_source_tag() {
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
}
void PayChannel::clear_destination_tag() {
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
}
void PayChannel::clear_destination_node() {
  if (GetArenaNoVirtual() == nullptr && destination_node_ != nullptr) {
    delete destination_node_;
  }
  destination_node_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayChannel::kAccountFieldNumber;
const int PayChannel::kDestinationFieldNumber;
const int PayChannel::kAmountFieldNumber;
const int PayChannel::kBalanceFieldNumber;
const int PayChannel::kPublicKeyFieldNumber;
const int PayChannel::kSettleDelayFieldNumber;
const int PayChannel::kOwnerNodeFieldNumber;
const int PayChannel::kPreviousTransactionIdFieldNumber;
const int PayChannel::kPreviousTransactionLedgerSequenceFieldNumber;
const int PayChannel::kFlagsFieldNumber;
const int PayChannel::kExpirationFieldNumber;
const int PayChannel::kCancelAfterFieldNumber;
const int PayChannel::kSourceTagFieldNumber;
const int PayChannel::kDestinationTagFieldNumber;
const int PayChannel::kDestinationNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayChannel::PayChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.PayChannel)
}
PayChannel::PayChannel(const PayChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_destination()) {
    destination_ = new ::org::xrpl::rpc::v1::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from.has_amount()) {
    amount_ = new ::org::xrpl::rpc::v1::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_balance()) {
    balance_ = new ::org::xrpl::rpc::v1::Balance(*from.balance_);
  } else {
    balance_ = nullptr;
  }
  if (from.has_public_key()) {
    public_key_ = new ::org::xrpl::rpc::v1::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from.has_settle_delay()) {
    settle_delay_ = new ::org::xrpl::rpc::v1::SettleDelay(*from.settle_delay_);
  } else {
    settle_delay_ = nullptr;
  }
  if (from.has_owner_node()) {
    owner_node_ = new ::org::xrpl::rpc::v1::OwnerNode(*from.owner_node_);
  } else {
    owner_node_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_expiration()) {
    expiration_ = new ::org::xrpl::rpc::v1::Expiration(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  if (from.has_cancel_after()) {
    cancel_after_ = new ::org::xrpl::rpc::v1::CancelAfter(*from.cancel_after_);
  } else {
    cancel_after_ = nullptr;
  }
  if (from.has_source_tag()) {
    source_tag_ = new ::org::xrpl::rpc::v1::SourceTag(*from.source_tag_);
  } else {
    source_tag_ = nullptr;
  }
  if (from.has_destination_tag()) {
    destination_tag_ = new ::org::xrpl::rpc::v1::DestinationTag(*from.destination_tag_);
  } else {
    destination_tag_ = nullptr;
  }
  if (from.has_destination_node()) {
    destination_node_ = new ::org::xrpl::rpc::v1::DestinationNode(*from.destination_node_);
  } else {
    destination_node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.PayChannel)
}

void PayChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_node_) -
      reinterpret_cast<char*>(&account_)) + sizeof(destination_node_));
}

PayChannel::~PayChannel() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.PayChannel)
  SharedDtor();
}

void PayChannel::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete balance_;
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete settle_delay_;
  if (this != internal_default_instance()) delete owner_node_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete cancel_after_;
  if (this != internal_default_instance()) delete source_tag_;
  if (this != internal_default_instance()) delete destination_tag_;
  if (this != internal_default_instance()) delete destination_node_;
}

void PayChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PayChannel& PayChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PayChannel_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void PayChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.PayChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && settle_delay_ != nullptr) {
    delete settle_delay_;
  }
  settle_delay_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cancel_after_ != nullptr) {
    delete cancel_after_;
  }
  cancel_after_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_tag_ != nullptr) {
    delete source_tag_;
  }
  source_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_tag_ != nullptr) {
    delete destination_tag_;
  }
  destination_tag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_node_ != nullptr) {
    delete destination_node_;
  }
  destination_node_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PayChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Amount amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Balance balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PublicKey public_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SettleDelay settle_delay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_settle_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerNode owner_node = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_owner_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Expiration expiration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_expiration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_cancel_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_source_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_destination_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.DestinationNode destination_node = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_destination_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PayChannel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.PayChannel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Account account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Destination destination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Amount amount = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Balance balance = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_balance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PublicKey public_key = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SettleDelay settle_delay = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settle_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerNode owner_node = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Expiration expiration = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.CancelAfter cancel_after = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cancel_after()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationTag destination_tag = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.DestinationNode destination_node = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.PayChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.PayChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PayChannel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.PayChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::destination(this), output);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::amount(this), output);
  }

  // .org.xrpl.rpc.v1.Balance balance = 4;
  if (this->has_balance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::balance(this), output);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 5;
  if (this->has_public_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::public_key(this), output);
  }

  // .org.xrpl.rpc.v1.SettleDelay settle_delay = 6;
  if (this->has_settle_delay()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::settle_delay(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 7;
  if (this->has_owner_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::owner_node(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 8;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 9;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 10;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 11;
  if (this->has_expiration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::expiration(this), output);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 12;
  if (this->has_cancel_after()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::cancel_after(this), output);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
  if (this->has_source_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::source_tag(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 14;
  if (this->has_destination_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::destination_tag(this), output);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 15;
  if (this->has_destination_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::destination_node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.PayChannel)
}

::PROTOBUF_NAMESPACE_ID::uint8* PayChannel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.PayChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::destination(this), target);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::amount(this), target);
  }

  // .org.xrpl.rpc.v1.Balance balance = 4;
  if (this->has_balance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::balance(this), target);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 5;
  if (this->has_public_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::public_key(this), target);
  }

  // .org.xrpl.rpc.v1.SettleDelay settle_delay = 6;
  if (this->has_settle_delay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::settle_delay(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 7;
  if (this->has_owner_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::owner_node(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 8;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 9;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 10;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 11;
  if (this->has_expiration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::expiration(this), target);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 12;
  if (this->has_cancel_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::cancel_after(this), target);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
  if (this->has_source_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::source_tag(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 14;
  if (this->has_destination_tag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::destination_tag(this), target);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 15;
  if (this->has_destination_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::destination_node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.PayChannel)
  return target;
}

size_t PayChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.PayChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.Destination destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .org.xrpl.rpc.v1.Amount amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .org.xrpl.rpc.v1.Balance balance = 4;
  if (this->has_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balance_);
  }

  // .org.xrpl.rpc.v1.PublicKey public_key = 5;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .org.xrpl.rpc.v1.SettleDelay settle_delay = 6;
  if (this->has_settle_delay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settle_delay_);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 7;
  if (this->has_owner_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_node_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 8;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 9;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 10;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.Expiration expiration = 11;
  if (this->has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  // .org.xrpl.rpc.v1.CancelAfter cancel_after = 12;
  if (this->has_cancel_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cancel_after_);
  }

  // .org.xrpl.rpc.v1.SourceTag source_tag = 13;
  if (this->has_source_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_tag_);
  }

  // .org.xrpl.rpc.v1.DestinationTag destination_tag = 14;
  if (this->has_destination_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_tag_);
  }

  // .org.xrpl.rpc.v1.DestinationNode destination_node = 15;
  if (this->has_destination_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_node_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.PayChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PayChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.PayChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.PayChannel)
    MergeFrom(*source);
  }
}

void PayChannel::MergeFrom(const PayChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.PayChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_destination()) {
    mutable_destination()->::org::xrpl::rpc::v1::Destination::MergeFrom(from.destination());
  }
  if (from.has_amount()) {
    mutable_amount()->::org::xrpl::rpc::v1::Amount::MergeFrom(from.amount());
  }
  if (from.has_balance()) {
    mutable_balance()->::org::xrpl::rpc::v1::Balance::MergeFrom(from.balance());
  }
  if (from.has_public_key()) {
    mutable_public_key()->::org::xrpl::rpc::v1::PublicKey::MergeFrom(from.public_key());
  }
  if (from.has_settle_delay()) {
    mutable_settle_delay()->::org::xrpl::rpc::v1::SettleDelay::MergeFrom(from.settle_delay());
  }
  if (from.has_owner_node()) {
    mutable_owner_node()->::org::xrpl::rpc::v1::OwnerNode::MergeFrom(from.owner_node());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::org::xrpl::rpc::v1::Expiration::MergeFrom(from.expiration());
  }
  if (from.has_cancel_after()) {
    mutable_cancel_after()->::org::xrpl::rpc::v1::CancelAfter::MergeFrom(from.cancel_after());
  }
  if (from.has_source_tag()) {
    mutable_source_tag()->::org::xrpl::rpc::v1::SourceTag::MergeFrom(from.source_tag());
  }
  if (from.has_destination_tag()) {
    mutable_destination_tag()->::org::xrpl::rpc::v1::DestinationTag::MergeFrom(from.destination_tag());
  }
  if (from.has_destination_node()) {
    mutable_destination_node()->::org::xrpl::rpc::v1::DestinationNode::MergeFrom(from.destination_node());
  }
}

void PayChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.PayChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayChannel::CopyFrom(const PayChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.PayChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayChannel::IsInitialized() const {
  return true;
}

void PayChannel::Swap(PayChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayChannel::InternalSwap(PayChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(destination_, other->destination_);
  swap(amount_, other->amount_);
  swap(balance_, other->balance_);
  swap(public_key_, other->public_key_);
  swap(settle_delay_, other->settle_delay_);
  swap(owner_node_, other->owner_node_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
  swap(flags_, other->flags_);
  swap(expiration_, other->expiration_);
  swap(cancel_after_, other->cancel_after_);
  swap(source_tag_, other->source_tag_);
  swap(destination_tag_, other->destination_tag_);
  swap(destination_node_, other->destination_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PayChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RippleState::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->balance_ = const_cast< ::org::xrpl::rpc::v1::Balance*>(
      ::org::xrpl::rpc::v1::Balance::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->low_limit_ = const_cast< ::org::xrpl::rpc::v1::LowLimit*>(
      ::org::xrpl::rpc::v1::LowLimit::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->high_limit_ = const_cast< ::org::xrpl::rpc::v1::HighLimit*>(
      ::org::xrpl::rpc::v1::HighLimit::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->low_node_ = const_cast< ::org::xrpl::rpc::v1::LowNode*>(
      ::org::xrpl::rpc::v1::LowNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->high_node_ = const_cast< ::org::xrpl::rpc::v1::HighNode*>(
      ::org::xrpl::rpc::v1::HighNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->low_quality_in_ = const_cast< ::org::xrpl::rpc::v1::LowQualityIn*>(
      ::org::xrpl::rpc::v1::LowQualityIn::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->low_quality_out_ = const_cast< ::org::xrpl::rpc::v1::LowQualityOut*>(
      ::org::xrpl::rpc::v1::LowQualityOut::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->high_quality_in_ = const_cast< ::org::xrpl::rpc::v1::HighQualityIn*>(
      ::org::xrpl::rpc::v1::HighQualityIn::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->high_quality_out_ = const_cast< ::org::xrpl::rpc::v1::HighQualityOut*>(
      ::org::xrpl::rpc::v1::HighQualityOut::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_RippleState_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
}
class RippleState::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Balance& balance(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::LowLimit& low_limit(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::HighLimit& high_limit(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::LowNode& low_node(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::HighNode& high_node(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::LowQualityIn& low_quality_in(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::LowQualityOut& low_quality_out(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::HighQualityIn& high_quality_in(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::HighQualityOut& high_quality_out(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const RippleState* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const RippleState* msg);
};

const ::org::xrpl::rpc::v1::Balance&
RippleState::HasBitSetters::balance(const RippleState* msg) {
  return *msg->balance_;
}
const ::org::xrpl::rpc::v1::Flags&
RippleState::HasBitSetters::flags(const RippleState* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::LowLimit&
RippleState::HasBitSetters::low_limit(const RippleState* msg) {
  return *msg->low_limit_;
}
const ::org::xrpl::rpc::v1::HighLimit&
RippleState::HasBitSetters::high_limit(const RippleState* msg) {
  return *msg->high_limit_;
}
const ::org::xrpl::rpc::v1::LowNode&
RippleState::HasBitSetters::low_node(const RippleState* msg) {
  return *msg->low_node_;
}
const ::org::xrpl::rpc::v1::HighNode&
RippleState::HasBitSetters::high_node(const RippleState* msg) {
  return *msg->high_node_;
}
const ::org::xrpl::rpc::v1::LowQualityIn&
RippleState::HasBitSetters::low_quality_in(const RippleState* msg) {
  return *msg->low_quality_in_;
}
const ::org::xrpl::rpc::v1::LowQualityOut&
RippleState::HasBitSetters::low_quality_out(const RippleState* msg) {
  return *msg->low_quality_out_;
}
const ::org::xrpl::rpc::v1::HighQualityIn&
RippleState::HasBitSetters::high_quality_in(const RippleState* msg) {
  return *msg->high_quality_in_;
}
const ::org::xrpl::rpc::v1::HighQualityOut&
RippleState::HasBitSetters::high_quality_out(const RippleState* msg) {
  return *msg->high_quality_out_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
RippleState::HasBitSetters::previous_transaction_id(const RippleState* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
RippleState::HasBitSetters::previous_transaction_ledger_sequence(const RippleState* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
void RippleState::clear_balance() {
  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
}
void RippleState::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void RippleState::clear_low_limit() {
  if (GetArenaNoVirtual() == nullptr && low_limit_ != nullptr) {
    delete low_limit_;
  }
  low_limit_ = nullptr;
}
void RippleState::clear_high_limit() {
  if (GetArenaNoVirtual() == nullptr && high_limit_ != nullptr) {
    delete high_limit_;
  }
  high_limit_ = nullptr;
}
void RippleState::clear_low_node() {
  if (GetArenaNoVirtual() == nullptr && low_node_ != nullptr) {
    delete low_node_;
  }
  low_node_ = nullptr;
}
void RippleState::clear_high_node() {
  if (GetArenaNoVirtual() == nullptr && high_node_ != nullptr) {
    delete high_node_;
  }
  high_node_ = nullptr;
}
void RippleState::clear_low_quality_in() {
  if (GetArenaNoVirtual() == nullptr && low_quality_in_ != nullptr) {
    delete low_quality_in_;
  }
  low_quality_in_ = nullptr;
}
void RippleState::clear_low_quality_out() {
  if (GetArenaNoVirtual() == nullptr && low_quality_out_ != nullptr) {
    delete low_quality_out_;
  }
  low_quality_out_ = nullptr;
}
void RippleState::clear_high_quality_in() {
  if (GetArenaNoVirtual() == nullptr && high_quality_in_ != nullptr) {
    delete high_quality_in_;
  }
  high_quality_in_ = nullptr;
}
void RippleState::clear_high_quality_out() {
  if (GetArenaNoVirtual() == nullptr && high_quality_out_ != nullptr) {
    delete high_quality_out_;
  }
  high_quality_out_ = nullptr;
}
void RippleState::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void RippleState::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleState::kBalanceFieldNumber;
const int RippleState::kFlagsFieldNumber;
const int RippleState::kLowLimitFieldNumber;
const int RippleState::kHighLimitFieldNumber;
const int RippleState::kLowNodeFieldNumber;
const int RippleState::kHighNodeFieldNumber;
const int RippleState::kLowQualityInFieldNumber;
const int RippleState::kLowQualityOutFieldNumber;
const int RippleState::kHighQualityInFieldNumber;
const int RippleState::kHighQualityOutFieldNumber;
const int RippleState::kPreviousTransactionIdFieldNumber;
const int RippleState::kPreviousTransactionLedgerSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleState::RippleState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.RippleState)
}
RippleState::RippleState(const RippleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_balance()) {
    balance_ = new ::org::xrpl::rpc::v1::Balance(*from.balance_);
  } else {
    balance_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_low_limit()) {
    low_limit_ = new ::org::xrpl::rpc::v1::LowLimit(*from.low_limit_);
  } else {
    low_limit_ = nullptr;
  }
  if (from.has_high_limit()) {
    high_limit_ = new ::org::xrpl::rpc::v1::HighLimit(*from.high_limit_);
  } else {
    high_limit_ = nullptr;
  }
  if (from.has_low_node()) {
    low_node_ = new ::org::xrpl::rpc::v1::LowNode(*from.low_node_);
  } else {
    low_node_ = nullptr;
  }
  if (from.has_high_node()) {
    high_node_ = new ::org::xrpl::rpc::v1::HighNode(*from.high_node_);
  } else {
    high_node_ = nullptr;
  }
  if (from.has_low_quality_in()) {
    low_quality_in_ = new ::org::xrpl::rpc::v1::LowQualityIn(*from.low_quality_in_);
  } else {
    low_quality_in_ = nullptr;
  }
  if (from.has_low_quality_out()) {
    low_quality_out_ = new ::org::xrpl::rpc::v1::LowQualityOut(*from.low_quality_out_);
  } else {
    low_quality_out_ = nullptr;
  }
  if (from.has_high_quality_in()) {
    high_quality_in_ = new ::org::xrpl::rpc::v1::HighQualityIn(*from.high_quality_in_);
  } else {
    high_quality_in_ = nullptr;
  }
  if (from.has_high_quality_out()) {
    high_quality_out_ = new ::org::xrpl::rpc::v1::HighQualityOut(*from.high_quality_out_);
  } else {
    high_quality_out_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.RippleState)
}

void RippleState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_transaction_ledger_sequence_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(previous_transaction_ledger_sequence_));
}

RippleState::~RippleState() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.RippleState)
  SharedDtor();
}

void RippleState::SharedDtor() {
  if (this != internal_default_instance()) delete balance_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete low_limit_;
  if (this != internal_default_instance()) delete high_limit_;
  if (this != internal_default_instance()) delete low_node_;
  if (this != internal_default_instance()) delete high_node_;
  if (this != internal_default_instance()) delete low_quality_in_;
  if (this != internal_default_instance()) delete low_quality_out_;
  if (this != internal_default_instance()) delete high_quality_in_;
  if (this != internal_default_instance()) delete high_quality_out_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
}

void RippleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RippleState& RippleState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RippleState_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void RippleState::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.RippleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && balance_ != nullptr) {
    delete balance_;
  }
  balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_limit_ != nullptr) {
    delete low_limit_;
  }
  low_limit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_limit_ != nullptr) {
    delete high_limit_;
  }
  high_limit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_node_ != nullptr) {
    delete low_node_;
  }
  low_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_node_ != nullptr) {
    delete high_node_;
  }
  high_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_quality_in_ != nullptr) {
    delete low_quality_in_;
  }
  low_quality_in_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_quality_out_ != nullptr) {
    delete low_quality_out_;
  }
  low_quality_out_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_quality_in_ != nullptr) {
    delete high_quality_in_;
  }
  high_quality_in_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_quality_out_ != nullptr) {
    delete high_quality_out_;
  }
  high_quality_out_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RippleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Balance balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LowLimit low_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_low_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.HighLimit high_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_high_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LowNode low_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_low_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.HighNode high_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_high_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LowQualityIn low_quality_in = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_low_quality_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LowQualityOut low_quality_out = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_low_quality_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.HighQualityIn high_quality_in = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_high_quality_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.HighQualityOut high_quality_out = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_high_quality_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RippleState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.RippleState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Balance balance = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_balance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LowLimit low_limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.HighLimit high_limit = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_high_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LowNode low_node = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.HighNode high_node = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_high_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LowQualityIn low_quality_in = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_quality_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.LowQualityOut low_quality_out = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_quality_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.HighQualityIn high_quality_in = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_high_quality_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.HighQualityOut high_quality_out = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_high_quality_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.RippleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.RippleState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RippleState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.RippleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Balance balance = 1;
  if (this->has_balance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::balance(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 2;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.LowLimit low_limit = 3;
  if (this->has_low_limit()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::low_limit(this), output);
  }

  // .org.xrpl.rpc.v1.HighLimit high_limit = 4;
  if (this->has_high_limit()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::high_limit(this), output);
  }

  // .org.xrpl.rpc.v1.LowNode low_node = 5;
  if (this->has_low_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::low_node(this), output);
  }

  // .org.xrpl.rpc.v1.HighNode high_node = 6;
  if (this->has_high_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::high_node(this), output);
  }

  // .org.xrpl.rpc.v1.LowQualityIn low_quality_in = 7;
  if (this->has_low_quality_in()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::low_quality_in(this), output);
  }

  // .org.xrpl.rpc.v1.LowQualityOut low_quality_out = 8;
  if (this->has_low_quality_out()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::low_quality_out(this), output);
  }

  // .org.xrpl.rpc.v1.HighQualityIn high_quality_in = 9;
  if (this->has_high_quality_in()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::high_quality_in(this), output);
  }

  // .org.xrpl.rpc.v1.HighQualityOut high_quality_out = 10;
  if (this->has_high_quality_out()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::high_quality_out(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 11;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 12;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.RippleState)
}

::PROTOBUF_NAMESPACE_ID::uint8* RippleState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.RippleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Balance balance = 1;
  if (this->has_balance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::balance(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 2;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.LowLimit low_limit = 3;
  if (this->has_low_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::low_limit(this), target);
  }

  // .org.xrpl.rpc.v1.HighLimit high_limit = 4;
  if (this->has_high_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::high_limit(this), target);
  }

  // .org.xrpl.rpc.v1.LowNode low_node = 5;
  if (this->has_low_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::low_node(this), target);
  }

  // .org.xrpl.rpc.v1.HighNode high_node = 6;
  if (this->has_high_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::high_node(this), target);
  }

  // .org.xrpl.rpc.v1.LowQualityIn low_quality_in = 7;
  if (this->has_low_quality_in()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::low_quality_in(this), target);
  }

  // .org.xrpl.rpc.v1.LowQualityOut low_quality_out = 8;
  if (this->has_low_quality_out()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::low_quality_out(this), target);
  }

  // .org.xrpl.rpc.v1.HighQualityIn high_quality_in = 9;
  if (this->has_high_quality_in()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::high_quality_in(this), target);
  }

  // .org.xrpl.rpc.v1.HighQualityOut high_quality_out = 10;
  if (this->has_high_quality_out()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::high_quality_out(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 11;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 12;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.RippleState)
  return target;
}

size_t RippleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.RippleState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Balance balance = 1;
  if (this->has_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balance_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 2;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.LowLimit low_limit = 3;
  if (this->has_low_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_limit_);
  }

  // .org.xrpl.rpc.v1.HighLimit high_limit = 4;
  if (this->has_high_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_limit_);
  }

  // .org.xrpl.rpc.v1.LowNode low_node = 5;
  if (this->has_low_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_node_);
  }

  // .org.xrpl.rpc.v1.HighNode high_node = 6;
  if (this->has_high_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_node_);
  }

  // .org.xrpl.rpc.v1.LowQualityIn low_quality_in = 7;
  if (this->has_low_quality_in()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_quality_in_);
  }

  // .org.xrpl.rpc.v1.LowQualityOut low_quality_out = 8;
  if (this->has_low_quality_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_quality_out_);
  }

  // .org.xrpl.rpc.v1.HighQualityIn high_quality_in = 9;
  if (this->has_high_quality_in()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_quality_in_);
  }

  // .org.xrpl.rpc.v1.HighQualityOut high_quality_out = 10;
  if (this->has_high_quality_out()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_quality_out_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 11;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 12;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.RippleState)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RippleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.RippleState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.RippleState)
    MergeFrom(*source);
  }
}

void RippleState::MergeFrom(const RippleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.RippleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_balance()) {
    mutable_balance()->::org::xrpl::rpc::v1::Balance::MergeFrom(from.balance());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_low_limit()) {
    mutable_low_limit()->::org::xrpl::rpc::v1::LowLimit::MergeFrom(from.low_limit());
  }
  if (from.has_high_limit()) {
    mutable_high_limit()->::org::xrpl::rpc::v1::HighLimit::MergeFrom(from.high_limit());
  }
  if (from.has_low_node()) {
    mutable_low_node()->::org::xrpl::rpc::v1::LowNode::MergeFrom(from.low_node());
  }
  if (from.has_high_node()) {
    mutable_high_node()->::org::xrpl::rpc::v1::HighNode::MergeFrom(from.high_node());
  }
  if (from.has_low_quality_in()) {
    mutable_low_quality_in()->::org::xrpl::rpc::v1::LowQualityIn::MergeFrom(from.low_quality_in());
  }
  if (from.has_low_quality_out()) {
    mutable_low_quality_out()->::org::xrpl::rpc::v1::LowQualityOut::MergeFrom(from.low_quality_out());
  }
  if (from.has_high_quality_in()) {
    mutable_high_quality_in()->::org::xrpl::rpc::v1::HighQualityIn::MergeFrom(from.high_quality_in());
  }
  if (from.has_high_quality_out()) {
    mutable_high_quality_out()->::org::xrpl::rpc::v1::HighQualityOut::MergeFrom(from.high_quality_out());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
}

void RippleState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.RippleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleState::CopyFrom(const RippleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.RippleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleState::IsInitialized() const {
  return true;
}

void RippleState::Swap(RippleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleState::InternalSwap(RippleState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(balance_, other->balance_);
  swap(flags_, other->flags_);
  swap(low_limit_, other->low_limit_);
  swap(high_limit_, other->high_limit_);
  swap(low_node_, other->low_node_);
  swap(high_node_, other->high_node_);
  swap(low_quality_in_, other->low_quality_in_);
  swap(low_quality_out_, other->low_quality_out_);
  swap(high_quality_in_, other->high_quality_in_);
  swap(high_quality_out_, other->high_quality_out_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RippleState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignerList::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_SignerList_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_SignerList_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_SignerList_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_SignerList_default_instance_._instance.get_mutable()->owner_node_ = const_cast< ::org::xrpl::rpc::v1::OwnerNode*>(
      ::org::xrpl::rpc::v1::OwnerNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_SignerList_default_instance_._instance.get_mutable()->signer_list_id_ = const_cast< ::org::xrpl::rpc::v1::SignerListID*>(
      ::org::xrpl::rpc::v1::SignerListID::internal_default_instance());
  ::org::xrpl::rpc::v1::_SignerList_default_instance_._instance.get_mutable()->signer_quorum_ = const_cast< ::org::xrpl::rpc::v1::SignerQuorum*>(
      ::org::xrpl::rpc::v1::SignerQuorum::internal_default_instance());
}
class SignerList::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Flags& flags(const SignerList* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const SignerList* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const SignerList* msg);
  static const ::org::xrpl::rpc::v1::OwnerNode& owner_node(const SignerList* msg);
  static const ::org::xrpl::rpc::v1::SignerListID& signer_list_id(const SignerList* msg);
  static const ::org::xrpl::rpc::v1::SignerQuorum& signer_quorum(const SignerList* msg);
};

const ::org::xrpl::rpc::v1::Flags&
SignerList::HasBitSetters::flags(const SignerList* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
SignerList::HasBitSetters::previous_transaction_id(const SignerList* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
SignerList::HasBitSetters::previous_transaction_ledger_sequence(const SignerList* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::OwnerNode&
SignerList::HasBitSetters::owner_node(const SignerList* msg) {
  return *msg->owner_node_;
}
const ::org::xrpl::rpc::v1::SignerListID&
SignerList::HasBitSetters::signer_list_id(const SignerList* msg) {
  return *msg->signer_list_id_;
}
const ::org::xrpl::rpc::v1::SignerQuorum&
SignerList::HasBitSetters::signer_quorum(const SignerList* msg) {
  return *msg->signer_quorum_;
}
void SignerList::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void SignerList::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void SignerList::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
void SignerList::clear_owner_node() {
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
}
void SignerList::clear_signer_entries() {
  signer_entries_.Clear();
}
void SignerList::clear_signer_list_id() {
  if (GetArenaNoVirtual() == nullptr && signer_list_id_ != nullptr) {
    delete signer_list_id_;
  }
  signer_list_id_ = nullptr;
}
void SignerList::clear_signer_quorum() {
  if (GetArenaNoVirtual() == nullptr && signer_quorum_ != nullptr) {
    delete signer_quorum_;
  }
  signer_quorum_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignerList::kFlagsFieldNumber;
const int SignerList::kPreviousTransactionIdFieldNumber;
const int SignerList::kPreviousTransactionLedgerSequenceFieldNumber;
const int SignerList::kOwnerNodeFieldNumber;
const int SignerList::kSignerEntriesFieldNumber;
const int SignerList::kSignerListIdFieldNumber;
const int SignerList::kSignerQuorumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignerList::SignerList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.SignerList)
}
SignerList::SignerList(const SignerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signer_entries_(from.signer_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  if (from.has_owner_node()) {
    owner_node_ = new ::org::xrpl::rpc::v1::OwnerNode(*from.owner_node_);
  } else {
    owner_node_ = nullptr;
  }
  if (from.has_signer_list_id()) {
    signer_list_id_ = new ::org::xrpl::rpc::v1::SignerListID(*from.signer_list_id_);
  } else {
    signer_list_id_ = nullptr;
  }
  if (from.has_signer_quorum()) {
    signer_quorum_ = new ::org::xrpl::rpc::v1::SignerQuorum(*from.signer_quorum_);
  } else {
    signer_quorum_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.SignerList)
}

void SignerList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signer_quorum_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(signer_quorum_));
}

SignerList::~SignerList() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.SignerList)
  SharedDtor();
}

void SignerList::SharedDtor() {
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
  if (this != internal_default_instance()) delete owner_node_;
  if (this != internal_default_instance()) delete signer_list_id_;
  if (this != internal_default_instance()) delete signer_quorum_;
}

void SignerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignerList& SignerList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignerList_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void SignerList::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.SignerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signer_entries_.Clear();
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signer_list_id_ != nullptr) {
    delete signer_list_id_;
  }
  signer_list_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signer_quorum_ != nullptr) {
    delete signer_quorum_;
  }
  signer_quorum_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Flags flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_owner_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_signer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SignerListID signer_list_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_signer_list_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_signer_quorum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignerList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.SignerList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Flags flags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_signer_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SignerListID signer_list_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signer_list_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signer_quorum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.SignerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.SignerList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignerList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.SignerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 2;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 3;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::owner_node(this), output);
  }

  // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signer_entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->signer_entries(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.SignerListID signer_list_id = 6;
  if (this->has_signer_list_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::signer_list_id(this), output);
  }

  // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 7;
  if (this->has_signer_quorum()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::signer_quorum(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.SignerList)
}

::PROTOBUF_NAMESPACE_ID::uint8* SignerList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.SignerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 2;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 3;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::owner_node(this), target);
  }

  // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signer_entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->signer_entries(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.SignerListID signer_list_id = 6;
  if (this->has_signer_list_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::signer_list_id(this), target);
  }

  // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 7;
  if (this->has_signer_quorum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::signer_quorum(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.SignerList)
  return target;
}

size_t SignerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.SignerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.SignerEntry signer_entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->signer_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->signer_entries(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 2;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 3;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 4;
  if (this->has_owner_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_node_);
  }

  // .org.xrpl.rpc.v1.SignerListID signer_list_id = 6;
  if (this->has_signer_list_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signer_list_id_);
  }

  // .org.xrpl.rpc.v1.SignerQuorum signer_quorum = 7;
  if (this->has_signer_quorum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signer_quorum_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.SignerList)
  GOOGLE_DCHECK_NE(&from, this);
  const SignerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.SignerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.SignerList)
    MergeFrom(*source);
  }
}

void SignerList::MergeFrom(const SignerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.SignerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signer_entries_.MergeFrom(from.signer_entries_);
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
  if (from.has_owner_node()) {
    mutable_owner_node()->::org::xrpl::rpc::v1::OwnerNode::MergeFrom(from.owner_node());
  }
  if (from.has_signer_list_id()) {
    mutable_signer_list_id()->::org::xrpl::rpc::v1::SignerListID::MergeFrom(from.signer_list_id());
  }
  if (from.has_signer_quorum()) {
    mutable_signer_quorum()->::org::xrpl::rpc::v1::SignerQuorum::MergeFrom(from.signer_quorum());
  }
}

void SignerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.SignerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignerList::CopyFrom(const SignerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.SignerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignerList::IsInitialized() const {
  return true;
}

void SignerList::Swap(SignerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignerList::InternalSwap(SignerList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signer_entries_)->InternalSwap(CastToBase(&other->signer_entries_));
  swap(flags_, other->flags_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
  swap(owner_node_, other->owner_node_);
  swap(signer_list_id_, other->signer_list_id_);
  swap(signer_quorum_, other->signer_quorum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignerList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TicketObject::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_TicketObject_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
  ::org::xrpl::rpc::v1::_TicketObject_default_instance_._instance.get_mutable()->account_ = const_cast< ::org::xrpl::rpc::v1::Account*>(
      ::org::xrpl::rpc::v1::Account::internal_default_instance());
  ::org::xrpl::rpc::v1::_TicketObject_default_instance_._instance.get_mutable()->owner_node_ = const_cast< ::org::xrpl::rpc::v1::OwnerNode*>(
      ::org::xrpl::rpc::v1::OwnerNode::internal_default_instance());
  ::org::xrpl::rpc::v1::_TicketObject_default_instance_._instance.get_mutable()->previous_transaction_id_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionID*>(
      ::org::xrpl::rpc::v1::PreviousTransactionID::internal_default_instance());
  ::org::xrpl::rpc::v1::_TicketObject_default_instance_._instance.get_mutable()->previous_transaction_ledger_sequence_ = const_cast< ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence*>(
      ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::internal_default_instance());
  ::org::xrpl::rpc::v1::_TicketObject_default_instance_._instance.get_mutable()->ticket_sequence_ = const_cast< ::org::xrpl::rpc::v1::TicketSequence*>(
      ::org::xrpl::rpc::v1::TicketSequence::internal_default_instance());
}
class TicketObject::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::Flags& flags(const TicketObject* msg);
  static const ::org::xrpl::rpc::v1::Account& account(const TicketObject* msg);
  static const ::org::xrpl::rpc::v1::OwnerNode& owner_node(const TicketObject* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionID& previous_transaction_id(const TicketObject* msg);
  static const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence& previous_transaction_ledger_sequence(const TicketObject* msg);
  static const ::org::xrpl::rpc::v1::TicketSequence& ticket_sequence(const TicketObject* msg);
};

const ::org::xrpl::rpc::v1::Flags&
TicketObject::HasBitSetters::flags(const TicketObject* msg) {
  return *msg->flags_;
}
const ::org::xrpl::rpc::v1::Account&
TicketObject::HasBitSetters::account(const TicketObject* msg) {
  return *msg->account_;
}
const ::org::xrpl::rpc::v1::OwnerNode&
TicketObject::HasBitSetters::owner_node(const TicketObject* msg) {
  return *msg->owner_node_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionID&
TicketObject::HasBitSetters::previous_transaction_id(const TicketObject* msg) {
  return *msg->previous_transaction_id_;
}
const ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence&
TicketObject::HasBitSetters::previous_transaction_ledger_sequence(const TicketObject* msg) {
  return *msg->previous_transaction_ledger_sequence_;
}
const ::org::xrpl::rpc::v1::TicketSequence&
TicketObject::HasBitSetters::ticket_sequence(const TicketObject* msg) {
  return *msg->ticket_sequence_;
}
void TicketObject::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
void TicketObject::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
void TicketObject::clear_owner_node() {
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
}
void TicketObject::clear_previous_transaction_id() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
}
void TicketObject::clear_previous_transaction_ledger_sequence() {
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
}
void TicketObject::clear_ticket_sequence() {
  if (GetArenaNoVirtual() == nullptr && ticket_sequence_ != nullptr) {
    delete ticket_sequence_;
  }
  ticket_sequence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TicketObject::kFlagsFieldNumber;
const int TicketObject::kAccountFieldNumber;
const int TicketObject::kOwnerNodeFieldNumber;
const int TicketObject::kPreviousTransactionIdFieldNumber;
const int TicketObject::kPreviousTransactionLedgerSequenceFieldNumber;
const int TicketObject::kTicketSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TicketObject::TicketObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.TicketObject)
}
TicketObject::TicketObject(const TicketObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from.has_account()) {
    account_ = new ::org::xrpl::rpc::v1::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from.has_owner_node()) {
    owner_node_ = new ::org::xrpl::rpc::v1::OwnerNode(*from.owner_node_);
  } else {
    owner_node_ = nullptr;
  }
  if (from.has_previous_transaction_id()) {
    previous_transaction_id_ = new ::org::xrpl::rpc::v1::PreviousTransactionID(*from.previous_transaction_id_);
  } else {
    previous_transaction_id_ = nullptr;
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    previous_transaction_ledger_sequence_ = new ::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence(*from.previous_transaction_ledger_sequence_);
  } else {
    previous_transaction_ledger_sequence_ = nullptr;
  }
  if (from.has_ticket_sequence()) {
    ticket_sequence_ = new ::org::xrpl::rpc::v1::TicketSequence(*from.ticket_sequence_);
  } else {
    ticket_sequence_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TicketObject)
}

void TicketObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_sequence_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(ticket_sequence_));
}

TicketObject::~TicketObject() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TicketObject)
  SharedDtor();
}

void TicketObject::SharedDtor() {
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete owner_node_;
  if (this != internal_default_instance()) delete previous_transaction_id_;
  if (this != internal_default_instance()) delete previous_transaction_ledger_sequence_;
  if (this != internal_default_instance()) delete ticket_sequence_;
}

void TicketObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TicketObject& TicketObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TicketObject_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void TicketObject::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TicketObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_node_ != nullptr) {
    delete owner_node_;
  }
  owner_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_id_ != nullptr) {
    delete previous_transaction_id_;
  }
  previous_transaction_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && previous_transaction_ledger_sequence_ != nullptr) {
    delete previous_transaction_ledger_sequence_;
  }
  previous_transaction_ledger_sequence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ticket_sequence_ != nullptr) {
    delete ticket_sequence_;
  }
  ticket_sequence_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TicketObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.Flags flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Account account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.OwnerNode owner_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_owner_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_previous_transaction_ledger_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ticket_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TicketObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.TicketObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .org.xrpl.rpc.v1.Flags flags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Account account = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.OwnerNode owner_node = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_transaction_ledger_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.TicketObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.TicketObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TicketObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.TicketObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::flags(this), output);
  }

  // .org.xrpl.rpc.v1.Account account = 2;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::account(this), output);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 3;
  if (this->has_owner_node()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::owner_node(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 4;
  if (this->has_previous_transaction_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::previous_transaction_id(this), output);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 5;
  if (this->has_previous_transaction_ledger_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::previous_transaction_ledger_sequence(this), output);
  }

  // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 6;
  if (this->has_ticket_sequence()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ticket_sequence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.TicketObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* TicketObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TicketObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::flags(this), target);
  }

  // .org.xrpl.rpc.v1.Account account = 2;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::account(this), target);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 3;
  if (this->has_owner_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::owner_node(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 4;
  if (this->has_previous_transaction_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::previous_transaction_id(this), target);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 5;
  if (this->has_previous_transaction_ledger_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::previous_transaction_ledger_sequence(this), target);
  }

  // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 6;
  if (this->has_ticket_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ticket_sequence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TicketObject)
  return target;
}

size_t TicketObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TicketObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.Flags flags = 1;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .org.xrpl.rpc.v1.Account account = 2;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // .org.xrpl.rpc.v1.OwnerNode owner_node = 3;
  if (this->has_owner_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_node_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionID previous_transaction_id = 4;
  if (this->has_previous_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_id_);
  }

  // .org.xrpl.rpc.v1.PreviousTransactionLedgerSequence previous_transaction_ledger_sequence = 5;
  if (this->has_previous_transaction_ledger_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_transaction_ledger_sequence_);
  }

  // .org.xrpl.rpc.v1.TicketSequence ticket_sequence = 6;
  if (this->has_ticket_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_sequence_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TicketObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.TicketObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TicketObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TicketObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.TicketObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.TicketObject)
    MergeFrom(*source);
  }
}

void TicketObject::MergeFrom(const TicketObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TicketObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
  if (from.has_account()) {
    mutable_account()->::org::xrpl::rpc::v1::Account::MergeFrom(from.account());
  }
  if (from.has_owner_node()) {
    mutable_owner_node()->::org::xrpl::rpc::v1::OwnerNode::MergeFrom(from.owner_node());
  }
  if (from.has_previous_transaction_id()) {
    mutable_previous_transaction_id()->::org::xrpl::rpc::v1::PreviousTransactionID::MergeFrom(from.previous_transaction_id());
  }
  if (from.has_previous_transaction_ledger_sequence()) {
    mutable_previous_transaction_ledger_sequence()->::org::xrpl::rpc::v1::PreviousTransactionLedgerSequence::MergeFrom(from.previous_transaction_ledger_sequence());
  }
  if (from.has_ticket_sequence()) {
    mutable_ticket_sequence()->::org::xrpl::rpc::v1::TicketSequence::MergeFrom(from.ticket_sequence());
  }
}

void TicketObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.TicketObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketObject::CopyFrom(const TicketObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TicketObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketObject::IsInitialized() const {
  return true;
}

void TicketObject::Swap(TicketObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TicketObject::InternalSwap(TicketObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(flags_, other->flags_);
  swap(account_, other->account_);
  swap(owner_node_, other->owner_node_);
  swap(previous_transaction_id_, other->previous_transaction_id_);
  swap(previous_transaction_ledger_sequence_, other->previous_transaction_ledger_sequence_);
  swap(ticket_sequence_, other->ticket_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TicketObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NegativeUNL::InitAsDefaultInstance() {
  ::org::xrpl::rpc::v1::_NegativeUNL_default_instance_._instance.get_mutable()->validator_to_disable_ = const_cast< ::org::xrpl::rpc::v1::ValidatorToDisable*>(
      ::org::xrpl::rpc::v1::ValidatorToDisable::internal_default_instance());
  ::org::xrpl::rpc::v1::_NegativeUNL_default_instance_._instance.get_mutable()->validator_to_re_enable_ = const_cast< ::org::xrpl::rpc::v1::ValidatorToReEnable*>(
      ::org::xrpl::rpc::v1::ValidatorToReEnable::internal_default_instance());
  ::org::xrpl::rpc::v1::_NegativeUNL_default_instance_._instance.get_mutable()->flags_ = const_cast< ::org::xrpl::rpc::v1::Flags*>(
      ::org::xrpl::rpc::v1::Flags::internal_default_instance());
}
class NegativeUNL::HasBitSetters {
 public:
  static const ::org::xrpl::rpc::v1::ValidatorToDisable& validator_to_disable(const NegativeUNL* msg);
  static const ::org::xrpl::rpc::v1::ValidatorToReEnable& validator_to_re_enable(const NegativeUNL* msg);
  static const ::org::xrpl::rpc::v1::Flags& flags(const NegativeUNL* msg);
};

const ::org::xrpl::rpc::v1::ValidatorToDisable&
NegativeUNL::HasBitSetters::validator_to_disable(const NegativeUNL* msg) {
  return *msg->validator_to_disable_;
}
const ::org::xrpl::rpc::v1::ValidatorToReEnable&
NegativeUNL::HasBitSetters::validator_to_re_enable(const NegativeUNL* msg) {
  return *msg->validator_to_re_enable_;
}
const ::org::xrpl::rpc::v1::Flags&
NegativeUNL::HasBitSetters::flags(const NegativeUNL* msg) {
  return *msg->flags_;
}
void NegativeUNL::clear_disabled_validators() {
  disabled_validators_.Clear();
}
void NegativeUNL::clear_validator_to_disable() {
  if (GetArenaNoVirtual() == nullptr && validator_to_disable_ != nullptr) {
    delete validator_to_disable_;
  }
  validator_to_disable_ = nullptr;
}
void NegativeUNL::clear_validator_to_re_enable() {
  if (GetArenaNoVirtual() == nullptr && validator_to_re_enable_ != nullptr) {
    delete validator_to_re_enable_;
  }
  validator_to_re_enable_ = nullptr;
}
void NegativeUNL::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NegativeUNL::kDisabledValidatorsFieldNumber;
const int NegativeUNL::kValidatorToDisableFieldNumber;
const int NegativeUNL::kValidatorToReEnableFieldNumber;
const int NegativeUNL::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NegativeUNL::NegativeUNL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.xrpl.rpc.v1.NegativeUNL)
}
NegativeUNL::NegativeUNL(const NegativeUNL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      disabled_validators_(from.disabled_validators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_validator_to_disable()) {
    validator_to_disable_ = new ::org::xrpl::rpc::v1::ValidatorToDisable(*from.validator_to_disable_);
  } else {
    validator_to_disable_ = nullptr;
  }
  if (from.has_validator_to_re_enable()) {
    validator_to_re_enable_ = new ::org::xrpl::rpc::v1::ValidatorToReEnable(*from.validator_to_re_enable_);
  } else {
    validator_to_re_enable_ = nullptr;
  }
  if (from.has_flags()) {
    flags_ = new ::org::xrpl::rpc::v1::Flags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.NegativeUNL)
}

void NegativeUNL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  ::memset(&validator_to_disable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&validator_to_disable_)) + sizeof(flags_));
}

NegativeUNL::~NegativeUNL() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.NegativeUNL)
  SharedDtor();
}

void NegativeUNL::SharedDtor() {
  if (this != internal_default_instance()) delete validator_to_disable_;
  if (this != internal_default_instance()) delete validator_to_re_enable_;
  if (this != internal_default_instance()) delete flags_;
}

void NegativeUNL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NegativeUNL& NegativeUNL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NegativeUNL_org_2fxrpl_2frpc_2fv1_2fledger_5fobjects_2eproto.base);
  return *internal_default_instance();
}


void NegativeUNL::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.NegativeUNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_validators_.Clear();
  if (GetArenaNoVirtual() == nullptr && validator_to_disable_ != nullptr) {
    delete validator_to_disable_;
  }
  validator_to_disable_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && validator_to_re_enable_ != nullptr) {
    delete validator_to_re_enable_;
  }
  validator_to_re_enable_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NegativeUNL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.DisabledValidator disabled_validators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_disabled_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.ValidatorToDisable validator_to_disable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_validator_to_disable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.ValidatorToReEnable validator_to_re_enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_validator_to_re_enable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.Flags flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NegativeUNL::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.xrpl.rpc.v1.NegativeUNL)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.xrpl.rpc.v1.DisabledValidator disabled_validators = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_disabled_validators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.ValidatorToDisable validator_to_disable = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_validator_to_disable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.ValidatorToReEnable validator_to_re_enable = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_validator_to_re_enable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .org.xrpl.rpc.v1.Flags flags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.xrpl.rpc.v1.NegativeUNL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.xrpl.rpc.v1.NegativeUNL)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NegativeUNL::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.xrpl.rpc.v1.NegativeUNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.DisabledValidator disabled_validators = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disabled_validators_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->disabled_validators(static_cast<int>(i)),
      output);
  }

  // .org.xrpl.rpc.v1.ValidatorToDisable validator_to_disable = 2;
  if (this->has_validator_to_disable()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::validator_to_disable(this), output);
  }

  // .org.xrpl.rpc.v1.ValidatorToReEnable validator_to_re_enable = 3;
  if (this->has_validator_to_re_enable()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::validator_to_re_enable(this), output);
  }

  // .org.xrpl.rpc.v1.Flags flags = 4;
  if (this->has_flags()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::flags(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.xrpl.rpc.v1.NegativeUNL)
}

::PROTOBUF_NAMESPACE_ID::uint8* NegativeUNL::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.NegativeUNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.DisabledValidator disabled_validators = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disabled_validators_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->disabled_validators(static_cast<int>(i)), target);
  }

  // .org.xrpl.rpc.v1.ValidatorToDisable validator_to_disable = 2;
  if (this->has_validator_to_disable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::validator_to_disable(this), target);
  }

  // .org.xrpl.rpc.v1.ValidatorToReEnable validator_to_re_enable = 3;
  if (this->has_validator_to_re_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::validator_to_re_enable(this), target);
  }

  // .org.xrpl.rpc.v1.Flags flags = 4;
  if (this->has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::flags(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.NegativeUNL)
  return target;
}

size_t NegativeUNL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.NegativeUNL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.DisabledValidator disabled_validators = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->disabled_validators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->disabled_validators(static_cast<int>(i)));
    }
  }

  // .org.xrpl.rpc.v1.ValidatorToDisable validator_to_disable = 2;
  if (this->has_validator_to_disable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_to_disable_);
  }

  // .org.xrpl.rpc.v1.ValidatorToReEnable validator_to_re_enable = 3;
  if (this->has_validator_to_re_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_to_re_enable_);
  }

  // .org.xrpl.rpc.v1.Flags flags = 4;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NegativeUNL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.xrpl.rpc.v1.NegativeUNL)
  GOOGLE_DCHECK_NE(&from, this);
  const NegativeUNL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NegativeUNL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.xrpl.rpc.v1.NegativeUNL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.xrpl.rpc.v1.NegativeUNL)
    MergeFrom(*source);
  }
}

void NegativeUNL::MergeFrom(const NegativeUNL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.NegativeUNL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_validators_.MergeFrom(from.disabled_validators_);
  if (from.has_validator_to_disable()) {
    mutable_validator_to_disable()->::org::xrpl::rpc::v1::ValidatorToDisable::MergeFrom(from.validator_to_disable());
  }
  if (from.has_validator_to_re_enable()) {
    mutable_validator_to_re_enable()->::org::xrpl::rpc::v1::ValidatorToReEnable::MergeFrom(from.validator_to_re_enable());
  }
  if (from.has_flags()) {
    mutable_flags()->::org::xrpl::rpc::v1::Flags::MergeFrom(from.flags());
  }
}

void NegativeUNL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.xrpl.rpc.v1.NegativeUNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegativeUNL::CopyFrom(const NegativeUNL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.NegativeUNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegativeUNL::IsInitialized() const {
  return true;
}

void NegativeUNL::Swap(NegativeUNL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NegativeUNL::InternalSwap(NegativeUNL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&disabled_validators_)->InternalSwap(CastToBase(&other->disabled_validators_));
  swap(validator_to_disable_, other->validator_to_disable_);
  swap(validator_to_re_enable_, other->validator_to_re_enable_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NegativeUNL::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::LedgerObject* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::LedgerObject >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::LedgerObject >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::AccountRoot* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::AccountRoot >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::AccountRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Amendments_Amendment* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Amendments_Amendment >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Amendments_Amendment >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Amendments_Majority* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Amendments_Majority >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Amendments_Majority >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Amendments* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Amendments >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Amendments >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Check* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Check >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Check >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::DepositPreauthObject* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::DepositPreauthObject >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::DepositPreauthObject >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::DirectoryNode* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::DirectoryNode >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::DirectoryNode >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Escrow* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Escrow >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Escrow >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::FeeSettings* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::FeeSettings >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::FeeSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::LedgerHashes* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::LedgerHashes >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::LedgerHashes >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::Offer* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::Offer >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::Offer >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::PayChannel* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::PayChannel >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::PayChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::RippleState* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::RippleState >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::RippleState >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::SignerList* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::SignerList >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::SignerList >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TicketObject* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TicketObject >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::TicketObject >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::NegativeUNL* Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::NegativeUNL >(Arena* arena) {
  return Arena::CreateInternal< ::org::xrpl::rpc::v1::NegativeUNL >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
