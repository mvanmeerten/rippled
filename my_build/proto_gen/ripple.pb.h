// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ripple.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ripple_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ripple_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ripple_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ripple_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ripple_2eproto;
namespace protocol {
class TMCluster;
class TMClusterDefaultTypeInternal;
extern TMClusterDefaultTypeInternal _TMCluster_default_instance_;
class TMClusterNode;
class TMClusterNodeDefaultTypeInternal;
extern TMClusterNodeDefaultTypeInternal _TMClusterNode_default_instance_;
class TMEndpoints;
class TMEndpointsDefaultTypeInternal;
extern TMEndpointsDefaultTypeInternal _TMEndpoints_default_instance_;
class TMEndpoints_TMEndpointv2;
class TMEndpoints_TMEndpointv2DefaultTypeInternal;
extern TMEndpoints_TMEndpointv2DefaultTypeInternal _TMEndpoints_TMEndpointv2_default_instance_;
class TMGetLedger;
class TMGetLedgerDefaultTypeInternal;
extern TMGetLedgerDefaultTypeInternal _TMGetLedger_default_instance_;
class TMGetObjectByHash;
class TMGetObjectByHashDefaultTypeInternal;
extern TMGetObjectByHashDefaultTypeInternal _TMGetObjectByHash_default_instance_;
class TMGetPeerShardInfo;
class TMGetPeerShardInfoDefaultTypeInternal;
extern TMGetPeerShardInfoDefaultTypeInternal _TMGetPeerShardInfo_default_instance_;
class TMGetShardInfo;
class TMGetShardInfoDefaultTypeInternal;
extern TMGetShardInfoDefaultTypeInternal _TMGetShardInfo_default_instance_;
class TMHaveTransactionSet;
class TMHaveTransactionSetDefaultTypeInternal;
extern TMHaveTransactionSetDefaultTypeInternal _TMHaveTransactionSet_default_instance_;
class TMIndexedObject;
class TMIndexedObjectDefaultTypeInternal;
extern TMIndexedObjectDefaultTypeInternal _TMIndexedObject_default_instance_;
class TMLedgerData;
class TMLedgerDataDefaultTypeInternal;
extern TMLedgerDataDefaultTypeInternal _TMLedgerData_default_instance_;
class TMLedgerNode;
class TMLedgerNodeDefaultTypeInternal;
extern TMLedgerNodeDefaultTypeInternal _TMLedgerNode_default_instance_;
class TMLink;
class TMLinkDefaultTypeInternal;
extern TMLinkDefaultTypeInternal _TMLink_default_instance_;
class TMLoadSource;
class TMLoadSourceDefaultTypeInternal;
extern TMLoadSourceDefaultTypeInternal _TMLoadSource_default_instance_;
class TMManifest;
class TMManifestDefaultTypeInternal;
extern TMManifestDefaultTypeInternal _TMManifest_default_instance_;
class TMManifests;
class TMManifestsDefaultTypeInternal;
extern TMManifestsDefaultTypeInternal _TMManifests_default_instance_;
class TMPeerShardInfo;
class TMPeerShardInfoDefaultTypeInternal;
extern TMPeerShardInfoDefaultTypeInternal _TMPeerShardInfo_default_instance_;
class TMPing;
class TMPingDefaultTypeInternal;
extern TMPingDefaultTypeInternal _TMPing_default_instance_;
class TMProofPathRequest;
class TMProofPathRequestDefaultTypeInternal;
extern TMProofPathRequestDefaultTypeInternal _TMProofPathRequest_default_instance_;
class TMProofPathResponse;
class TMProofPathResponseDefaultTypeInternal;
extern TMProofPathResponseDefaultTypeInternal _TMProofPathResponse_default_instance_;
class TMProposeSet;
class TMProposeSetDefaultTypeInternal;
extern TMProposeSetDefaultTypeInternal _TMProposeSet_default_instance_;
class TMReplayDeltaRequest;
class TMReplayDeltaRequestDefaultTypeInternal;
extern TMReplayDeltaRequestDefaultTypeInternal _TMReplayDeltaRequest_default_instance_;
class TMReplayDeltaResponse;
class TMReplayDeltaResponseDefaultTypeInternal;
extern TMReplayDeltaResponseDefaultTypeInternal _TMReplayDeltaResponse_default_instance_;
class TMShardInfo;
class TMShardInfoDefaultTypeInternal;
extern TMShardInfoDefaultTypeInternal _TMShardInfo_default_instance_;
class TMSquelch;
class TMSquelchDefaultTypeInternal;
extern TMSquelchDefaultTypeInternal _TMSquelch_default_instance_;
class TMStatusChange;
class TMStatusChangeDefaultTypeInternal;
extern TMStatusChangeDefaultTypeInternal _TMStatusChange_default_instance_;
class TMTransaction;
class TMTransactionDefaultTypeInternal;
extern TMTransactionDefaultTypeInternal _TMTransaction_default_instance_;
class TMValidation;
class TMValidationDefaultTypeInternal;
extern TMValidationDefaultTypeInternal _TMValidation_default_instance_;
class TMValidatorList;
class TMValidatorListDefaultTypeInternal;
extern TMValidatorListDefaultTypeInternal _TMValidatorList_default_instance_;
class TMValidatorListCollection;
class TMValidatorListCollectionDefaultTypeInternal;
extern TMValidatorListCollectionDefaultTypeInternal _TMValidatorListCollection_default_instance_;
class ValidatorBlobInfo;
class ValidatorBlobInfoDefaultTypeInternal;
extern ValidatorBlobInfoDefaultTypeInternal _ValidatorBlobInfo_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::TMCluster* Arena::CreateMaybeMessage<::protocol::TMCluster>(Arena*);
template<> ::protocol::TMClusterNode* Arena::CreateMaybeMessage<::protocol::TMClusterNode>(Arena*);
template<> ::protocol::TMEndpoints* Arena::CreateMaybeMessage<::protocol::TMEndpoints>(Arena*);
template<> ::protocol::TMEndpoints_TMEndpointv2* Arena::CreateMaybeMessage<::protocol::TMEndpoints_TMEndpointv2>(Arena*);
template<> ::protocol::TMGetLedger* Arena::CreateMaybeMessage<::protocol::TMGetLedger>(Arena*);
template<> ::protocol::TMGetObjectByHash* Arena::CreateMaybeMessage<::protocol::TMGetObjectByHash>(Arena*);
template<> ::protocol::TMGetPeerShardInfo* Arena::CreateMaybeMessage<::protocol::TMGetPeerShardInfo>(Arena*);
template<> ::protocol::TMGetShardInfo* Arena::CreateMaybeMessage<::protocol::TMGetShardInfo>(Arena*);
template<> ::protocol::TMHaveTransactionSet* Arena::CreateMaybeMessage<::protocol::TMHaveTransactionSet>(Arena*);
template<> ::protocol::TMIndexedObject* Arena::CreateMaybeMessage<::protocol::TMIndexedObject>(Arena*);
template<> ::protocol::TMLedgerData* Arena::CreateMaybeMessage<::protocol::TMLedgerData>(Arena*);
template<> ::protocol::TMLedgerNode* Arena::CreateMaybeMessage<::protocol::TMLedgerNode>(Arena*);
template<> ::protocol::TMLink* Arena::CreateMaybeMessage<::protocol::TMLink>(Arena*);
template<> ::protocol::TMLoadSource* Arena::CreateMaybeMessage<::protocol::TMLoadSource>(Arena*);
template<> ::protocol::TMManifest* Arena::CreateMaybeMessage<::protocol::TMManifest>(Arena*);
template<> ::protocol::TMManifests* Arena::CreateMaybeMessage<::protocol::TMManifests>(Arena*);
template<> ::protocol::TMPeerShardInfo* Arena::CreateMaybeMessage<::protocol::TMPeerShardInfo>(Arena*);
template<> ::protocol::TMPing* Arena::CreateMaybeMessage<::protocol::TMPing>(Arena*);
template<> ::protocol::TMProofPathRequest* Arena::CreateMaybeMessage<::protocol::TMProofPathRequest>(Arena*);
template<> ::protocol::TMProofPathResponse* Arena::CreateMaybeMessage<::protocol::TMProofPathResponse>(Arena*);
template<> ::protocol::TMProposeSet* Arena::CreateMaybeMessage<::protocol::TMProposeSet>(Arena*);
template<> ::protocol::TMReplayDeltaRequest* Arena::CreateMaybeMessage<::protocol::TMReplayDeltaRequest>(Arena*);
template<> ::protocol::TMReplayDeltaResponse* Arena::CreateMaybeMessage<::protocol::TMReplayDeltaResponse>(Arena*);
template<> ::protocol::TMShardInfo* Arena::CreateMaybeMessage<::protocol::TMShardInfo>(Arena*);
template<> ::protocol::TMSquelch* Arena::CreateMaybeMessage<::protocol::TMSquelch>(Arena*);
template<> ::protocol::TMStatusChange* Arena::CreateMaybeMessage<::protocol::TMStatusChange>(Arena*);
template<> ::protocol::TMTransaction* Arena::CreateMaybeMessage<::protocol::TMTransaction>(Arena*);
template<> ::protocol::TMValidation* Arena::CreateMaybeMessage<::protocol::TMValidation>(Arena*);
template<> ::protocol::TMValidatorList* Arena::CreateMaybeMessage<::protocol::TMValidatorList>(Arena*);
template<> ::protocol::TMValidatorListCollection* Arena::CreateMaybeMessage<::protocol::TMValidatorListCollection>(Arena*);
template<> ::protocol::ValidatorBlobInfo* Arena::CreateMaybeMessage<::protocol::ValidatorBlobInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum TMGetObjectByHash_ObjectType : int {
  TMGetObjectByHash_ObjectType_otUNKNOWN = 0,
  TMGetObjectByHash_ObjectType_otLEDGER = 1,
  TMGetObjectByHash_ObjectType_otTRANSACTION = 2,
  TMGetObjectByHash_ObjectType_otTRANSACTION_NODE = 3,
  TMGetObjectByHash_ObjectType_otSTATE_NODE = 4,
  TMGetObjectByHash_ObjectType_otCAS_OBJECT = 5,
  TMGetObjectByHash_ObjectType_otFETCH_PACK = 6
};
bool TMGetObjectByHash_ObjectType_IsValid(int value);
constexpr TMGetObjectByHash_ObjectType TMGetObjectByHash_ObjectType_ObjectType_MIN = TMGetObjectByHash_ObjectType_otUNKNOWN;
constexpr TMGetObjectByHash_ObjectType TMGetObjectByHash_ObjectType_ObjectType_MAX = TMGetObjectByHash_ObjectType_otFETCH_PACK;
constexpr int TMGetObjectByHash_ObjectType_ObjectType_ARRAYSIZE = TMGetObjectByHash_ObjectType_ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TMGetObjectByHash_ObjectType_descriptor();
template<typename T>
inline const std::string& TMGetObjectByHash_ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TMGetObjectByHash_ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TMGetObjectByHash_ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TMGetObjectByHash_ObjectType_descriptor(), enum_t_value);
}
inline bool TMGetObjectByHash_ObjectType_Parse(
    const std::string& name, TMGetObjectByHash_ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TMGetObjectByHash_ObjectType>(
    TMGetObjectByHash_ObjectType_descriptor(), name, value);
}
enum TMPing_pingType : int {
  TMPing_pingType_ptPING = 0,
  TMPing_pingType_ptPONG = 1
};
bool TMPing_pingType_IsValid(int value);
constexpr TMPing_pingType TMPing_pingType_pingType_MIN = TMPing_pingType_ptPING;
constexpr TMPing_pingType TMPing_pingType_pingType_MAX = TMPing_pingType_ptPONG;
constexpr int TMPing_pingType_pingType_ARRAYSIZE = TMPing_pingType_pingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TMPing_pingType_descriptor();
template<typename T>
inline const std::string& TMPing_pingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TMPing_pingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TMPing_pingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TMPing_pingType_descriptor(), enum_t_value);
}
inline bool TMPing_pingType_Parse(
    const std::string& name, TMPing_pingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TMPing_pingType>(
    TMPing_pingType_descriptor(), name, value);
}
enum MessageType : int {
  mtMANIFESTS = 2,
  mtPING = 3,
  mtCLUSTER = 5,
  mtENDPOINTS = 15,
  mtTRANSACTION = 30,
  mtGET_LEDGER = 31,
  mtLEDGER_DATA = 32,
  mtPROPOSE_LEDGER = 33,
  mtSTATUS_CHANGE = 34,
  mtHAVE_SET = 35,
  mtVALIDATION = 41,
  mtGET_OBJECTS = 42,
  mtGET_SHARD_INFO = 50,
  mtSHARD_INFO = 51,
  mtGET_PEER_SHARD_INFO = 52,
  mtPEER_SHARD_INFO = 53,
  mtVALIDATORLIST = 54,
  mtSQUELCH = 55,
  mtVALIDATORLISTCOLLECTION = 56,
  mtPROOF_PATH_REQ = 57,
  mtPROOF_PATH_RESPONSE = 58,
  mtREPLAY_DELTA_REQ = 59,
  mtREPLAY_DELTA_RESPONSE = 60
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = mtMANIFESTS;
constexpr MessageType MessageType_MAX = mtREPLAY_DELTA_RESPONSE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum TransactionStatus : int {
  tsNEW = 1,
  tsCURRENT = 2,
  tsCOMMITED = 3,
  tsREJECT_CONFLICT = 4,
  tsREJECT_INVALID = 5,
  tsREJECT_FUNDS = 6,
  tsHELD_SEQ = 7,
  tsHELD_LEDGER = 8
};
bool TransactionStatus_IsValid(int value);
constexpr TransactionStatus TransactionStatus_MIN = tsNEW;
constexpr TransactionStatus TransactionStatus_MAX = tsHELD_LEDGER;
constexpr int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor();
template<typename T>
inline const std::string& TransactionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionStatus_descriptor(), enum_t_value);
}
inline bool TransactionStatus_Parse(
    const std::string& name, TransactionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
enum NodeStatus : int {
  nsCONNECTING = 1,
  nsCONNECTED = 2,
  nsMONITORING = 3,
  nsVALIDATING = 4,
  nsSHUTTING = 5
};
bool NodeStatus_IsValid(int value);
constexpr NodeStatus NodeStatus_MIN = nsCONNECTING;
constexpr NodeStatus NodeStatus_MAX = nsSHUTTING;
constexpr int NodeStatus_ARRAYSIZE = NodeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeStatus_descriptor();
template<typename T>
inline const std::string& NodeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeStatus_descriptor(), enum_t_value);
}
inline bool NodeStatus_Parse(
    const std::string& name, NodeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeStatus>(
    NodeStatus_descriptor(), name, value);
}
enum NodeEvent : int {
  neCLOSING_LEDGER = 1,
  neACCEPTED_LEDGER = 2,
  neSWITCHED_LEDGER = 3,
  neLOST_SYNC = 4
};
bool NodeEvent_IsValid(int value);
constexpr NodeEvent NodeEvent_MIN = neCLOSING_LEDGER;
constexpr NodeEvent NodeEvent_MAX = neLOST_SYNC;
constexpr int NodeEvent_ARRAYSIZE = NodeEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeEvent_descriptor();
template<typename T>
inline const std::string& NodeEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeEvent_descriptor(), enum_t_value);
}
inline bool NodeEvent_Parse(
    const std::string& name, NodeEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeEvent>(
    NodeEvent_descriptor(), name, value);
}
enum TxSetStatus : int {
  tsHAVE = 1,
  tsCAN_GET = 2,
  tsNEED = 3
};
bool TxSetStatus_IsValid(int value);
constexpr TxSetStatus TxSetStatus_MIN = tsHAVE;
constexpr TxSetStatus TxSetStatus_MAX = tsNEED;
constexpr int TxSetStatus_ARRAYSIZE = TxSetStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxSetStatus_descriptor();
template<typename T>
inline const std::string& TxSetStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TxSetStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TxSetStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TxSetStatus_descriptor(), enum_t_value);
}
inline bool TxSetStatus_Parse(
    const std::string& name, TxSetStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TxSetStatus>(
    TxSetStatus_descriptor(), name, value);
}
enum TMLedgerInfoType : int {
  liBASE = 0,
  liTX_NODE = 1,
  liAS_NODE = 2,
  liTS_CANDIDATE = 3
};
bool TMLedgerInfoType_IsValid(int value);
constexpr TMLedgerInfoType TMLedgerInfoType_MIN = liBASE;
constexpr TMLedgerInfoType TMLedgerInfoType_MAX = liTS_CANDIDATE;
constexpr int TMLedgerInfoType_ARRAYSIZE = TMLedgerInfoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TMLedgerInfoType_descriptor();
template<typename T>
inline const std::string& TMLedgerInfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TMLedgerInfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TMLedgerInfoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TMLedgerInfoType_descriptor(), enum_t_value);
}
inline bool TMLedgerInfoType_Parse(
    const std::string& name, TMLedgerInfoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TMLedgerInfoType>(
    TMLedgerInfoType_descriptor(), name, value);
}
enum TMLedgerType : int {
  ltACCEPTED = 0,
  ltCURRENT = 1,
  ltCLOSED = 2
};
bool TMLedgerType_IsValid(int value);
constexpr TMLedgerType TMLedgerType_MIN = ltACCEPTED;
constexpr TMLedgerType TMLedgerType_MAX = ltCLOSED;
constexpr int TMLedgerType_ARRAYSIZE = TMLedgerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TMLedgerType_descriptor();
template<typename T>
inline const std::string& TMLedgerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TMLedgerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TMLedgerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TMLedgerType_descriptor(), enum_t_value);
}
inline bool TMLedgerType_Parse(
    const std::string& name, TMLedgerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TMLedgerType>(
    TMLedgerType_descriptor(), name, value);
}
enum TMQueryType : int {
  qtINDIRECT = 0
};
bool TMQueryType_IsValid(int value);
constexpr TMQueryType TMQueryType_MIN = qtINDIRECT;
constexpr TMQueryType TMQueryType_MAX = qtINDIRECT;
constexpr int TMQueryType_ARRAYSIZE = TMQueryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TMQueryType_descriptor();
template<typename T>
inline const std::string& TMQueryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TMQueryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TMQueryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TMQueryType_descriptor(), enum_t_value);
}
inline bool TMQueryType_Parse(
    const std::string& name, TMQueryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TMQueryType>(
    TMQueryType_descriptor(), name, value);
}
enum TMReplyError : int {
  reNO_LEDGER = 1,
  reNO_NODE = 2,
  reBAD_REQUEST = 3
};
bool TMReplyError_IsValid(int value);
constexpr TMReplyError TMReplyError_MIN = reNO_LEDGER;
constexpr TMReplyError TMReplyError_MAX = reBAD_REQUEST;
constexpr int TMReplyError_ARRAYSIZE = TMReplyError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TMReplyError_descriptor();
template<typename T>
inline const std::string& TMReplyError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TMReplyError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TMReplyError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TMReplyError_descriptor(), enum_t_value);
}
inline bool TMReplyError_Parse(
    const std::string& name, TMReplyError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TMReplyError>(
    TMReplyError_descriptor(), name, value);
}
enum TMLedgerMapType : int {
  lmTRANASCTION = 1,
  lmACCOUNT_STATE = 2
};
bool TMLedgerMapType_IsValid(int value);
constexpr TMLedgerMapType TMLedgerMapType_MIN = lmTRANASCTION;
constexpr TMLedgerMapType TMLedgerMapType_MAX = lmACCOUNT_STATE;
constexpr int TMLedgerMapType_ARRAYSIZE = TMLedgerMapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TMLedgerMapType_descriptor();
template<typename T>
inline const std::string& TMLedgerMapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TMLedgerMapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TMLedgerMapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TMLedgerMapType_descriptor(), enum_t_value);
}
inline bool TMLedgerMapType_Parse(
    const std::string& name, TMLedgerMapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TMLedgerMapType>(
    TMLedgerMapType_descriptor(), name, value);
}
// ===================================================================

class TMManifest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMManifest) */ {
 public:
  TMManifest();
  virtual ~TMManifest();

  TMManifest(const TMManifest& from);
  TMManifest(TMManifest&& from) noexcept
    : TMManifest() {
    *this = ::std::move(from);
  }

  inline TMManifest& operator=(const TMManifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMManifest& operator=(TMManifest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMManifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMManifest* internal_default_instance() {
    return reinterpret_cast<const TMManifest*>(
               &_TMManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TMManifest* other);
  friend void swap(TMManifest& a, TMManifest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMManifest* New() const final {
    return CreateMaybeMessage<TMManifest>(nullptr);
  }

  TMManifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMManifest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMManifest& from);
  void MergeFrom(const TMManifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMManifest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMManifest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes stobject = 1;
  bool has_stobject() const;
  void clear_stobject();
  static const int kStobjectFieldNumber = 1;
  const std::string& stobject() const;
  void set_stobject(const std::string& value);
  void set_stobject(std::string&& value);
  void set_stobject(const char* value);
  void set_stobject(const void* value, size_t size);
  std::string* mutable_stobject();
  std::string* release_stobject();
  void set_allocated_stobject(std::string* stobject);

  // @@protoc_insertion_point(class_scope:protocol.TMManifest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stobject_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMManifests :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMManifests) */ {
 public:
  TMManifests();
  virtual ~TMManifests();

  TMManifests(const TMManifests& from);
  TMManifests(TMManifests&& from) noexcept
    : TMManifests() {
    *this = ::std::move(from);
  }

  inline TMManifests& operator=(const TMManifests& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMManifests& operator=(TMManifests&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMManifests& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMManifests* internal_default_instance() {
    return reinterpret_cast<const TMManifests*>(
               &_TMManifests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TMManifests* other);
  friend void swap(TMManifests& a, TMManifests& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMManifests* New() const final {
    return CreateMaybeMessage<TMManifests>(nullptr);
  }

  TMManifests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMManifests>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMManifests& from);
  void MergeFrom(const TMManifests& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMManifests* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMManifests";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.TMManifest list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::protocol::TMManifest* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMManifest >*
      mutable_list();
  const ::protocol::TMManifest& list(int index) const;
  ::protocol::TMManifest* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMManifest >&
      list() const;

  // optional bool history = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_history() const;
  PROTOBUF_DEPRECATED void clear_history();
  PROTOBUF_DEPRECATED static const int kHistoryFieldNumber = 2;
  PROTOBUF_DEPRECATED bool history() const;
  PROTOBUF_DEPRECATED void set_history(bool value);

  // @@protoc_insertion_point(class_scope:protocol.TMManifests)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMManifest > list_;
  bool history_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMClusterNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMClusterNode) */ {
 public:
  TMClusterNode();
  virtual ~TMClusterNode();

  TMClusterNode(const TMClusterNode& from);
  TMClusterNode(TMClusterNode&& from) noexcept
    : TMClusterNode() {
    *this = ::std::move(from);
  }

  inline TMClusterNode& operator=(const TMClusterNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMClusterNode& operator=(TMClusterNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMClusterNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMClusterNode* internal_default_instance() {
    return reinterpret_cast<const TMClusterNode*>(
               &_TMClusterNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TMClusterNode* other);
  friend void swap(TMClusterNode& a, TMClusterNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMClusterNode* New() const final {
    return CreateMaybeMessage<TMClusterNode>(nullptr);
  }

  TMClusterNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMClusterNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMClusterNode& from);
  void MergeFrom(const TMClusterNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMClusterNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMClusterNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string publicKey = 1;
  bool has_publickey() const;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 1;
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);

  // optional string nodeName = 4;
  bool has_nodename() const;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 4;
  const std::string& nodename() const;
  void set_nodename(const std::string& value);
  void set_nodename(std::string&& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  std::string* mutable_nodename();
  std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);

  // optional string address = 5;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // required uint32 reportTime = 2;
  bool has_reporttime() const;
  void clear_reporttime();
  static const int kReportTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 reporttime() const;
  void set_reporttime(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 nodeLoad = 3;
  bool has_nodeload() const;
  void clear_nodeload();
  static const int kNodeLoadFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeload() const;
  void set_nodeload(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMClusterNode)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reporttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeload_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMLoadSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMLoadSource) */ {
 public:
  TMLoadSource();
  virtual ~TMLoadSource();

  TMLoadSource(const TMLoadSource& from);
  TMLoadSource(TMLoadSource&& from) noexcept
    : TMLoadSource() {
    *this = ::std::move(from);
  }

  inline TMLoadSource& operator=(const TMLoadSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMLoadSource& operator=(TMLoadSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMLoadSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMLoadSource* internal_default_instance() {
    return reinterpret_cast<const TMLoadSource*>(
               &_TMLoadSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TMLoadSource* other);
  friend void swap(TMLoadSource& a, TMLoadSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMLoadSource* New() const final {
    return CreateMaybeMessage<TMLoadSource>(nullptr);
  }

  TMLoadSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMLoadSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMLoadSource& from);
  void MergeFrom(const TMLoadSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMLoadSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMLoadSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint32 cost = 2;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMLoadSource)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMCluster :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMCluster) */ {
 public:
  TMCluster();
  virtual ~TMCluster();

  TMCluster(const TMCluster& from);
  TMCluster(TMCluster&& from) noexcept
    : TMCluster() {
    *this = ::std::move(from);
  }

  inline TMCluster& operator=(const TMCluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMCluster& operator=(TMCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMCluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMCluster* internal_default_instance() {
    return reinterpret_cast<const TMCluster*>(
               &_TMCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TMCluster* other);
  friend void swap(TMCluster& a, TMCluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMCluster* New() const final {
    return CreateMaybeMessage<TMCluster>(nullptr);
  }

  TMCluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMCluster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMCluster& from);
  void MergeFrom(const TMCluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMCluster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMCluster";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.TMClusterNode clusterNodes = 1;
  int clusternodes_size() const;
  void clear_clusternodes();
  static const int kClusterNodesFieldNumber = 1;
  ::protocol::TMClusterNode* mutable_clusternodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMClusterNode >*
      mutable_clusternodes();
  const ::protocol::TMClusterNode& clusternodes(int index) const;
  ::protocol::TMClusterNode* add_clusternodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMClusterNode >&
      clusternodes() const;

  // repeated .protocol.TMLoadSource loadSources = 2;
  int loadsources_size() const;
  void clear_loadsources();
  static const int kLoadSourcesFieldNumber = 2;
  ::protocol::TMLoadSource* mutable_loadsources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLoadSource >*
      mutable_loadsources();
  const ::protocol::TMLoadSource& loadsources(int index) const;
  ::protocol::TMLoadSource* add_loadsources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLoadSource >&
      loadsources() const;

  // @@protoc_insertion_point(class_scope:protocol.TMCluster)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMClusterNode > clusternodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLoadSource > loadsources_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMGetShardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMGetShardInfo) */ {
 public:
  TMGetShardInfo();
  virtual ~TMGetShardInfo();

  TMGetShardInfo(const TMGetShardInfo& from);
  TMGetShardInfo(TMGetShardInfo&& from) noexcept
    : TMGetShardInfo() {
    *this = ::std::move(from);
  }

  inline TMGetShardInfo& operator=(const TMGetShardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMGetShardInfo& operator=(TMGetShardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMGetShardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMGetShardInfo* internal_default_instance() {
    return reinterpret_cast<const TMGetShardInfo*>(
               &_TMGetShardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TMGetShardInfo* other);
  friend void swap(TMGetShardInfo& a, TMGetShardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMGetShardInfo* New() const final {
    return CreateMaybeMessage<TMGetShardInfo>(nullptr);
  }

  TMGetShardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMGetShardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMGetShardInfo& from);
  void MergeFrom(const TMGetShardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMGetShardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMGetShardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 peerchain = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int peerchain_size() const;
  PROTOBUF_DEPRECATED void clear_peerchain();
  PROTOBUF_DEPRECATED static const int kPeerchainFieldNumber = 3;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 peerchain(int index) const;
  PROTOBUF_DEPRECATED void set_peerchain(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED void add_peerchain(::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      peerchain() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_peerchain();

  // required uint32 hops = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_hops() const;
  PROTOBUF_DEPRECATED void clear_hops();
  PROTOBUF_DEPRECATED static const int kHopsFieldNumber = 1;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 hops() const;
  PROTOBUF_DEPRECATED void set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool lastLink = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_lastlink() const;
  PROTOBUF_DEPRECATED void clear_lastlink();
  PROTOBUF_DEPRECATED static const int kLastLinkFieldNumber = 2;
  PROTOBUF_DEPRECATED bool lastlink() const;
  PROTOBUF_DEPRECATED void set_lastlink(bool value);

  // @@protoc_insertion_point(class_scope:protocol.TMGetShardInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > peerchain_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops_;
  bool lastlink_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMShardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMShardInfo) */ {
 public:
  TMShardInfo();
  virtual ~TMShardInfo();

  TMShardInfo(const TMShardInfo& from);
  TMShardInfo(TMShardInfo&& from) noexcept
    : TMShardInfo() {
    *this = ::std::move(from);
  }

  inline TMShardInfo& operator=(const TMShardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMShardInfo& operator=(TMShardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMShardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMShardInfo* internal_default_instance() {
    return reinterpret_cast<const TMShardInfo*>(
               &_TMShardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TMShardInfo* other);
  friend void swap(TMShardInfo& a, TMShardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMShardInfo* New() const final {
    return CreateMaybeMessage<TMShardInfo>(nullptr);
  }

  TMShardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMShardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMShardInfo& from);
  void MergeFrom(const TMShardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMShardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMShardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 peerchain = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int peerchain_size() const;
  PROTOBUF_DEPRECATED void clear_peerchain();
  PROTOBUF_DEPRECATED static const int kPeerchainFieldNumber = 5;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 peerchain(int index) const;
  PROTOBUF_DEPRECATED void set_peerchain(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED void add_peerchain(::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      peerchain() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_peerchain();

  // required string shardIndexes = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_shardindexes() const;
  PROTOBUF_DEPRECATED void clear_shardindexes();
  PROTOBUF_DEPRECATED static const int kShardIndexesFieldNumber = 1;
  PROTOBUF_DEPRECATED const std::string& shardindexes() const;
  PROTOBUF_DEPRECATED void set_shardindexes(const std::string& value);
  PROTOBUF_DEPRECATED void set_shardindexes(std::string&& value);
  PROTOBUF_DEPRECATED void set_shardindexes(const char* value);
  PROTOBUF_DEPRECATED void set_shardindexes(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_shardindexes();
  PROTOBUF_DEPRECATED std::string* release_shardindexes();
  PROTOBUF_DEPRECATED void set_allocated_shardindexes(std::string* shardindexes);

  // optional bytes nodePubKey = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_nodepubkey() const;
  PROTOBUF_DEPRECATED void clear_nodepubkey();
  PROTOBUF_DEPRECATED static const int kNodePubKeyFieldNumber = 2;
  PROTOBUF_DEPRECATED const std::string& nodepubkey() const;
  PROTOBUF_DEPRECATED void set_nodepubkey(const std::string& value);
  PROTOBUF_DEPRECATED void set_nodepubkey(std::string&& value);
  PROTOBUF_DEPRECATED void set_nodepubkey(const char* value);
  PROTOBUF_DEPRECATED void set_nodepubkey(const void* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_nodepubkey();
  PROTOBUF_DEPRECATED std::string* release_nodepubkey();
  PROTOBUF_DEPRECATED void set_allocated_nodepubkey(std::string* nodepubkey);

  // optional string endpoint = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_endpoint() const;
  PROTOBUF_DEPRECATED void clear_endpoint();
  PROTOBUF_DEPRECATED static const int kEndpointFieldNumber = 3;
  PROTOBUF_DEPRECATED const std::string& endpoint() const;
  PROTOBUF_DEPRECATED void set_endpoint(const std::string& value);
  PROTOBUF_DEPRECATED void set_endpoint(std::string&& value);
  PROTOBUF_DEPRECATED void set_endpoint(const char* value);
  PROTOBUF_DEPRECATED void set_endpoint(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_endpoint();
  PROTOBUF_DEPRECATED std::string* release_endpoint();
  PROTOBUF_DEPRECATED void set_allocated_endpoint(std::string* endpoint);

  // optional bool lastLink = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_lastlink() const;
  PROTOBUF_DEPRECATED void clear_lastlink();
  PROTOBUF_DEPRECATED static const int kLastLinkFieldNumber = 4;
  PROTOBUF_DEPRECATED bool lastlink() const;
  PROTOBUF_DEPRECATED void set_lastlink(bool value);

  // @@protoc_insertion_point(class_scope:protocol.TMShardInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > peerchain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shardindexes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodepubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  bool lastlink_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMLink) */ {
 public:
  TMLink();
  virtual ~TMLink();

  TMLink(const TMLink& from);
  TMLink(TMLink&& from) noexcept
    : TMLink() {
    *this = ::std::move(from);
  }

  inline TMLink& operator=(const TMLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMLink& operator=(TMLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMLink* internal_default_instance() {
    return reinterpret_cast<const TMLink*>(
               &_TMLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TMLink* other);
  friend void swap(TMLink& a, TMLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMLink* New() const final {
    return CreateMaybeMessage<TMLink>(nullptr);
  }

  TMLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMLink& from);
  void MergeFrom(const TMLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes nodePubKey = 1;
  bool has_nodepubkey() const;
  void clear_nodepubkey();
  static const int kNodePubKeyFieldNumber = 1;
  const std::string& nodepubkey() const;
  void set_nodepubkey(const std::string& value);
  void set_nodepubkey(std::string&& value);
  void set_nodepubkey(const char* value);
  void set_nodepubkey(const void* value, size_t size);
  std::string* mutable_nodepubkey();
  std::string* release_nodepubkey();
  void set_allocated_nodepubkey(std::string* nodepubkey);

  // @@protoc_insertion_point(class_scope:protocol.TMLink)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodepubkey_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMGetPeerShardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMGetPeerShardInfo) */ {
 public:
  TMGetPeerShardInfo();
  virtual ~TMGetPeerShardInfo();

  TMGetPeerShardInfo(const TMGetPeerShardInfo& from);
  TMGetPeerShardInfo(TMGetPeerShardInfo&& from) noexcept
    : TMGetPeerShardInfo() {
    *this = ::std::move(from);
  }

  inline TMGetPeerShardInfo& operator=(const TMGetPeerShardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMGetPeerShardInfo& operator=(TMGetPeerShardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMGetPeerShardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMGetPeerShardInfo* internal_default_instance() {
    return reinterpret_cast<const TMGetPeerShardInfo*>(
               &_TMGetPeerShardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TMGetPeerShardInfo* other);
  friend void swap(TMGetPeerShardInfo& a, TMGetPeerShardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMGetPeerShardInfo* New() const final {
    return CreateMaybeMessage<TMGetPeerShardInfo>(nullptr);
  }

  TMGetPeerShardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMGetPeerShardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMGetPeerShardInfo& from);
  void MergeFrom(const TMGetPeerShardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMGetPeerShardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMGetPeerShardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.TMLink peerChain = 3;
  int peerchain_size() const;
  void clear_peerchain();
  static const int kPeerChainFieldNumber = 3;
  ::protocol::TMLink* mutable_peerchain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >*
      mutable_peerchain();
  const ::protocol::TMLink& peerchain(int index) const;
  ::protocol::TMLink* add_peerchain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >&
      peerchain() const;

  // required uint32 hops = 1;
  bool has_hops() const;
  void clear_hops();
  static const int kHopsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops() const;
  void set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool lastLink = 2;
  bool has_lastlink() const;
  void clear_lastlink();
  static const int kLastLinkFieldNumber = 2;
  bool lastlink() const;
  void set_lastlink(bool value);

  // @@protoc_insertion_point(class_scope:protocol.TMGetPeerShardInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink > peerchain_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops_;
  bool lastlink_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMPeerShardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMPeerShardInfo) */ {
 public:
  TMPeerShardInfo();
  virtual ~TMPeerShardInfo();

  TMPeerShardInfo(const TMPeerShardInfo& from);
  TMPeerShardInfo(TMPeerShardInfo&& from) noexcept
    : TMPeerShardInfo() {
    *this = ::std::move(from);
  }

  inline TMPeerShardInfo& operator=(const TMPeerShardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMPeerShardInfo& operator=(TMPeerShardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMPeerShardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMPeerShardInfo* internal_default_instance() {
    return reinterpret_cast<const TMPeerShardInfo*>(
               &_TMPeerShardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TMPeerShardInfo* other);
  friend void swap(TMPeerShardInfo& a, TMPeerShardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMPeerShardInfo* New() const final {
    return CreateMaybeMessage<TMPeerShardInfo>(nullptr);
  }

  TMPeerShardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMPeerShardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMPeerShardInfo& from);
  void MergeFrom(const TMPeerShardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMPeerShardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMPeerShardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.TMLink peerChain = 5;
  int peerchain_size() const;
  void clear_peerchain();
  static const int kPeerChainFieldNumber = 5;
  ::protocol::TMLink* mutable_peerchain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >*
      mutable_peerchain();
  const ::protocol::TMLink& peerchain(int index) const;
  ::protocol::TMLink* add_peerchain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >&
      peerchain() const;

  // required string shardIndexes = 1;
  bool has_shardindexes() const;
  void clear_shardindexes();
  static const int kShardIndexesFieldNumber = 1;
  const std::string& shardindexes() const;
  void set_shardindexes(const std::string& value);
  void set_shardindexes(std::string&& value);
  void set_shardindexes(const char* value);
  void set_shardindexes(const char* value, size_t size);
  std::string* mutable_shardindexes();
  std::string* release_shardindexes();
  void set_allocated_shardindexes(std::string* shardindexes);

  // optional bytes nodePubKey = 2;
  bool has_nodepubkey() const;
  void clear_nodepubkey();
  static const int kNodePubKeyFieldNumber = 2;
  const std::string& nodepubkey() const;
  void set_nodepubkey(const std::string& value);
  void set_nodepubkey(std::string&& value);
  void set_nodepubkey(const char* value);
  void set_nodepubkey(const void* value, size_t size);
  std::string* mutable_nodepubkey();
  std::string* release_nodepubkey();
  void set_allocated_nodepubkey(std::string* nodepubkey);

  // optional string endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);

  // optional bool lastLink = 4;
  bool has_lastlink() const;
  void clear_lastlink();
  static const int kLastLinkFieldNumber = 4;
  bool lastlink() const;
  void set_lastlink(bool value);

  // @@protoc_insertion_point(class_scope:protocol.TMPeerShardInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink > peerchain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shardindexes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodepubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  bool lastlink_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMTransaction) */ {
 public:
  TMTransaction();
  virtual ~TMTransaction();

  TMTransaction(const TMTransaction& from);
  TMTransaction(TMTransaction&& from) noexcept
    : TMTransaction() {
    *this = ::std::move(from);
  }

  inline TMTransaction& operator=(const TMTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMTransaction& operator=(TMTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMTransaction* internal_default_instance() {
    return reinterpret_cast<const TMTransaction*>(
               &_TMTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TMTransaction* other);
  friend void swap(TMTransaction& a, TMTransaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMTransaction* New() const final {
    return CreateMaybeMessage<TMTransaction>(nullptr);
  }

  TMTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMTransaction& from);
  void MergeFrom(const TMTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes rawTransaction = 1;
  bool has_rawtransaction() const;
  void clear_rawtransaction();
  static const int kRawTransactionFieldNumber = 1;
  const std::string& rawtransaction() const;
  void set_rawtransaction(const std::string& value);
  void set_rawtransaction(std::string&& value);
  void set_rawtransaction(const char* value);
  void set_rawtransaction(const void* value, size_t size);
  std::string* mutable_rawtransaction();
  std::string* release_rawtransaction();
  void set_allocated_rawtransaction(std::string* rawtransaction);

  // optional uint64 receiveTimestamp = 3;
  bool has_receivetimestamp() const;
  void clear_receivetimestamp();
  static const int kReceiveTimestampFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 receivetimestamp() const;
  void set_receivetimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool deferred = 4;
  bool has_deferred() const;
  void clear_deferred();
  static const int kDeferredFieldNumber = 4;
  bool deferred() const;
  void set_deferred(bool value);

  // required .protocol.TransactionStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::protocol::TransactionStatus status() const;
  void set_status(::protocol::TransactionStatus value);

  // @@protoc_insertion_point(class_scope:protocol.TMTransaction)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawtransaction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 receivetimestamp_;
  bool deferred_;
  int status_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMStatusChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMStatusChange) */ {
 public:
  TMStatusChange();
  virtual ~TMStatusChange();

  TMStatusChange(const TMStatusChange& from);
  TMStatusChange(TMStatusChange&& from) noexcept
    : TMStatusChange() {
    *this = ::std::move(from);
  }

  inline TMStatusChange& operator=(const TMStatusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMStatusChange& operator=(TMStatusChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMStatusChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMStatusChange* internal_default_instance() {
    return reinterpret_cast<const TMStatusChange*>(
               &_TMStatusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TMStatusChange* other);
  friend void swap(TMStatusChange& a, TMStatusChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMStatusChange* New() const final {
    return CreateMaybeMessage<TMStatusChange>(nullptr);
  }

  TMStatusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMStatusChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMStatusChange& from);
  void MergeFrom(const TMStatusChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMStatusChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMStatusChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ledgerHash = 4;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 4;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // optional bytes ledgerHashPrevious = 5;
  bool has_ledgerhashprevious() const;
  void clear_ledgerhashprevious();
  static const int kLedgerHashPreviousFieldNumber = 5;
  const std::string& ledgerhashprevious() const;
  void set_ledgerhashprevious(const std::string& value);
  void set_ledgerhashprevious(std::string&& value);
  void set_ledgerhashprevious(const char* value);
  void set_ledgerhashprevious(const void* value, size_t size);
  std::string* mutable_ledgerhashprevious();
  std::string* release_ledgerhashprevious();
  void set_allocated_ledgerhashprevious(std::string* ledgerhashprevious);

  // optional uint32 ledgerSeq = 3;
  bool has_ledgerseq() const;
  void clear_ledgerseq();
  static const int kLedgerSeqFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq() const;
  void set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 firstSeq = 7;
  bool has_firstseq() const;
  void clear_firstseq();
  static const int kFirstSeqFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 firstseq() const;
  void set_firstseq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 networkTime = 6;
  bool has_networktime() const;
  void clear_networktime();
  static const int kNetworkTimeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 networktime() const;
  void set_networktime(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lastSeq = 8;
  bool has_lastseq() const;
  void clear_lastseq();
  static const int kLastSeqFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastseq() const;
  void set_lastseq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .protocol.NodeStatus newStatus = 1;
  bool has_newstatus() const;
  void clear_newstatus();
  static const int kNewStatusFieldNumber = 1;
  ::protocol::NodeStatus newstatus() const;
  void set_newstatus(::protocol::NodeStatus value);

  // optional .protocol.NodeEvent newEvent = 2;
  bool has_newevent() const;
  void clear_newevent();
  static const int kNewEventFieldNumber = 2;
  ::protocol::NodeEvent newevent() const;
  void set_newevent(::protocol::NodeEvent value);

  // @@protoc_insertion_point(class_scope:protocol.TMStatusChange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhashprevious_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 firstseq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 networktime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastseq_;
  int newstatus_;
  int newevent_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMProposeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMProposeSet) */ {
 public:
  TMProposeSet();
  virtual ~TMProposeSet();

  TMProposeSet(const TMProposeSet& from);
  TMProposeSet(TMProposeSet&& from) noexcept
    : TMProposeSet() {
    *this = ::std::move(from);
  }

  inline TMProposeSet& operator=(const TMProposeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMProposeSet& operator=(TMProposeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMProposeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMProposeSet* internal_default_instance() {
    return reinterpret_cast<const TMProposeSet*>(
               &_TMProposeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TMProposeSet* other);
  friend void swap(TMProposeSet& a, TMProposeSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMProposeSet* New() const final {
    return CreateMaybeMessage<TMProposeSet>(nullptr);
  }

  TMProposeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMProposeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMProposeSet& from);
  void MergeFrom(const TMProposeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMProposeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMProposeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes addedTransactions = 10;
  int addedtransactions_size() const;
  void clear_addedtransactions();
  static const int kAddedTransactionsFieldNumber = 10;
  const std::string& addedtransactions(int index) const;
  std::string* mutable_addedtransactions(int index);
  void set_addedtransactions(int index, const std::string& value);
  void set_addedtransactions(int index, std::string&& value);
  void set_addedtransactions(int index, const char* value);
  void set_addedtransactions(int index, const void* value, size_t size);
  std::string* add_addedtransactions();
  void add_addedtransactions(const std::string& value);
  void add_addedtransactions(std::string&& value);
  void add_addedtransactions(const char* value);
  void add_addedtransactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addedtransactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addedtransactions();

  // repeated bytes removedTransactions = 11;
  int removedtransactions_size() const;
  void clear_removedtransactions();
  static const int kRemovedTransactionsFieldNumber = 11;
  const std::string& removedtransactions(int index) const;
  std::string* mutable_removedtransactions(int index);
  void set_removedtransactions(int index, const std::string& value);
  void set_removedtransactions(int index, std::string&& value);
  void set_removedtransactions(int index, const char* value);
  void set_removedtransactions(int index, const void* value, size_t size);
  std::string* add_removedtransactions();
  void add_removedtransactions(const std::string& value);
  void add_removedtransactions(std::string&& value);
  void add_removedtransactions(const char* value);
  void add_removedtransactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& removedtransactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_removedtransactions();

  // required bytes currentTxHash = 2;
  bool has_currenttxhash() const;
  void clear_currenttxhash();
  static const int kCurrentTxHashFieldNumber = 2;
  const std::string& currenttxhash() const;
  void set_currenttxhash(const std::string& value);
  void set_currenttxhash(std::string&& value);
  void set_currenttxhash(const char* value);
  void set_currenttxhash(const void* value, size_t size);
  std::string* mutable_currenttxhash();
  std::string* release_currenttxhash();
  void set_allocated_currenttxhash(std::string* currenttxhash);

  // required bytes nodePubKey = 3;
  bool has_nodepubkey() const;
  void clear_nodepubkey();
  static const int kNodePubKeyFieldNumber = 3;
  const std::string& nodepubkey() const;
  void set_nodepubkey(const std::string& value);
  void set_nodepubkey(std::string&& value);
  void set_nodepubkey(const char* value);
  void set_nodepubkey(const void* value, size_t size);
  std::string* mutable_nodepubkey();
  std::string* release_nodepubkey();
  void set_allocated_nodepubkey(std::string* nodepubkey);

  // required bytes signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // required bytes previousledger = 6;
  bool has_previousledger() const;
  void clear_previousledger();
  static const int kPreviousledgerFieldNumber = 6;
  const std::string& previousledger() const;
  void set_previousledger(const std::string& value);
  void set_previousledger(std::string&& value);
  void set_previousledger(const char* value);
  void set_previousledger(const void* value, size_t size);
  std::string* mutable_previousledger();
  std::string* release_previousledger();
  void set_allocated_previousledger(std::string* previousledger);

  // required uint32 proposeSeq = 1;
  bool has_proposeseq() const;
  void clear_proposeseq();
  static const int kProposeSeqFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 proposeseq() const;
  void set_proposeseq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 closeTime = 4;
  bool has_closetime() const;
  void clear_closetime();
  static const int kCloseTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 closetime() const;
  void set_closetime(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool checkedSignature = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_checkedsignature() const;
  PROTOBUF_DEPRECATED void clear_checkedsignature();
  PROTOBUF_DEPRECATED static const int kCheckedSignatureFieldNumber = 7;
  PROTOBUF_DEPRECATED bool checkedsignature() const;
  PROTOBUF_DEPRECATED void set_checkedsignature(bool value);

  // optional uint32 hops = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_hops() const;
  PROTOBUF_DEPRECATED void clear_hops();
  PROTOBUF_DEPRECATED static const int kHopsFieldNumber = 12;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 hops() const;
  PROTOBUF_DEPRECATED void set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMProposeSet)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addedtransactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> removedtransactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currenttxhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodepubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previousledger_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proposeseq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 closetime_;
  bool checkedsignature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMHaveTransactionSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMHaveTransactionSet) */ {
 public:
  TMHaveTransactionSet();
  virtual ~TMHaveTransactionSet();

  TMHaveTransactionSet(const TMHaveTransactionSet& from);
  TMHaveTransactionSet(TMHaveTransactionSet&& from) noexcept
    : TMHaveTransactionSet() {
    *this = ::std::move(from);
  }

  inline TMHaveTransactionSet& operator=(const TMHaveTransactionSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMHaveTransactionSet& operator=(TMHaveTransactionSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMHaveTransactionSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMHaveTransactionSet* internal_default_instance() {
    return reinterpret_cast<const TMHaveTransactionSet*>(
               &_TMHaveTransactionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TMHaveTransactionSet* other);
  friend void swap(TMHaveTransactionSet& a, TMHaveTransactionSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMHaveTransactionSet* New() const final {
    return CreateMaybeMessage<TMHaveTransactionSet>(nullptr);
  }

  TMHaveTransactionSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMHaveTransactionSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMHaveTransactionSet& from);
  void MergeFrom(const TMHaveTransactionSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMHaveTransactionSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMHaveTransactionSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // required .protocol.TxSetStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::protocol::TxSetStatus status() const;
  void set_status(::protocol::TxSetStatus value);

  // @@protoc_insertion_point(class_scope:protocol.TMHaveTransactionSet)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  int status_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMValidatorList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMValidatorList) */ {
 public:
  TMValidatorList();
  virtual ~TMValidatorList();

  TMValidatorList(const TMValidatorList& from);
  TMValidatorList(TMValidatorList&& from) noexcept
    : TMValidatorList() {
    *this = ::std::move(from);
  }

  inline TMValidatorList& operator=(const TMValidatorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMValidatorList& operator=(TMValidatorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMValidatorList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMValidatorList* internal_default_instance() {
    return reinterpret_cast<const TMValidatorList*>(
               &_TMValidatorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TMValidatorList* other);
  friend void swap(TMValidatorList& a, TMValidatorList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMValidatorList* New() const final {
    return CreateMaybeMessage<TMValidatorList>(nullptr);
  }

  TMValidatorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMValidatorList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMValidatorList& from);
  void MergeFrom(const TMValidatorList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMValidatorList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMValidatorList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes manifest = 1;
  bool has_manifest() const;
  void clear_manifest();
  static const int kManifestFieldNumber = 1;
  const std::string& manifest() const;
  void set_manifest(const std::string& value);
  void set_manifest(std::string&& value);
  void set_manifest(const char* value);
  void set_manifest(const void* value, size_t size);
  std::string* mutable_manifest();
  std::string* release_manifest();
  void set_allocated_manifest(std::string* manifest);

  // required bytes blob = 2;
  bool has_blob() const;
  void clear_blob();
  static const int kBlobFieldNumber = 2;
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);

  // required bytes signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // required uint32 version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMValidatorList)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class ValidatorBlobInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ValidatorBlobInfo) */ {
 public:
  ValidatorBlobInfo();
  virtual ~ValidatorBlobInfo();

  ValidatorBlobInfo(const ValidatorBlobInfo& from);
  ValidatorBlobInfo(ValidatorBlobInfo&& from) noexcept
    : ValidatorBlobInfo() {
    *this = ::std::move(from);
  }

  inline ValidatorBlobInfo& operator=(const ValidatorBlobInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorBlobInfo& operator=(ValidatorBlobInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatorBlobInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidatorBlobInfo* internal_default_instance() {
    return reinterpret_cast<const ValidatorBlobInfo*>(
               &_ValidatorBlobInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ValidatorBlobInfo* other);
  friend void swap(ValidatorBlobInfo& a, ValidatorBlobInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidatorBlobInfo* New() const final {
    return CreateMaybeMessage<ValidatorBlobInfo>(nullptr);
  }

  ValidatorBlobInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorBlobInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatorBlobInfo& from);
  void MergeFrom(const ValidatorBlobInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorBlobInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ValidatorBlobInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes manifest = 1;
  bool has_manifest() const;
  void clear_manifest();
  static const int kManifestFieldNumber = 1;
  const std::string& manifest() const;
  void set_manifest(const std::string& value);
  void set_manifest(std::string&& value);
  void set_manifest(const char* value);
  void set_manifest(const void* value, size_t size);
  std::string* mutable_manifest();
  std::string* release_manifest();
  void set_allocated_manifest(std::string* manifest);

  // required bytes blob = 2;
  bool has_blob() const;
  void clear_blob();
  static const int kBlobFieldNumber = 2;
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);

  // required bytes signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // @@protoc_insertion_point(class_scope:protocol.ValidatorBlobInfo)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMValidatorListCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMValidatorListCollection) */ {
 public:
  TMValidatorListCollection();
  virtual ~TMValidatorListCollection();

  TMValidatorListCollection(const TMValidatorListCollection& from);
  TMValidatorListCollection(TMValidatorListCollection&& from) noexcept
    : TMValidatorListCollection() {
    *this = ::std::move(from);
  }

  inline TMValidatorListCollection& operator=(const TMValidatorListCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMValidatorListCollection& operator=(TMValidatorListCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMValidatorListCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMValidatorListCollection* internal_default_instance() {
    return reinterpret_cast<const TMValidatorListCollection*>(
               &_TMValidatorListCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TMValidatorListCollection* other);
  friend void swap(TMValidatorListCollection& a, TMValidatorListCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMValidatorListCollection* New() const final {
    return CreateMaybeMessage<TMValidatorListCollection>(nullptr);
  }

  TMValidatorListCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMValidatorListCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMValidatorListCollection& from);
  void MergeFrom(const TMValidatorListCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMValidatorListCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMValidatorListCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.ValidatorBlobInfo blobs = 3;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 3;
  ::protocol::ValidatorBlobInfo* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ValidatorBlobInfo >*
      mutable_blobs();
  const ::protocol::ValidatorBlobInfo& blobs(int index) const;
  ::protocol::ValidatorBlobInfo* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ValidatorBlobInfo >&
      blobs() const;

  // required bytes manifest = 2;
  bool has_manifest() const;
  void clear_manifest();
  static const int kManifestFieldNumber = 2;
  const std::string& manifest() const;
  void set_manifest(const std::string& value);
  void set_manifest(std::string&& value);
  void set_manifest(const char* value);
  void set_manifest(const void* value, size_t size);
  std::string* mutable_manifest();
  std::string* release_manifest();
  void set_allocated_manifest(std::string* manifest);

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMValidatorListCollection)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ValidatorBlobInfo > blobs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMValidation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMValidation) */ {
 public:
  TMValidation();
  virtual ~TMValidation();

  TMValidation(const TMValidation& from);
  TMValidation(TMValidation&& from) noexcept
    : TMValidation() {
    *this = ::std::move(from);
  }

  inline TMValidation& operator=(const TMValidation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMValidation& operator=(TMValidation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMValidation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMValidation* internal_default_instance() {
    return reinterpret_cast<const TMValidation*>(
               &_TMValidation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TMValidation* other);
  friend void swap(TMValidation& a, TMValidation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMValidation* New() const final {
    return CreateMaybeMessage<TMValidation>(nullptr);
  }

  TMValidation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMValidation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMValidation& from);
  void MergeFrom(const TMValidation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMValidation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMValidation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes validation = 1;
  bool has_validation() const;
  void clear_validation();
  static const int kValidationFieldNumber = 1;
  const std::string& validation() const;
  void set_validation(const std::string& value);
  void set_validation(std::string&& value);
  void set_validation(const char* value);
  void set_validation(const void* value, size_t size);
  std::string* mutable_validation();
  std::string* release_validation();
  void set_allocated_validation(std::string* validation);

  // optional bool checkedSignature = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_checkedsignature() const;
  PROTOBUF_DEPRECATED void clear_checkedsignature();
  PROTOBUF_DEPRECATED static const int kCheckedSignatureFieldNumber = 2;
  PROTOBUF_DEPRECATED bool checkedsignature() const;
  PROTOBUF_DEPRECATED void set_checkedsignature(bool value);

  // optional uint32 hops = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_hops() const;
  PROTOBUF_DEPRECATED void clear_hops();
  PROTOBUF_DEPRECATED static const int kHopsFieldNumber = 3;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 hops() const;
  PROTOBUF_DEPRECATED void set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMValidation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validation_;
  bool checkedsignature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMEndpoints_TMEndpointv2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMEndpoints.TMEndpointv2) */ {
 public:
  TMEndpoints_TMEndpointv2();
  virtual ~TMEndpoints_TMEndpointv2();

  TMEndpoints_TMEndpointv2(const TMEndpoints_TMEndpointv2& from);
  TMEndpoints_TMEndpointv2(TMEndpoints_TMEndpointv2&& from) noexcept
    : TMEndpoints_TMEndpointv2() {
    *this = ::std::move(from);
  }

  inline TMEndpoints_TMEndpointv2& operator=(const TMEndpoints_TMEndpointv2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMEndpoints_TMEndpointv2& operator=(TMEndpoints_TMEndpointv2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMEndpoints_TMEndpointv2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMEndpoints_TMEndpointv2* internal_default_instance() {
    return reinterpret_cast<const TMEndpoints_TMEndpointv2*>(
               &_TMEndpoints_TMEndpointv2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(TMEndpoints_TMEndpointv2* other);
  friend void swap(TMEndpoints_TMEndpointv2& a, TMEndpoints_TMEndpointv2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMEndpoints_TMEndpointv2* New() const final {
    return CreateMaybeMessage<TMEndpoints_TMEndpointv2>(nullptr);
  }

  TMEndpoints_TMEndpointv2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMEndpoints_TMEndpointv2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMEndpoints_TMEndpointv2& from);
  void MergeFrom(const TMEndpoints_TMEndpointv2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMEndpoints_TMEndpointv2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMEndpoints.TMEndpointv2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);

  // required uint32 hops = 2;
  bool has_hops() const;
  void clear_hops();
  static const int kHopsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops() const;
  void set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMEndpoints.TMEndpointv2)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMEndpoints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMEndpoints) */ {
 public:
  TMEndpoints();
  virtual ~TMEndpoints();

  TMEndpoints(const TMEndpoints& from);
  TMEndpoints(TMEndpoints&& from) noexcept
    : TMEndpoints() {
    *this = ::std::move(from);
  }

  inline TMEndpoints& operator=(const TMEndpoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMEndpoints& operator=(TMEndpoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMEndpoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMEndpoints* internal_default_instance() {
    return reinterpret_cast<const TMEndpoints*>(
               &_TMEndpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(TMEndpoints* other);
  friend void swap(TMEndpoints& a, TMEndpoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMEndpoints* New() const final {
    return CreateMaybeMessage<TMEndpoints>(nullptr);
  }

  TMEndpoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMEndpoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMEndpoints& from);
  void MergeFrom(const TMEndpoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMEndpoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMEndpoints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TMEndpoints_TMEndpointv2 TMEndpointv2;

  // accessors -------------------------------------------------------

  // repeated .protocol.TMEndpoints.TMEndpointv2 endpoints_v2 = 3;
  int endpoints_v2_size() const;
  void clear_endpoints_v2();
  static const int kEndpointsV2FieldNumber = 3;
  ::protocol::TMEndpoints_TMEndpointv2* mutable_endpoints_v2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMEndpoints_TMEndpointv2 >*
      mutable_endpoints_v2();
  const ::protocol::TMEndpoints_TMEndpointv2& endpoints_v2(int index) const;
  ::protocol::TMEndpoints_TMEndpointv2* add_endpoints_v2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMEndpoints_TMEndpointv2 >&
      endpoints_v2() const;

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMEndpoints)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMEndpoints_TMEndpointv2 > endpoints_v2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMIndexedObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMIndexedObject) */ {
 public:
  TMIndexedObject();
  virtual ~TMIndexedObject();

  TMIndexedObject(const TMIndexedObject& from);
  TMIndexedObject(TMIndexedObject&& from) noexcept
    : TMIndexedObject() {
    *this = ::std::move(from);
  }

  inline TMIndexedObject& operator=(const TMIndexedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMIndexedObject& operator=(TMIndexedObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMIndexedObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMIndexedObject* internal_default_instance() {
    return reinterpret_cast<const TMIndexedObject*>(
               &_TMIndexedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(TMIndexedObject* other);
  friend void swap(TMIndexedObject& a, TMIndexedObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMIndexedObject* New() const final {
    return CreateMaybeMessage<TMIndexedObject>(nullptr);
  }

  TMIndexedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMIndexedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMIndexedObject& from);
  void MergeFrom(const TMIndexedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMIndexedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMIndexedObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // optional bytes nodeID = 2;
  bool has_nodeid() const;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const void* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);

  // optional bytes index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const void* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional uint32 ledgerSeq = 5;
  bool has_ledgerseq() const;
  void clear_ledgerseq();
  static const int kLedgerSeqFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq() const;
  void set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMIndexedObject)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMGetObjectByHash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMGetObjectByHash) */ {
 public:
  TMGetObjectByHash();
  virtual ~TMGetObjectByHash();

  TMGetObjectByHash(const TMGetObjectByHash& from);
  TMGetObjectByHash(TMGetObjectByHash&& from) noexcept
    : TMGetObjectByHash() {
    *this = ::std::move(from);
  }

  inline TMGetObjectByHash& operator=(const TMGetObjectByHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMGetObjectByHash& operator=(TMGetObjectByHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMGetObjectByHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMGetObjectByHash* internal_default_instance() {
    return reinterpret_cast<const TMGetObjectByHash*>(
               &_TMGetObjectByHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(TMGetObjectByHash* other);
  friend void swap(TMGetObjectByHash& a, TMGetObjectByHash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMGetObjectByHash* New() const final {
    return CreateMaybeMessage<TMGetObjectByHash>(nullptr);
  }

  TMGetObjectByHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMGetObjectByHash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMGetObjectByHash& from);
  void MergeFrom(const TMGetObjectByHash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMGetObjectByHash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMGetObjectByHash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TMGetObjectByHash_ObjectType ObjectType;
  static constexpr ObjectType otUNKNOWN =
    TMGetObjectByHash_ObjectType_otUNKNOWN;
  static constexpr ObjectType otLEDGER =
    TMGetObjectByHash_ObjectType_otLEDGER;
  static constexpr ObjectType otTRANSACTION =
    TMGetObjectByHash_ObjectType_otTRANSACTION;
  static constexpr ObjectType otTRANSACTION_NODE =
    TMGetObjectByHash_ObjectType_otTRANSACTION_NODE;
  static constexpr ObjectType otSTATE_NODE =
    TMGetObjectByHash_ObjectType_otSTATE_NODE;
  static constexpr ObjectType otCAS_OBJECT =
    TMGetObjectByHash_ObjectType_otCAS_OBJECT;
  static constexpr ObjectType otFETCH_PACK =
    TMGetObjectByHash_ObjectType_otFETCH_PACK;
  static inline bool ObjectType_IsValid(int value) {
    return TMGetObjectByHash_ObjectType_IsValid(value);
  }
  static constexpr ObjectType ObjectType_MIN =
    TMGetObjectByHash_ObjectType_ObjectType_MIN;
  static constexpr ObjectType ObjectType_MAX =
    TMGetObjectByHash_ObjectType_ObjectType_MAX;
  static constexpr int ObjectType_ARRAYSIZE =
    TMGetObjectByHash_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectType_descriptor() {
    return TMGetObjectByHash_ObjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectType_Name.");
    return TMGetObjectByHash_ObjectType_Name(enum_t_value);
  }
  static inline bool ObjectType_Parse(const std::string& name,
      ObjectType* value) {
    return TMGetObjectByHash_ObjectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .protocol.TMIndexedObject objects = 6;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 6;
  ::protocol::TMIndexedObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMIndexedObject >*
      mutable_objects();
  const ::protocol::TMIndexedObject& objects(int index) const;
  ::protocol::TMIndexedObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMIndexedObject >&
      objects() const;

  // optional bytes ledgerHash = 4;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 4;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // required .protocol.TMGetObjectByHash.ObjectType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protocol::TMGetObjectByHash_ObjectType type() const;
  void set_type(::protocol::TMGetObjectByHash_ObjectType value);

  // optional uint32 seq = 3;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required bool query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  bool query() const;
  void set_query(bool value);

  // optional bool fat = 5;
  bool has_fat() const;
  void clear_fat();
  static const int kFatFieldNumber = 5;
  bool fat() const;
  void set_fat(bool value);

  // @@protoc_insertion_point(class_scope:protocol.TMGetObjectByHash)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMIndexedObject > objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  bool query_;
  bool fat_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMLedgerNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMLedgerNode) */ {
 public:
  TMLedgerNode();
  virtual ~TMLedgerNode();

  TMLedgerNode(const TMLedgerNode& from);
  TMLedgerNode(TMLedgerNode&& from) noexcept
    : TMLedgerNode() {
    *this = ::std::move(from);
  }

  inline TMLedgerNode& operator=(const TMLedgerNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMLedgerNode& operator=(TMLedgerNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMLedgerNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMLedgerNode* internal_default_instance() {
    return reinterpret_cast<const TMLedgerNode*>(
               &_TMLedgerNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(TMLedgerNode* other);
  friend void swap(TMLedgerNode& a, TMLedgerNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMLedgerNode* New() const final {
    return CreateMaybeMessage<TMLedgerNode>(nullptr);
  }

  TMLedgerNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMLedgerNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMLedgerNode& from);
  void MergeFrom(const TMLedgerNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMLedgerNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMLedgerNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes nodedata = 1;
  bool has_nodedata() const;
  void clear_nodedata();
  static const int kNodedataFieldNumber = 1;
  const std::string& nodedata() const;
  void set_nodedata(const std::string& value);
  void set_nodedata(std::string&& value);
  void set_nodedata(const char* value);
  void set_nodedata(const void* value, size_t size);
  std::string* mutable_nodedata();
  std::string* release_nodedata();
  void set_allocated_nodedata(std::string* nodedata);

  // optional bytes nodeid = 2;
  bool has_nodeid() const;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 2;
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const void* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);

  // @@protoc_insertion_point(class_scope:protocol.TMLedgerNode)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMGetLedger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMGetLedger) */ {
 public:
  TMGetLedger();
  virtual ~TMGetLedger();

  TMGetLedger(const TMGetLedger& from);
  TMGetLedger(TMGetLedger&& from) noexcept
    : TMGetLedger() {
    *this = ::std::move(from);
  }

  inline TMGetLedger& operator=(const TMGetLedger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMGetLedger& operator=(TMGetLedger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMGetLedger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMGetLedger* internal_default_instance() {
    return reinterpret_cast<const TMGetLedger*>(
               &_TMGetLedger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(TMGetLedger* other);
  friend void swap(TMGetLedger& a, TMGetLedger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMGetLedger* New() const final {
    return CreateMaybeMessage<TMGetLedger>(nullptr);
  }

  TMGetLedger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMGetLedger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMGetLedger& from);
  void MergeFrom(const TMGetLedger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMGetLedger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMGetLedger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes nodeIDs = 5;
  int nodeids_size() const;
  void clear_nodeids();
  static const int kNodeIDsFieldNumber = 5;
  const std::string& nodeids(int index) const;
  std::string* mutable_nodeids(int index);
  void set_nodeids(int index, const std::string& value);
  void set_nodeids(int index, std::string&& value);
  void set_nodeids(int index, const char* value);
  void set_nodeids(int index, const void* value, size_t size);
  std::string* add_nodeids();
  void add_nodeids(const std::string& value);
  void add_nodeids(std::string&& value);
  void add_nodeids(const char* value);
  void add_nodeids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nodeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nodeids();

  // optional bytes ledgerHash = 3;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 3;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // required .protocol.TMLedgerInfoType itype = 1;
  bool has_itype() const;
  void clear_itype();
  static const int kItypeFieldNumber = 1;
  ::protocol::TMLedgerInfoType itype() const;
  void set_itype(::protocol::TMLedgerInfoType value);

  // optional .protocol.TMLedgerType ltype = 2;
  bool has_ltype() const;
  void clear_ltype();
  static const int kLtypeFieldNumber = 2;
  ::protocol::TMLedgerType ltype() const;
  void set_ltype(::protocol::TMLedgerType value);

  // optional uint32 ledgerSeq = 4;
  bool has_ledgerseq() const;
  void clear_ledgerseq();
  static const int kLedgerSeqFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq() const;
  void set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .protocol.TMQueryType queryType = 7;
  bool has_querytype() const;
  void clear_querytype();
  static const int kQueryTypeFieldNumber = 7;
  ::protocol::TMQueryType querytype() const;
  void set_querytype(::protocol::TMQueryType value);

  // optional uint64 requestCookie = 6;
  bool has_requestcookie() const;
  void clear_requestcookie();
  static const int kRequestCookieFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestcookie() const;
  void set_requestcookie(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 queryDepth = 8;
  bool has_querydepth() const;
  void clear_querydepth();
  static const int kQueryDepthFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint32 querydepth() const;
  void set_querydepth(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMGetLedger)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nodeids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  int itype_;
  int ltype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq_;
  int querytype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestcookie_;
  ::PROTOBUF_NAMESPACE_ID::uint32 querydepth_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMLedgerData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMLedgerData) */ {
 public:
  TMLedgerData();
  virtual ~TMLedgerData();

  TMLedgerData(const TMLedgerData& from);
  TMLedgerData(TMLedgerData&& from) noexcept
    : TMLedgerData() {
    *this = ::std::move(from);
  }

  inline TMLedgerData& operator=(const TMLedgerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMLedgerData& operator=(TMLedgerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMLedgerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMLedgerData* internal_default_instance() {
    return reinterpret_cast<const TMLedgerData*>(
               &_TMLedgerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(TMLedgerData* other);
  friend void swap(TMLedgerData& a, TMLedgerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMLedgerData* New() const final {
    return CreateMaybeMessage<TMLedgerData>(nullptr);
  }

  TMLedgerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMLedgerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMLedgerData& from);
  void MergeFrom(const TMLedgerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMLedgerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMLedgerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.TMLedgerNode nodes = 4;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 4;
  ::protocol::TMLedgerNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLedgerNode >*
      mutable_nodes();
  const ::protocol::TMLedgerNode& nodes(int index) const;
  ::protocol::TMLedgerNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLedgerNode >&
      nodes() const;

  // required bytes ledgerHash = 1;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 1;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // required uint32 ledgerSeq = 2;
  bool has_ledgerseq() const;
  void clear_ledgerseq();
  static const int kLedgerSeqFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq() const;
  void set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required .protocol.TMLedgerInfoType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::protocol::TMLedgerInfoType type() const;
  void set_type(::protocol::TMLedgerInfoType value);

  // optional uint32 requestCookie = 5;
  bool has_requestcookie() const;
  void clear_requestcookie();
  static const int kRequestCookieFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestcookie() const;
  void set_requestcookie(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .protocol.TMReplyError error = 6;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 6;
  ::protocol::TMReplyError error() const;
  void set_error(::protocol::TMReplyError value);

  // @@protoc_insertion_point(class_scope:protocol.TMLedgerData)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLedgerNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ledgerseq_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestcookie_;
  int error_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMPing :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMPing) */ {
 public:
  TMPing();
  virtual ~TMPing();

  TMPing(const TMPing& from);
  TMPing(TMPing&& from) noexcept
    : TMPing() {
    *this = ::std::move(from);
  }

  inline TMPing& operator=(const TMPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMPing& operator=(TMPing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMPing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMPing* internal_default_instance() {
    return reinterpret_cast<const TMPing*>(
               &_TMPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(TMPing* other);
  friend void swap(TMPing& a, TMPing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMPing* New() const final {
    return CreateMaybeMessage<TMPing>(nullptr);
  }

  TMPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMPing& from);
  void MergeFrom(const TMPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMPing";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TMPing_pingType pingType;
  static constexpr pingType ptPING =
    TMPing_pingType_ptPING;
  static constexpr pingType ptPONG =
    TMPing_pingType_ptPONG;
  static inline bool pingType_IsValid(int value) {
    return TMPing_pingType_IsValid(value);
  }
  static constexpr pingType pingType_MIN =
    TMPing_pingType_pingType_MIN;
  static constexpr pingType pingType_MAX =
    TMPing_pingType_pingType_MAX;
  static constexpr int pingType_ARRAYSIZE =
    TMPing_pingType_pingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  pingType_descriptor() {
    return TMPing_pingType_descriptor();
  }
  template<typename T>
  static inline const std::string& pingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, pingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function pingType_Name.");
    return TMPing_pingType_Name(enum_t_value);
  }
  static inline bool pingType_Parse(const std::string& name,
      pingType* value) {
    return TMPing_pingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .protocol.TMPing.pingType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protocol::TMPing_pingType type() const;
  void set_type(::protocol::TMPing_pingType value);

  // optional uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 pingTime = 3;
  bool has_pingtime() const;
  void clear_pingtime();
  static const int kPingTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 pingtime() const;
  void set_pingtime(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 netTime = 4;
  bool has_nettime() const;
  void clear_nettime();
  static const int kNetTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 nettime() const;
  void set_nettime(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.TMPing)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pingtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nettime_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMSquelch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMSquelch) */ {
 public:
  TMSquelch();
  virtual ~TMSquelch();

  TMSquelch(const TMSquelch& from);
  TMSquelch(TMSquelch&& from) noexcept
    : TMSquelch() {
    *this = ::std::move(from);
  }

  inline TMSquelch& operator=(const TMSquelch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMSquelch& operator=(TMSquelch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMSquelch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMSquelch* internal_default_instance() {
    return reinterpret_cast<const TMSquelch*>(
               &_TMSquelch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(TMSquelch* other);
  friend void swap(TMSquelch& a, TMSquelch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMSquelch* New() const final {
    return CreateMaybeMessage<TMSquelch>(nullptr);
  }

  TMSquelch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMSquelch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMSquelch& from);
  void MergeFrom(const TMSquelch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMSquelch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMSquelch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes validatorPubKey = 2;
  bool has_validatorpubkey() const;
  void clear_validatorpubkey();
  static const int kValidatorPubKeyFieldNumber = 2;
  const std::string& validatorpubkey() const;
  void set_validatorpubkey(const std::string& value);
  void set_validatorpubkey(std::string&& value);
  void set_validatorpubkey(const char* value);
  void set_validatorpubkey(const void* value, size_t size);
  std::string* mutable_validatorpubkey();
  std::string* release_validatorpubkey();
  void set_allocated_validatorpubkey(std::string* validatorpubkey);

  // required bool squelch = 1;
  bool has_squelch() const;
  void clear_squelch();
  static const int kSquelchFieldNumber = 1;
  bool squelch() const;
  void set_squelch(bool value);

  // optional uint32 squelchDuration = 3;
  bool has_squelchduration() const;
  void clear_squelchduration();
  static const int kSquelchDurationFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 squelchduration() const;
  void set_squelchduration(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.TMSquelch)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validatorpubkey_;
  bool squelch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 squelchduration_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMProofPathRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMProofPathRequest) */ {
 public:
  TMProofPathRequest();
  virtual ~TMProofPathRequest();

  TMProofPathRequest(const TMProofPathRequest& from);
  TMProofPathRequest(TMProofPathRequest&& from) noexcept
    : TMProofPathRequest() {
    *this = ::std::move(from);
  }

  inline TMProofPathRequest& operator=(const TMProofPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMProofPathRequest& operator=(TMProofPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMProofPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMProofPathRequest* internal_default_instance() {
    return reinterpret_cast<const TMProofPathRequest*>(
               &_TMProofPathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(TMProofPathRequest* other);
  friend void swap(TMProofPathRequest& a, TMProofPathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMProofPathRequest* New() const final {
    return CreateMaybeMessage<TMProofPathRequest>(nullptr);
  }

  TMProofPathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMProofPathRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMProofPathRequest& from);
  void MergeFrom(const TMProofPathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMProofPathRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMProofPathRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // required bytes ledgerHash = 2;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 2;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // required .protocol.TMLedgerMapType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::protocol::TMLedgerMapType type() const;
  void set_type(::protocol::TMLedgerMapType value);

  // @@protoc_insertion_point(class_scope:protocol.TMProofPathRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  int type_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMProofPathResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMProofPathResponse) */ {
 public:
  TMProofPathResponse();
  virtual ~TMProofPathResponse();

  TMProofPathResponse(const TMProofPathResponse& from);
  TMProofPathResponse(TMProofPathResponse&& from) noexcept
    : TMProofPathResponse() {
    *this = ::std::move(from);
  }

  inline TMProofPathResponse& operator=(const TMProofPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMProofPathResponse& operator=(TMProofPathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMProofPathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMProofPathResponse* internal_default_instance() {
    return reinterpret_cast<const TMProofPathResponse*>(
               &_TMProofPathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(TMProofPathResponse* other);
  friend void swap(TMProofPathResponse& a, TMProofPathResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMProofPathResponse* New() const final {
    return CreateMaybeMessage<TMProofPathResponse>(nullptr);
  }

  TMProofPathResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMProofPathResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMProofPathResponse& from);
  void MergeFrom(const TMProofPathResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMProofPathResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMProofPathResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes path = 5;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 5;
  const std::string& path(int index) const;
  std::string* mutable_path(int index);
  void set_path(int index, const std::string& value);
  void set_path(int index, std::string&& value);
  void set_path(int index, const char* value);
  void set_path(int index, const void* value, size_t size);
  std::string* add_path();
  void add_path(const std::string& value);
  void add_path(std::string&& value);
  void add_path(const char* value);
  void add_path(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_path();

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // required bytes ledgerHash = 2;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 2;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // optional bytes ledgerHeader = 4;
  bool has_ledgerheader() const;
  void clear_ledgerheader();
  static const int kLedgerHeaderFieldNumber = 4;
  const std::string& ledgerheader() const;
  void set_ledgerheader(const std::string& value);
  void set_ledgerheader(std::string&& value);
  void set_ledgerheader(const char* value);
  void set_ledgerheader(const void* value, size_t size);
  std::string* mutable_ledgerheader();
  std::string* release_ledgerheader();
  void set_allocated_ledgerheader(std::string* ledgerheader);

  // required .protocol.TMLedgerMapType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::protocol::TMLedgerMapType type() const;
  void set_type(::protocol::TMLedgerMapType value);

  // optional .protocol.TMReplyError error = 6;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 6;
  ::protocol::TMReplyError error() const;
  void set_error(::protocol::TMReplyError value);

  // @@protoc_insertion_point(class_scope:protocol.TMProofPathResponse)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerheader_;
  int type_;
  int error_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMReplayDeltaRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMReplayDeltaRequest) */ {
 public:
  TMReplayDeltaRequest();
  virtual ~TMReplayDeltaRequest();

  TMReplayDeltaRequest(const TMReplayDeltaRequest& from);
  TMReplayDeltaRequest(TMReplayDeltaRequest&& from) noexcept
    : TMReplayDeltaRequest() {
    *this = ::std::move(from);
  }

  inline TMReplayDeltaRequest& operator=(const TMReplayDeltaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMReplayDeltaRequest& operator=(TMReplayDeltaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMReplayDeltaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMReplayDeltaRequest* internal_default_instance() {
    return reinterpret_cast<const TMReplayDeltaRequest*>(
               &_TMReplayDeltaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(TMReplayDeltaRequest* other);
  friend void swap(TMReplayDeltaRequest& a, TMReplayDeltaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMReplayDeltaRequest* New() const final {
    return CreateMaybeMessage<TMReplayDeltaRequest>(nullptr);
  }

  TMReplayDeltaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMReplayDeltaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMReplayDeltaRequest& from);
  void MergeFrom(const TMReplayDeltaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMReplayDeltaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMReplayDeltaRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ledgerHash = 1;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 1;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // @@protoc_insertion_point(class_scope:protocol.TMReplayDeltaRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  friend struct ::TableStruct_ripple_2eproto;
};
// -------------------------------------------------------------------

class TMReplayDeltaResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TMReplayDeltaResponse) */ {
 public:
  TMReplayDeltaResponse();
  virtual ~TMReplayDeltaResponse();

  TMReplayDeltaResponse(const TMReplayDeltaResponse& from);
  TMReplayDeltaResponse(TMReplayDeltaResponse&& from) noexcept
    : TMReplayDeltaResponse() {
    *this = ::std::move(from);
  }

  inline TMReplayDeltaResponse& operator=(const TMReplayDeltaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMReplayDeltaResponse& operator=(TMReplayDeltaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMReplayDeltaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TMReplayDeltaResponse* internal_default_instance() {
    return reinterpret_cast<const TMReplayDeltaResponse*>(
               &_TMReplayDeltaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(TMReplayDeltaResponse* other);
  friend void swap(TMReplayDeltaResponse& a, TMReplayDeltaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TMReplayDeltaResponse* New() const final {
    return CreateMaybeMessage<TMReplayDeltaResponse>(nullptr);
  }

  TMReplayDeltaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMReplayDeltaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMReplayDeltaResponse& from);
  void MergeFrom(const TMReplayDeltaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMReplayDeltaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TMReplayDeltaResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ripple_2eproto);
    return ::descriptor_table_ripple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes transaction = 3;
  int transaction_size() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 3;
  const std::string& transaction(int index) const;
  std::string* mutable_transaction(int index);
  void set_transaction(int index, const std::string& value);
  void set_transaction(int index, std::string&& value);
  void set_transaction(int index, const char* value);
  void set_transaction(int index, const void* value, size_t size);
  std::string* add_transaction();
  void add_transaction(const std::string& value);
  void add_transaction(std::string&& value);
  void add_transaction(const char* value);
  void add_transaction(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transaction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transaction();

  // required bytes ledgerHash = 1;
  bool has_ledgerhash() const;
  void clear_ledgerhash();
  static const int kLedgerHashFieldNumber = 1;
  const std::string& ledgerhash() const;
  void set_ledgerhash(const std::string& value);
  void set_ledgerhash(std::string&& value);
  void set_ledgerhash(const char* value);
  void set_ledgerhash(const void* value, size_t size);
  std::string* mutable_ledgerhash();
  std::string* release_ledgerhash();
  void set_allocated_ledgerhash(std::string* ledgerhash);

  // optional bytes ledgerHeader = 2;
  bool has_ledgerheader() const;
  void clear_ledgerheader();
  static const int kLedgerHeaderFieldNumber = 2;
  const std::string& ledgerheader() const;
  void set_ledgerheader(const std::string& value);
  void set_ledgerheader(std::string&& value);
  void set_ledgerheader(const char* value);
  void set_ledgerheader(const void* value, size_t size);
  std::string* mutable_ledgerheader();
  std::string* release_ledgerheader();
  void set_allocated_ledgerheader(std::string* ledgerheader);

  // optional .protocol.TMReplyError error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  ::protocol::TMReplyError error() const;
  void set_error(::protocol::TMReplyError value);

  // @@protoc_insertion_point(class_scope:protocol.TMReplayDeltaResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgerheader_;
  int error_;
  friend struct ::TableStruct_ripple_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TMManifest

// required bytes stobject = 1;
inline bool TMManifest::has_stobject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMManifest::clear_stobject() {
  stobject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMManifest::stobject() const {
  // @@protoc_insertion_point(field_get:protocol.TMManifest.stobject)
  return stobject_.GetNoArena();
}
inline void TMManifest::set_stobject(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stobject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMManifest.stobject)
}
inline void TMManifest::set_stobject(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stobject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMManifest.stobject)
}
inline void TMManifest::set_stobject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stobject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMManifest.stobject)
}
inline void TMManifest::set_stobject(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stobject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMManifest.stobject)
}
inline std::string* TMManifest::mutable_stobject() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMManifest.stobject)
  return stobject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMManifest::release_stobject() {
  // @@protoc_insertion_point(field_release:protocol.TMManifest.stobject)
  if (!has_stobject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stobject_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMManifest::set_allocated_stobject(std::string* stobject) {
  if (stobject != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stobject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stobject);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMManifest.stobject)
}

// -------------------------------------------------------------------

// TMManifests

// repeated .protocol.TMManifest list = 1;
inline int TMManifests::list_size() const {
  return list_.size();
}
inline void TMManifests::clear_list() {
  list_.Clear();
}
inline ::protocol::TMManifest* TMManifests::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMManifests.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMManifest >*
TMManifests::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMManifests.list)
  return &list_;
}
inline const ::protocol::TMManifest& TMManifests::list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMManifests.list)
  return list_.Get(index);
}
inline ::protocol::TMManifest* TMManifests::add_list() {
  // @@protoc_insertion_point(field_add:protocol.TMManifests.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMManifest >&
TMManifests::list() const {
  // @@protoc_insertion_point(field_list:protocol.TMManifests.list)
  return list_;
}

// optional bool history = 2 [deprecated = true];
inline bool TMManifests::has_history() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMManifests::clear_history() {
  history_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TMManifests::history() const {
  // @@protoc_insertion_point(field_get:protocol.TMManifests.history)
  return history_;
}
inline void TMManifests::set_history(bool value) {
  _has_bits_[0] |= 0x00000001u;
  history_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMManifests.history)
}

// -------------------------------------------------------------------

// TMClusterNode

// required string publicKey = 1;
inline bool TMClusterNode::has_publickey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMClusterNode::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMClusterNode::publickey() const {
  // @@protoc_insertion_point(field_get:protocol.TMClusterNode.publicKey)
  return publickey_.GetNoArena();
}
inline void TMClusterNode::set_publickey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMClusterNode.publicKey)
}
inline void TMClusterNode::set_publickey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMClusterNode.publicKey)
}
inline void TMClusterNode::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMClusterNode.publicKey)
}
inline void TMClusterNode::set_publickey(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMClusterNode.publicKey)
}
inline std::string* TMClusterNode::mutable_publickey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMClusterNode.publicKey)
  return publickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMClusterNode::release_publickey() {
  // @@protoc_insertion_point(field_release:protocol.TMClusterNode.publicKey)
  if (!has_publickey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return publickey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMClusterNode::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  publickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMClusterNode.publicKey)
}

// required uint32 reportTime = 2;
inline bool TMClusterNode::has_reporttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMClusterNode::clear_reporttime() {
  reporttime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMClusterNode::reporttime() const {
  // @@protoc_insertion_point(field_get:protocol.TMClusterNode.reportTime)
  return reporttime_;
}
inline void TMClusterNode::set_reporttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  reporttime_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMClusterNode.reportTime)
}

// required uint32 nodeLoad = 3;
inline bool TMClusterNode::has_nodeload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMClusterNode::clear_nodeload() {
  nodeload_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMClusterNode::nodeload() const {
  // @@protoc_insertion_point(field_get:protocol.TMClusterNode.nodeLoad)
  return nodeload_;
}
inline void TMClusterNode::set_nodeload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nodeload_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMClusterNode.nodeLoad)
}

// optional string nodeName = 4;
inline bool TMClusterNode::has_nodename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMClusterNode::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMClusterNode::nodename() const {
  // @@protoc_insertion_point(field_get:protocol.TMClusterNode.nodeName)
  return nodename_.GetNoArena();
}
inline void TMClusterNode::set_nodename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMClusterNode.nodeName)
}
inline void TMClusterNode::set_nodename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nodename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMClusterNode.nodeName)
}
inline void TMClusterNode::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMClusterNode.nodeName)
}
inline void TMClusterNode::set_nodename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMClusterNode.nodeName)
}
inline std::string* TMClusterNode::mutable_nodename() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMClusterNode.nodeName)
  return nodename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMClusterNode::release_nodename() {
  // @@protoc_insertion_point(field_release:protocol.TMClusterNode.nodeName)
  if (!has_nodename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nodename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMClusterNode::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nodename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMClusterNode.nodeName)
}

// optional string address = 5;
inline bool TMClusterNode::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMClusterNode::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TMClusterNode::address() const {
  // @@protoc_insertion_point(field_get:protocol.TMClusterNode.address)
  return address_.GetNoArena();
}
inline void TMClusterNode::set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMClusterNode.address)
}
inline void TMClusterNode::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMClusterNode.address)
}
inline void TMClusterNode::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMClusterNode.address)
}
inline void TMClusterNode::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMClusterNode.address)
}
inline std::string* TMClusterNode::mutable_address() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.TMClusterNode.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMClusterNode::release_address() {
  // @@protoc_insertion_point(field_release:protocol.TMClusterNode.address)
  if (!has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMClusterNode::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMClusterNode.address)
}

// -------------------------------------------------------------------

// TMLoadSource

// required string name = 1;
inline bool TMLoadSource::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMLoadSource::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMLoadSource::name() const {
  // @@protoc_insertion_point(field_get:protocol.TMLoadSource.name)
  return name_.GetNoArena();
}
inline void TMLoadSource::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMLoadSource.name)
}
inline void TMLoadSource::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMLoadSource.name)
}
inline void TMLoadSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMLoadSource.name)
}
inline void TMLoadSource::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMLoadSource.name)
}
inline std::string* TMLoadSource::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMLoadSource.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMLoadSource::release_name() {
  // @@protoc_insertion_point(field_release:protocol.TMLoadSource.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMLoadSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMLoadSource.name)
}

// required uint32 cost = 2;
inline bool TMLoadSource::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMLoadSource::clear_cost() {
  cost_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMLoadSource::cost() const {
  // @@protoc_insertion_point(field_get:protocol.TMLoadSource.cost)
  return cost_;
}
inline void TMLoadSource::set_cost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cost_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMLoadSource.cost)
}

// optional uint32 count = 3;
inline bool TMLoadSource::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMLoadSource::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMLoadSource::count() const {
  // @@protoc_insertion_point(field_get:protocol.TMLoadSource.count)
  return count_;
}
inline void TMLoadSource::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMLoadSource.count)
}

// -------------------------------------------------------------------

// TMCluster

// repeated .protocol.TMClusterNode clusterNodes = 1;
inline int TMCluster::clusternodes_size() const {
  return clusternodes_.size();
}
inline void TMCluster::clear_clusternodes() {
  clusternodes_.Clear();
}
inline ::protocol::TMClusterNode* TMCluster::mutable_clusternodes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMCluster.clusterNodes)
  return clusternodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMClusterNode >*
TMCluster::mutable_clusternodes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMCluster.clusterNodes)
  return &clusternodes_;
}
inline const ::protocol::TMClusterNode& TMCluster::clusternodes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMCluster.clusterNodes)
  return clusternodes_.Get(index);
}
inline ::protocol::TMClusterNode* TMCluster::add_clusternodes() {
  // @@protoc_insertion_point(field_add:protocol.TMCluster.clusterNodes)
  return clusternodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMClusterNode >&
TMCluster::clusternodes() const {
  // @@protoc_insertion_point(field_list:protocol.TMCluster.clusterNodes)
  return clusternodes_;
}

// repeated .protocol.TMLoadSource loadSources = 2;
inline int TMCluster::loadsources_size() const {
  return loadsources_.size();
}
inline void TMCluster::clear_loadsources() {
  loadsources_.Clear();
}
inline ::protocol::TMLoadSource* TMCluster::mutable_loadsources(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMCluster.loadSources)
  return loadsources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLoadSource >*
TMCluster::mutable_loadsources() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMCluster.loadSources)
  return &loadsources_;
}
inline const ::protocol::TMLoadSource& TMCluster::loadsources(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMCluster.loadSources)
  return loadsources_.Get(index);
}
inline ::protocol::TMLoadSource* TMCluster::add_loadsources() {
  // @@protoc_insertion_point(field_add:protocol.TMCluster.loadSources)
  return loadsources_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLoadSource >&
TMCluster::loadsources() const {
  // @@protoc_insertion_point(field_list:protocol.TMCluster.loadSources)
  return loadsources_;
}

// -------------------------------------------------------------------

// TMGetShardInfo

// required uint32 hops = 1 [deprecated = true];
inline bool TMGetShardInfo::has_hops() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMGetShardInfo::clear_hops() {
  hops_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMGetShardInfo::hops() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetShardInfo.hops)
  return hops_;
}
inline void TMGetShardInfo::set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hops_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetShardInfo.hops)
}

// optional bool lastLink = 2 [deprecated = true];
inline bool TMGetShardInfo::has_lastlink() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMGetShardInfo::clear_lastlink() {
  lastlink_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TMGetShardInfo::lastlink() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetShardInfo.lastLink)
  return lastlink_;
}
inline void TMGetShardInfo::set_lastlink(bool value) {
  _has_bits_[0] |= 0x00000002u;
  lastlink_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetShardInfo.lastLink)
}

// repeated uint32 peerchain = 3 [deprecated = true];
inline int TMGetShardInfo::peerchain_size() const {
  return peerchain_.size();
}
inline void TMGetShardInfo::clear_peerchain() {
  peerchain_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMGetShardInfo::peerchain(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMGetShardInfo.peerchain)
  return peerchain_.Get(index);
}
inline void TMGetShardInfo::set_peerchain(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  peerchain_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.TMGetShardInfo.peerchain)
}
inline void TMGetShardInfo::add_peerchain(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  peerchain_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.TMGetShardInfo.peerchain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TMGetShardInfo::peerchain() const {
  // @@protoc_insertion_point(field_list:protocol.TMGetShardInfo.peerchain)
  return peerchain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TMGetShardInfo::mutable_peerchain() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMGetShardInfo.peerchain)
  return &peerchain_;
}

// -------------------------------------------------------------------

// TMShardInfo

// required string shardIndexes = 1 [deprecated = true];
inline bool TMShardInfo::has_shardindexes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMShardInfo::clear_shardindexes() {
  shardindexes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMShardInfo::shardindexes() const {
  // @@protoc_insertion_point(field_get:protocol.TMShardInfo.shardIndexes)
  return shardindexes_.GetNoArena();
}
inline void TMShardInfo::set_shardindexes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMShardInfo.shardIndexes)
}
inline void TMShardInfo::set_shardindexes(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMShardInfo.shardIndexes)
}
inline void TMShardInfo::set_shardindexes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMShardInfo.shardIndexes)
}
inline void TMShardInfo::set_shardindexes(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMShardInfo.shardIndexes)
}
inline std::string* TMShardInfo::mutable_shardindexes() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMShardInfo.shardIndexes)
  return shardindexes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMShardInfo::release_shardindexes() {
  // @@protoc_insertion_point(field_release:protocol.TMShardInfo.shardIndexes)
  if (!has_shardindexes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shardindexes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMShardInfo::set_allocated_shardindexes(std::string* shardindexes) {
  if (shardindexes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shardindexes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shardindexes);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMShardInfo.shardIndexes)
}

// optional bytes nodePubKey = 2 [deprecated = true];
inline bool TMShardInfo::has_nodepubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMShardInfo::clear_nodepubkey() {
  nodepubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMShardInfo::nodepubkey() const {
  // @@protoc_insertion_point(field_get:protocol.TMShardInfo.nodePubKey)
  return nodepubkey_.GetNoArena();
}
inline void TMShardInfo::set_nodepubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMShardInfo.nodePubKey)
}
inline void TMShardInfo::set_nodepubkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMShardInfo.nodePubKey)
}
inline void TMShardInfo::set_nodepubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMShardInfo.nodePubKey)
}
inline void TMShardInfo::set_nodepubkey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMShardInfo.nodePubKey)
}
inline std::string* TMShardInfo::mutable_nodepubkey() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMShardInfo.nodePubKey)
  return nodepubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMShardInfo::release_nodepubkey() {
  // @@protoc_insertion_point(field_release:protocol.TMShardInfo.nodePubKey)
  if (!has_nodepubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nodepubkey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMShardInfo::set_allocated_nodepubkey(std::string* nodepubkey) {
  if (nodepubkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nodepubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodepubkey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMShardInfo.nodePubKey)
}

// optional string endpoint = 3 [deprecated = true];
inline bool TMShardInfo::has_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMShardInfo::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TMShardInfo::endpoint() const {
  // @@protoc_insertion_point(field_get:protocol.TMShardInfo.endpoint)
  return endpoint_.GetNoArena();
}
inline void TMShardInfo::set_endpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMShardInfo.endpoint)
}
inline void TMShardInfo::set_endpoint(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMShardInfo.endpoint)
}
inline void TMShardInfo::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMShardInfo.endpoint)
}
inline void TMShardInfo::set_endpoint(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMShardInfo.endpoint)
}
inline std::string* TMShardInfo::mutable_endpoint() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.TMShardInfo.endpoint)
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMShardInfo::release_endpoint() {
  // @@protoc_insertion_point(field_release:protocol.TMShardInfo.endpoint)
  if (!has_endpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return endpoint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMShardInfo::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMShardInfo.endpoint)
}

// optional bool lastLink = 4 [deprecated = true];
inline bool TMShardInfo::has_lastlink() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMShardInfo::clear_lastlink() {
  lastlink_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TMShardInfo::lastlink() const {
  // @@protoc_insertion_point(field_get:protocol.TMShardInfo.lastLink)
  return lastlink_;
}
inline void TMShardInfo::set_lastlink(bool value) {
  _has_bits_[0] |= 0x00000008u;
  lastlink_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMShardInfo.lastLink)
}

// repeated uint32 peerchain = 5 [deprecated = true];
inline int TMShardInfo::peerchain_size() const {
  return peerchain_.size();
}
inline void TMShardInfo::clear_peerchain() {
  peerchain_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMShardInfo::peerchain(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMShardInfo.peerchain)
  return peerchain_.Get(index);
}
inline void TMShardInfo::set_peerchain(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  peerchain_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.TMShardInfo.peerchain)
}
inline void TMShardInfo::add_peerchain(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  peerchain_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.TMShardInfo.peerchain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TMShardInfo::peerchain() const {
  // @@protoc_insertion_point(field_list:protocol.TMShardInfo.peerchain)
  return peerchain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TMShardInfo::mutable_peerchain() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMShardInfo.peerchain)
  return &peerchain_;
}

// -------------------------------------------------------------------

// TMLink

// required bytes nodePubKey = 1;
inline bool TMLink::has_nodepubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMLink::clear_nodepubkey() {
  nodepubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMLink::nodepubkey() const {
  // @@protoc_insertion_point(field_get:protocol.TMLink.nodePubKey)
  return nodepubkey_.GetNoArena();
}
inline void TMLink::set_nodepubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMLink.nodePubKey)
}
inline void TMLink::set_nodepubkey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nodepubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMLink.nodePubKey)
}
inline void TMLink::set_nodepubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMLink.nodePubKey)
}
inline void TMLink::set_nodepubkey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMLink.nodePubKey)
}
inline std::string* TMLink::mutable_nodepubkey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMLink.nodePubKey)
  return nodepubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMLink::release_nodepubkey() {
  // @@protoc_insertion_point(field_release:protocol.TMLink.nodePubKey)
  if (!has_nodepubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nodepubkey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMLink::set_allocated_nodepubkey(std::string* nodepubkey) {
  if (nodepubkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nodepubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodepubkey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMLink.nodePubKey)
}

// -------------------------------------------------------------------

// TMGetPeerShardInfo

// required uint32 hops = 1;
inline bool TMGetPeerShardInfo::has_hops() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMGetPeerShardInfo::clear_hops() {
  hops_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMGetPeerShardInfo::hops() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetPeerShardInfo.hops)
  return hops_;
}
inline void TMGetPeerShardInfo::set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hops_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetPeerShardInfo.hops)
}

// optional bool lastLink = 2;
inline bool TMGetPeerShardInfo::has_lastlink() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMGetPeerShardInfo::clear_lastlink() {
  lastlink_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TMGetPeerShardInfo::lastlink() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetPeerShardInfo.lastLink)
  return lastlink_;
}
inline void TMGetPeerShardInfo::set_lastlink(bool value) {
  _has_bits_[0] |= 0x00000002u;
  lastlink_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetPeerShardInfo.lastLink)
}

// repeated .protocol.TMLink peerChain = 3;
inline int TMGetPeerShardInfo::peerchain_size() const {
  return peerchain_.size();
}
inline void TMGetPeerShardInfo::clear_peerchain() {
  peerchain_.Clear();
}
inline ::protocol::TMLink* TMGetPeerShardInfo::mutable_peerchain(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMGetPeerShardInfo.peerChain)
  return peerchain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >*
TMGetPeerShardInfo::mutable_peerchain() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMGetPeerShardInfo.peerChain)
  return &peerchain_;
}
inline const ::protocol::TMLink& TMGetPeerShardInfo::peerchain(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMGetPeerShardInfo.peerChain)
  return peerchain_.Get(index);
}
inline ::protocol::TMLink* TMGetPeerShardInfo::add_peerchain() {
  // @@protoc_insertion_point(field_add:protocol.TMGetPeerShardInfo.peerChain)
  return peerchain_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >&
TMGetPeerShardInfo::peerchain() const {
  // @@protoc_insertion_point(field_list:protocol.TMGetPeerShardInfo.peerChain)
  return peerchain_;
}

// -------------------------------------------------------------------

// TMPeerShardInfo

// required string shardIndexes = 1;
inline bool TMPeerShardInfo::has_shardindexes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMPeerShardInfo::clear_shardindexes() {
  shardindexes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMPeerShardInfo::shardindexes() const {
  // @@protoc_insertion_point(field_get:protocol.TMPeerShardInfo.shardIndexes)
  return shardindexes_.GetNoArena();
}
inline void TMPeerShardInfo::set_shardindexes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMPeerShardInfo.shardIndexes)
}
inline void TMPeerShardInfo::set_shardindexes(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMPeerShardInfo.shardIndexes)
}
inline void TMPeerShardInfo::set_shardindexes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMPeerShardInfo.shardIndexes)
}
inline void TMPeerShardInfo::set_shardindexes(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  shardindexes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMPeerShardInfo.shardIndexes)
}
inline std::string* TMPeerShardInfo::mutable_shardindexes() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMPeerShardInfo.shardIndexes)
  return shardindexes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMPeerShardInfo::release_shardindexes() {
  // @@protoc_insertion_point(field_release:protocol.TMPeerShardInfo.shardIndexes)
  if (!has_shardindexes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shardindexes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMPeerShardInfo::set_allocated_shardindexes(std::string* shardindexes) {
  if (shardindexes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shardindexes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shardindexes);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMPeerShardInfo.shardIndexes)
}

// optional bytes nodePubKey = 2;
inline bool TMPeerShardInfo::has_nodepubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMPeerShardInfo::clear_nodepubkey() {
  nodepubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMPeerShardInfo::nodepubkey() const {
  // @@protoc_insertion_point(field_get:protocol.TMPeerShardInfo.nodePubKey)
  return nodepubkey_.GetNoArena();
}
inline void TMPeerShardInfo::set_nodepubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMPeerShardInfo.nodePubKey)
}
inline void TMPeerShardInfo::set_nodepubkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMPeerShardInfo.nodePubKey)
}
inline void TMPeerShardInfo::set_nodepubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMPeerShardInfo.nodePubKey)
}
inline void TMPeerShardInfo::set_nodepubkey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMPeerShardInfo.nodePubKey)
}
inline std::string* TMPeerShardInfo::mutable_nodepubkey() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMPeerShardInfo.nodePubKey)
  return nodepubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMPeerShardInfo::release_nodepubkey() {
  // @@protoc_insertion_point(field_release:protocol.TMPeerShardInfo.nodePubKey)
  if (!has_nodepubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nodepubkey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMPeerShardInfo::set_allocated_nodepubkey(std::string* nodepubkey) {
  if (nodepubkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nodepubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodepubkey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMPeerShardInfo.nodePubKey)
}

// optional string endpoint = 3;
inline bool TMPeerShardInfo::has_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMPeerShardInfo::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TMPeerShardInfo::endpoint() const {
  // @@protoc_insertion_point(field_get:protocol.TMPeerShardInfo.endpoint)
  return endpoint_.GetNoArena();
}
inline void TMPeerShardInfo::set_endpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMPeerShardInfo.endpoint)
}
inline void TMPeerShardInfo::set_endpoint(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMPeerShardInfo.endpoint)
}
inline void TMPeerShardInfo::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMPeerShardInfo.endpoint)
}
inline void TMPeerShardInfo::set_endpoint(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMPeerShardInfo.endpoint)
}
inline std::string* TMPeerShardInfo::mutable_endpoint() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.TMPeerShardInfo.endpoint)
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMPeerShardInfo::release_endpoint() {
  // @@protoc_insertion_point(field_release:protocol.TMPeerShardInfo.endpoint)
  if (!has_endpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return endpoint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMPeerShardInfo::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMPeerShardInfo.endpoint)
}

// optional bool lastLink = 4;
inline bool TMPeerShardInfo::has_lastlink() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMPeerShardInfo::clear_lastlink() {
  lastlink_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TMPeerShardInfo::lastlink() const {
  // @@protoc_insertion_point(field_get:protocol.TMPeerShardInfo.lastLink)
  return lastlink_;
}
inline void TMPeerShardInfo::set_lastlink(bool value) {
  _has_bits_[0] |= 0x00000008u;
  lastlink_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMPeerShardInfo.lastLink)
}

// repeated .protocol.TMLink peerChain = 5;
inline int TMPeerShardInfo::peerchain_size() const {
  return peerchain_.size();
}
inline void TMPeerShardInfo::clear_peerchain() {
  peerchain_.Clear();
}
inline ::protocol::TMLink* TMPeerShardInfo::mutable_peerchain(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMPeerShardInfo.peerChain)
  return peerchain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >*
TMPeerShardInfo::mutable_peerchain() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMPeerShardInfo.peerChain)
  return &peerchain_;
}
inline const ::protocol::TMLink& TMPeerShardInfo::peerchain(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMPeerShardInfo.peerChain)
  return peerchain_.Get(index);
}
inline ::protocol::TMLink* TMPeerShardInfo::add_peerchain() {
  // @@protoc_insertion_point(field_add:protocol.TMPeerShardInfo.peerChain)
  return peerchain_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLink >&
TMPeerShardInfo::peerchain() const {
  // @@protoc_insertion_point(field_list:protocol.TMPeerShardInfo.peerChain)
  return peerchain_;
}

// -------------------------------------------------------------------

// TMTransaction

// required bytes rawTransaction = 1;
inline bool TMTransaction::has_rawtransaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMTransaction::clear_rawtransaction() {
  rawtransaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMTransaction::rawtransaction() const {
  // @@protoc_insertion_point(field_get:protocol.TMTransaction.rawTransaction)
  return rawtransaction_.GetNoArena();
}
inline void TMTransaction::set_rawtransaction(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rawtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMTransaction.rawTransaction)
}
inline void TMTransaction::set_rawtransaction(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rawtransaction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMTransaction.rawTransaction)
}
inline void TMTransaction::set_rawtransaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rawtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMTransaction.rawTransaction)
}
inline void TMTransaction::set_rawtransaction(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rawtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMTransaction.rawTransaction)
}
inline std::string* TMTransaction::mutable_rawtransaction() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMTransaction.rawTransaction)
  return rawtransaction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMTransaction::release_rawtransaction() {
  // @@protoc_insertion_point(field_release:protocol.TMTransaction.rawTransaction)
  if (!has_rawtransaction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rawtransaction_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMTransaction::set_allocated_rawtransaction(std::string* rawtransaction) {
  if (rawtransaction != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rawtransaction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawtransaction);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMTransaction.rawTransaction)
}

// required .protocol.TransactionStatus status = 2;
inline bool TMTransaction::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMTransaction::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::protocol::TransactionStatus TMTransaction::status() const {
  // @@protoc_insertion_point(field_get:protocol.TMTransaction.status)
  return static_cast< ::protocol::TransactionStatus >(status_);
}
inline void TMTransaction::set_status(::protocol::TransactionStatus value) {
  assert(::protocol::TransactionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMTransaction.status)
}

// optional uint64 receiveTimestamp = 3;
inline bool TMTransaction::has_receivetimestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMTransaction::clear_receivetimestamp() {
  receivetimestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TMTransaction::receivetimestamp() const {
  // @@protoc_insertion_point(field_get:protocol.TMTransaction.receiveTimestamp)
  return receivetimestamp_;
}
inline void TMTransaction::set_receivetimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  receivetimestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMTransaction.receiveTimestamp)
}

// optional bool deferred = 4;
inline bool TMTransaction::has_deferred() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMTransaction::clear_deferred() {
  deferred_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TMTransaction::deferred() const {
  // @@protoc_insertion_point(field_get:protocol.TMTransaction.deferred)
  return deferred_;
}
inline void TMTransaction::set_deferred(bool value) {
  _has_bits_[0] |= 0x00000004u;
  deferred_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMTransaction.deferred)
}

// -------------------------------------------------------------------

// TMStatusChange

// optional .protocol.NodeStatus newStatus = 1;
inline bool TMStatusChange::has_newstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TMStatusChange::clear_newstatus() {
  newstatus_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::protocol::NodeStatus TMStatusChange::newstatus() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.newStatus)
  return static_cast< ::protocol::NodeStatus >(newstatus_);
}
inline void TMStatusChange::set_newstatus(::protocol::NodeStatus value) {
  assert(::protocol::NodeStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  newstatus_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.newStatus)
}

// optional .protocol.NodeEvent newEvent = 2;
inline bool TMStatusChange::has_newevent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TMStatusChange::clear_newevent() {
  newevent_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::protocol::NodeEvent TMStatusChange::newevent() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.newEvent)
  return static_cast< ::protocol::NodeEvent >(newevent_);
}
inline void TMStatusChange::set_newevent(::protocol::NodeEvent value) {
  assert(::protocol::NodeEvent_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  newevent_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.newEvent)
}

// optional uint32 ledgerSeq = 3;
inline bool TMStatusChange::has_ledgerseq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMStatusChange::clear_ledgerseq() {
  ledgerseq_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMStatusChange::ledgerseq() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.ledgerSeq)
  return ledgerseq_;
}
inline void TMStatusChange::set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ledgerseq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.ledgerSeq)
}

// optional bytes ledgerHash = 4;
inline bool TMStatusChange::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMStatusChange::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMStatusChange::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMStatusChange::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.ledgerHash)
}
inline void TMStatusChange::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMStatusChange.ledgerHash)
}
inline void TMStatusChange::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMStatusChange.ledgerHash)
}
inline void TMStatusChange::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMStatusChange.ledgerHash)
}
inline std::string* TMStatusChange::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMStatusChange.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMStatusChange::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMStatusChange.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMStatusChange::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMStatusChange.ledgerHash)
}

// optional bytes ledgerHashPrevious = 5;
inline bool TMStatusChange::has_ledgerhashprevious() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMStatusChange::clear_ledgerhashprevious() {
  ledgerhashprevious_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMStatusChange::ledgerhashprevious() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.ledgerHashPrevious)
  return ledgerhashprevious_.GetNoArena();
}
inline void TMStatusChange::set_ledgerhashprevious(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhashprevious_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.ledgerHashPrevious)
}
inline void TMStatusChange::set_ledgerhashprevious(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhashprevious_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMStatusChange.ledgerHashPrevious)
}
inline void TMStatusChange::set_ledgerhashprevious(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ledgerhashprevious_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMStatusChange.ledgerHashPrevious)
}
inline void TMStatusChange::set_ledgerhashprevious(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhashprevious_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMStatusChange.ledgerHashPrevious)
}
inline std::string* TMStatusChange::mutable_ledgerhashprevious() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMStatusChange.ledgerHashPrevious)
  return ledgerhashprevious_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMStatusChange::release_ledgerhashprevious() {
  // @@protoc_insertion_point(field_release:protocol.TMStatusChange.ledgerHashPrevious)
  if (!has_ledgerhashprevious()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ledgerhashprevious_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMStatusChange::set_allocated_ledgerhashprevious(std::string* ledgerhashprevious) {
  if (ledgerhashprevious != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ledgerhashprevious_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhashprevious);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMStatusChange.ledgerHashPrevious)
}

// optional uint64 networkTime = 6;
inline bool TMStatusChange::has_networktime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMStatusChange::clear_networktime() {
  networktime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TMStatusChange::networktime() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.networkTime)
  return networktime_;
}
inline void TMStatusChange::set_networktime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  networktime_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.networkTime)
}

// optional uint32 firstSeq = 7;
inline bool TMStatusChange::has_firstseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMStatusChange::clear_firstseq() {
  firstseq_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMStatusChange::firstseq() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.firstSeq)
  return firstseq_;
}
inline void TMStatusChange::set_firstseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  firstseq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.firstSeq)
}

// optional uint32 lastSeq = 8;
inline bool TMStatusChange::has_lastseq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TMStatusChange::clear_lastseq() {
  lastseq_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMStatusChange::lastseq() const {
  // @@protoc_insertion_point(field_get:protocol.TMStatusChange.lastSeq)
  return lastseq_;
}
inline void TMStatusChange::set_lastseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  lastseq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMStatusChange.lastSeq)
}

// -------------------------------------------------------------------

// TMProposeSet

// required uint32 proposeSeq = 1;
inline bool TMProposeSet::has_proposeseq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMProposeSet::clear_proposeseq() {
  proposeseq_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMProposeSet::proposeseq() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.proposeSeq)
  return proposeseq_;
}
inline void TMProposeSet::set_proposeseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  proposeseq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.proposeSeq)
}

// required bytes currentTxHash = 2;
inline bool TMProposeSet::has_currenttxhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMProposeSet::clear_currenttxhash() {
  currenttxhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMProposeSet::currenttxhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.currentTxHash)
  return currenttxhash_.GetNoArena();
}
inline void TMProposeSet::set_currenttxhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currenttxhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.currentTxHash)
}
inline void TMProposeSet::set_currenttxhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  currenttxhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProposeSet.currentTxHash)
}
inline void TMProposeSet::set_currenttxhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  currenttxhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProposeSet.currentTxHash)
}
inline void TMProposeSet::set_currenttxhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  currenttxhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProposeSet.currentTxHash)
}
inline std::string* TMProposeSet::mutable_currenttxhash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProposeSet.currentTxHash)
  return currenttxhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProposeSet::release_currenttxhash() {
  // @@protoc_insertion_point(field_release:protocol.TMProposeSet.currentTxHash)
  if (!has_currenttxhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return currenttxhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProposeSet::set_allocated_currenttxhash(std::string* currenttxhash) {
  if (currenttxhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currenttxhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currenttxhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProposeSet.currentTxHash)
}

// required bytes nodePubKey = 3;
inline bool TMProposeSet::has_nodepubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMProposeSet::clear_nodepubkey() {
  nodepubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMProposeSet::nodepubkey() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.nodePubKey)
  return nodepubkey_.GetNoArena();
}
inline void TMProposeSet::set_nodepubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.nodePubKey)
}
inline void TMProposeSet::set_nodepubkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProposeSet.nodePubKey)
}
inline void TMProposeSet::set_nodepubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProposeSet.nodePubKey)
}
inline void TMProposeSet::set_nodepubkey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nodepubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProposeSet.nodePubKey)
}
inline std::string* TMProposeSet::mutable_nodepubkey() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProposeSet.nodePubKey)
  return nodepubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProposeSet::release_nodepubkey() {
  // @@protoc_insertion_point(field_release:protocol.TMProposeSet.nodePubKey)
  if (!has_nodepubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nodepubkey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProposeSet::set_allocated_nodepubkey(std::string* nodepubkey) {
  if (nodepubkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nodepubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodepubkey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProposeSet.nodePubKey)
}

// required uint32 closeTime = 4;
inline bool TMProposeSet::has_closetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TMProposeSet::clear_closetime() {
  closetime_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMProposeSet::closetime() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.closeTime)
  return closetime_;
}
inline void TMProposeSet::set_closetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  closetime_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.closeTime)
}

// required bytes signature = 5;
inline bool TMProposeSet::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMProposeSet::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TMProposeSet::signature() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.signature)
  return signature_.GetNoArena();
}
inline void TMProposeSet::set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.signature)
}
inline void TMProposeSet::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProposeSet.signature)
}
inline void TMProposeSet::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProposeSet.signature)
}
inline void TMProposeSet::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProposeSet.signature)
}
inline std::string* TMProposeSet::mutable_signature() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProposeSet.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProposeSet::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.TMProposeSet.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return signature_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProposeSet::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProposeSet.signature)
}

// required bytes previousledger = 6;
inline bool TMProposeSet::has_previousledger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMProposeSet::clear_previousledger() {
  previousledger_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TMProposeSet::previousledger() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.previousledger)
  return previousledger_.GetNoArena();
}
inline void TMProposeSet::set_previousledger(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  previousledger_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.previousledger)
}
inline void TMProposeSet::set_previousledger(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  previousledger_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProposeSet.previousledger)
}
inline void TMProposeSet::set_previousledger(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  previousledger_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProposeSet.previousledger)
}
inline void TMProposeSet::set_previousledger(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  previousledger_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProposeSet.previousledger)
}
inline std::string* TMProposeSet::mutable_previousledger() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProposeSet.previousledger)
  return previousledger_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProposeSet::release_previousledger() {
  // @@protoc_insertion_point(field_release:protocol.TMProposeSet.previousledger)
  if (!has_previousledger()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return previousledger_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProposeSet::set_allocated_previousledger(std::string* previousledger) {
  if (previousledger != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  previousledger_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previousledger);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProposeSet.previousledger)
}

// repeated bytes addedTransactions = 10;
inline int TMProposeSet::addedtransactions_size() const {
  return addedtransactions_.size();
}
inline void TMProposeSet::clear_addedtransactions() {
  addedtransactions_.Clear();
}
inline const std::string& TMProposeSet::addedtransactions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.addedTransactions)
  return addedtransactions_.Get(index);
}
inline std::string* TMProposeSet::mutable_addedtransactions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMProposeSet.addedTransactions)
  return addedtransactions_.Mutable(index);
}
inline void TMProposeSet::set_addedtransactions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.addedTransactions)
  addedtransactions_.Mutable(index)->assign(value);
}
inline void TMProposeSet::set_addedtransactions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.addedTransactions)
  addedtransactions_.Mutable(index)->assign(std::move(value));
}
inline void TMProposeSet::set_addedtransactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addedtransactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TMProposeSet.addedTransactions)
}
inline void TMProposeSet::set_addedtransactions(int index, const void* value, size_t size) {
  addedtransactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProposeSet.addedTransactions)
}
inline std::string* TMProposeSet::add_addedtransactions() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TMProposeSet.addedTransactions)
  return addedtransactions_.Add();
}
inline void TMProposeSet::add_addedtransactions(const std::string& value) {
  addedtransactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TMProposeSet.addedTransactions)
}
inline void TMProposeSet::add_addedtransactions(std::string&& value) {
  addedtransactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TMProposeSet.addedTransactions)
}
inline void TMProposeSet::add_addedtransactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addedtransactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TMProposeSet.addedTransactions)
}
inline void TMProposeSet::add_addedtransactions(const void* value, size_t size) {
  addedtransactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TMProposeSet.addedTransactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TMProposeSet::addedtransactions() const {
  // @@protoc_insertion_point(field_list:protocol.TMProposeSet.addedTransactions)
  return addedtransactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TMProposeSet::mutable_addedtransactions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMProposeSet.addedTransactions)
  return &addedtransactions_;
}

// repeated bytes removedTransactions = 11;
inline int TMProposeSet::removedtransactions_size() const {
  return removedtransactions_.size();
}
inline void TMProposeSet::clear_removedtransactions() {
  removedtransactions_.Clear();
}
inline const std::string& TMProposeSet::removedtransactions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.removedTransactions)
  return removedtransactions_.Get(index);
}
inline std::string* TMProposeSet::mutable_removedtransactions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMProposeSet.removedTransactions)
  return removedtransactions_.Mutable(index);
}
inline void TMProposeSet::set_removedtransactions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.removedTransactions)
  removedtransactions_.Mutable(index)->assign(value);
}
inline void TMProposeSet::set_removedtransactions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.removedTransactions)
  removedtransactions_.Mutable(index)->assign(std::move(value));
}
inline void TMProposeSet::set_removedtransactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removedtransactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TMProposeSet.removedTransactions)
}
inline void TMProposeSet::set_removedtransactions(int index, const void* value, size_t size) {
  removedtransactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProposeSet.removedTransactions)
}
inline std::string* TMProposeSet::add_removedtransactions() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TMProposeSet.removedTransactions)
  return removedtransactions_.Add();
}
inline void TMProposeSet::add_removedtransactions(const std::string& value) {
  removedtransactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TMProposeSet.removedTransactions)
}
inline void TMProposeSet::add_removedtransactions(std::string&& value) {
  removedtransactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TMProposeSet.removedTransactions)
}
inline void TMProposeSet::add_removedtransactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removedtransactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TMProposeSet.removedTransactions)
}
inline void TMProposeSet::add_removedtransactions(const void* value, size_t size) {
  removedtransactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TMProposeSet.removedTransactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TMProposeSet::removedtransactions() const {
  // @@protoc_insertion_point(field_list:protocol.TMProposeSet.removedTransactions)
  return removedtransactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TMProposeSet::mutable_removedtransactions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMProposeSet.removedTransactions)
  return &removedtransactions_;
}

// optional bool checkedSignature = 7 [deprecated = true];
inline bool TMProposeSet::has_checkedsignature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TMProposeSet::clear_checkedsignature() {
  checkedsignature_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TMProposeSet::checkedsignature() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.checkedSignature)
  return checkedsignature_;
}
inline void TMProposeSet::set_checkedsignature(bool value) {
  _has_bits_[0] |= 0x00000040u;
  checkedsignature_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.checkedSignature)
}

// optional uint32 hops = 12 [deprecated = true];
inline bool TMProposeSet::has_hops() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TMProposeSet::clear_hops() {
  hops_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMProposeSet::hops() const {
  // @@protoc_insertion_point(field_get:protocol.TMProposeSet.hops)
  return hops_;
}
inline void TMProposeSet::set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  hops_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMProposeSet.hops)
}

// -------------------------------------------------------------------

// TMHaveTransactionSet

// required .protocol.TxSetStatus status = 1;
inline bool TMHaveTransactionSet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMHaveTransactionSet::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protocol::TxSetStatus TMHaveTransactionSet::status() const {
  // @@protoc_insertion_point(field_get:protocol.TMHaveTransactionSet.status)
  return static_cast< ::protocol::TxSetStatus >(status_);
}
inline void TMHaveTransactionSet::set_status(::protocol::TxSetStatus value) {
  assert(::protocol::TxSetStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMHaveTransactionSet.status)
}

// required bytes hash = 2;
inline bool TMHaveTransactionSet::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMHaveTransactionSet::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMHaveTransactionSet::hash() const {
  // @@protoc_insertion_point(field_get:protocol.TMHaveTransactionSet.hash)
  return hash_.GetNoArena();
}
inline void TMHaveTransactionSet::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMHaveTransactionSet.hash)
}
inline void TMHaveTransactionSet::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMHaveTransactionSet.hash)
}
inline void TMHaveTransactionSet::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMHaveTransactionSet.hash)
}
inline void TMHaveTransactionSet::set_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMHaveTransactionSet.hash)
}
inline std::string* TMHaveTransactionSet::mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMHaveTransactionSet.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMHaveTransactionSet::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.TMHaveTransactionSet.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMHaveTransactionSet::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMHaveTransactionSet.hash)
}

// -------------------------------------------------------------------

// TMValidatorList

// required bytes manifest = 1;
inline bool TMValidatorList::has_manifest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMValidatorList::clear_manifest() {
  manifest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMValidatorList::manifest() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidatorList.manifest)
  return manifest_.GetNoArena();
}
inline void TMValidatorList::set_manifest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMValidatorList.manifest)
}
inline void TMValidatorList::set_manifest(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMValidatorList.manifest)
}
inline void TMValidatorList::set_manifest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMValidatorList.manifest)
}
inline void TMValidatorList::set_manifest(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMValidatorList.manifest)
}
inline std::string* TMValidatorList::mutable_manifest() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMValidatorList.manifest)
  return manifest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMValidatorList::release_manifest() {
  // @@protoc_insertion_point(field_release:protocol.TMValidatorList.manifest)
  if (!has_manifest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return manifest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMValidatorList::set_allocated_manifest(std::string* manifest) {
  if (manifest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manifest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manifest);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMValidatorList.manifest)
}

// required bytes blob = 2;
inline bool TMValidatorList::has_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMValidatorList::clear_blob() {
  blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMValidatorList::blob() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidatorList.blob)
  return blob_.GetNoArena();
}
inline void TMValidatorList::set_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMValidatorList.blob)
}
inline void TMValidatorList::set_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMValidatorList.blob)
}
inline void TMValidatorList::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMValidatorList.blob)
}
inline void TMValidatorList::set_blob(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMValidatorList.blob)
}
inline std::string* TMValidatorList::mutable_blob() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMValidatorList.blob)
  return blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMValidatorList::release_blob() {
  // @@protoc_insertion_point(field_release:protocol.TMValidatorList.blob)
  if (!has_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMValidatorList::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMValidatorList.blob)
}

// required bytes signature = 3;
inline bool TMValidatorList::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMValidatorList::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TMValidatorList::signature() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidatorList.signature)
  return signature_.GetNoArena();
}
inline void TMValidatorList::set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMValidatorList.signature)
}
inline void TMValidatorList::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMValidatorList.signature)
}
inline void TMValidatorList::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMValidatorList.signature)
}
inline void TMValidatorList::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMValidatorList.signature)
}
inline std::string* TMValidatorList::mutable_signature() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.TMValidatorList.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMValidatorList::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.TMValidatorList.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return signature_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMValidatorList::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMValidatorList.signature)
}

// required uint32 version = 4;
inline bool TMValidatorList::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMValidatorList::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMValidatorList::version() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidatorList.version)
  return version_;
}
inline void TMValidatorList::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMValidatorList.version)
}

// -------------------------------------------------------------------

// ValidatorBlobInfo

// optional bytes manifest = 1;
inline bool ValidatorBlobInfo::has_manifest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValidatorBlobInfo::clear_manifest() {
  manifest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ValidatorBlobInfo::manifest() const {
  // @@protoc_insertion_point(field_get:protocol.ValidatorBlobInfo.manifest)
  return manifest_.GetNoArena();
}
inline void ValidatorBlobInfo::set_manifest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ValidatorBlobInfo.manifest)
}
inline void ValidatorBlobInfo::set_manifest(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ValidatorBlobInfo.manifest)
}
inline void ValidatorBlobInfo::set_manifest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ValidatorBlobInfo.manifest)
}
inline void ValidatorBlobInfo::set_manifest(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ValidatorBlobInfo.manifest)
}
inline std::string* ValidatorBlobInfo::mutable_manifest() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.ValidatorBlobInfo.manifest)
  return manifest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidatorBlobInfo::release_manifest() {
  // @@protoc_insertion_point(field_release:protocol.ValidatorBlobInfo.manifest)
  if (!has_manifest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return manifest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidatorBlobInfo::set_allocated_manifest(std::string* manifest) {
  if (manifest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manifest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manifest);
  // @@protoc_insertion_point(field_set_allocated:protocol.ValidatorBlobInfo.manifest)
}

// required bytes blob = 2;
inline bool ValidatorBlobInfo::has_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValidatorBlobInfo::clear_blob() {
  blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ValidatorBlobInfo::blob() const {
  // @@protoc_insertion_point(field_get:protocol.ValidatorBlobInfo.blob)
  return blob_.GetNoArena();
}
inline void ValidatorBlobInfo::set_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ValidatorBlobInfo.blob)
}
inline void ValidatorBlobInfo::set_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ValidatorBlobInfo.blob)
}
inline void ValidatorBlobInfo::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ValidatorBlobInfo.blob)
}
inline void ValidatorBlobInfo::set_blob(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ValidatorBlobInfo.blob)
}
inline std::string* ValidatorBlobInfo::mutable_blob() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.ValidatorBlobInfo.blob)
  return blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidatorBlobInfo::release_blob() {
  // @@protoc_insertion_point(field_release:protocol.ValidatorBlobInfo.blob)
  if (!has_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidatorBlobInfo::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:protocol.ValidatorBlobInfo.blob)
}

// required bytes signature = 3;
inline bool ValidatorBlobInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValidatorBlobInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ValidatorBlobInfo::signature() const {
  // @@protoc_insertion_point(field_get:protocol.ValidatorBlobInfo.signature)
  return signature_.GetNoArena();
}
inline void ValidatorBlobInfo::set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ValidatorBlobInfo.signature)
}
inline void ValidatorBlobInfo::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ValidatorBlobInfo.signature)
}
inline void ValidatorBlobInfo::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ValidatorBlobInfo.signature)
}
inline void ValidatorBlobInfo::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ValidatorBlobInfo.signature)
}
inline std::string* ValidatorBlobInfo::mutable_signature() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.ValidatorBlobInfo.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidatorBlobInfo::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.ValidatorBlobInfo.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return signature_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidatorBlobInfo::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.ValidatorBlobInfo.signature)
}

// -------------------------------------------------------------------

// TMValidatorListCollection

// required uint32 version = 1;
inline bool TMValidatorListCollection::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMValidatorListCollection::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMValidatorListCollection::version() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidatorListCollection.version)
  return version_;
}
inline void TMValidatorListCollection::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMValidatorListCollection.version)
}

// required bytes manifest = 2;
inline bool TMValidatorListCollection::has_manifest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMValidatorListCollection::clear_manifest() {
  manifest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMValidatorListCollection::manifest() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidatorListCollection.manifest)
  return manifest_.GetNoArena();
}
inline void TMValidatorListCollection::set_manifest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMValidatorListCollection.manifest)
}
inline void TMValidatorListCollection::set_manifest(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMValidatorListCollection.manifest)
}
inline void TMValidatorListCollection::set_manifest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMValidatorListCollection.manifest)
}
inline void TMValidatorListCollection::set_manifest(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMValidatorListCollection.manifest)
}
inline std::string* TMValidatorListCollection::mutable_manifest() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMValidatorListCollection.manifest)
  return manifest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMValidatorListCollection::release_manifest() {
  // @@protoc_insertion_point(field_release:protocol.TMValidatorListCollection.manifest)
  if (!has_manifest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return manifest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMValidatorListCollection::set_allocated_manifest(std::string* manifest) {
  if (manifest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manifest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manifest);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMValidatorListCollection.manifest)
}

// repeated .protocol.ValidatorBlobInfo blobs = 3;
inline int TMValidatorListCollection::blobs_size() const {
  return blobs_.size();
}
inline void TMValidatorListCollection::clear_blobs() {
  blobs_.Clear();
}
inline ::protocol::ValidatorBlobInfo* TMValidatorListCollection::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMValidatorListCollection.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ValidatorBlobInfo >*
TMValidatorListCollection::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMValidatorListCollection.blobs)
  return &blobs_;
}
inline const ::protocol::ValidatorBlobInfo& TMValidatorListCollection::blobs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMValidatorListCollection.blobs)
  return blobs_.Get(index);
}
inline ::protocol::ValidatorBlobInfo* TMValidatorListCollection::add_blobs() {
  // @@protoc_insertion_point(field_add:protocol.TMValidatorListCollection.blobs)
  return blobs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ValidatorBlobInfo >&
TMValidatorListCollection::blobs() const {
  // @@protoc_insertion_point(field_list:protocol.TMValidatorListCollection.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// TMValidation

// required bytes validation = 1;
inline bool TMValidation::has_validation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMValidation::clear_validation() {
  validation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMValidation::validation() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidation.validation)
  return validation_.GetNoArena();
}
inline void TMValidation::set_validation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  validation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMValidation.validation)
}
inline void TMValidation::set_validation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  validation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMValidation.validation)
}
inline void TMValidation::set_validation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  validation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMValidation.validation)
}
inline void TMValidation::set_validation(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  validation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMValidation.validation)
}
inline std::string* TMValidation::mutable_validation() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMValidation.validation)
  return validation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMValidation::release_validation() {
  // @@protoc_insertion_point(field_release:protocol.TMValidation.validation)
  if (!has_validation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return validation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMValidation::set_allocated_validation(std::string* validation) {
  if (validation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  validation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validation);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMValidation.validation)
}

// optional bool checkedSignature = 2 [deprecated = true];
inline bool TMValidation::has_checkedsignature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMValidation::clear_checkedsignature() {
  checkedsignature_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TMValidation::checkedsignature() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidation.checkedSignature)
  return checkedsignature_;
}
inline void TMValidation::set_checkedsignature(bool value) {
  _has_bits_[0] |= 0x00000002u;
  checkedsignature_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMValidation.checkedSignature)
}

// optional uint32 hops = 3 [deprecated = true];
inline bool TMValidation::has_hops() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMValidation::clear_hops() {
  hops_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMValidation::hops() const {
  // @@protoc_insertion_point(field_get:protocol.TMValidation.hops)
  return hops_;
}
inline void TMValidation::set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hops_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMValidation.hops)
}

// -------------------------------------------------------------------

// TMEndpoints_TMEndpointv2

// required string endpoint = 1;
inline bool TMEndpoints_TMEndpointv2::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMEndpoints_TMEndpointv2::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMEndpoints_TMEndpointv2::endpoint() const {
  // @@protoc_insertion_point(field_get:protocol.TMEndpoints.TMEndpointv2.endpoint)
  return endpoint_.GetNoArena();
}
inline void TMEndpoints_TMEndpointv2::set_endpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMEndpoints.TMEndpointv2.endpoint)
}
inline void TMEndpoints_TMEndpointv2::set_endpoint(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMEndpoints.TMEndpointv2.endpoint)
}
inline void TMEndpoints_TMEndpointv2::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMEndpoints.TMEndpointv2.endpoint)
}
inline void TMEndpoints_TMEndpointv2::set_endpoint(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMEndpoints.TMEndpointv2.endpoint)
}
inline std::string* TMEndpoints_TMEndpointv2::mutable_endpoint() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMEndpoints.TMEndpointv2.endpoint)
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMEndpoints_TMEndpointv2::release_endpoint() {
  // @@protoc_insertion_point(field_release:protocol.TMEndpoints.TMEndpointv2.endpoint)
  if (!has_endpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return endpoint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMEndpoints_TMEndpointv2::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMEndpoints.TMEndpointv2.endpoint)
}

// required uint32 hops = 2;
inline bool TMEndpoints_TMEndpointv2::has_hops() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMEndpoints_TMEndpointv2::clear_hops() {
  hops_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMEndpoints_TMEndpointv2::hops() const {
  // @@protoc_insertion_point(field_get:protocol.TMEndpoints.TMEndpointv2.hops)
  return hops_;
}
inline void TMEndpoints_TMEndpointv2::set_hops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  hops_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMEndpoints.TMEndpointv2.hops)
}

// -------------------------------------------------------------------

// TMEndpoints

// required uint32 version = 1;
inline bool TMEndpoints::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMEndpoints::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMEndpoints::version() const {
  // @@protoc_insertion_point(field_get:protocol.TMEndpoints.version)
  return version_;
}
inline void TMEndpoints::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMEndpoints.version)
}

// repeated .protocol.TMEndpoints.TMEndpointv2 endpoints_v2 = 3;
inline int TMEndpoints::endpoints_v2_size() const {
  return endpoints_v2_.size();
}
inline void TMEndpoints::clear_endpoints_v2() {
  endpoints_v2_.Clear();
}
inline ::protocol::TMEndpoints_TMEndpointv2* TMEndpoints::mutable_endpoints_v2(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMEndpoints.endpoints_v2)
  return endpoints_v2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMEndpoints_TMEndpointv2 >*
TMEndpoints::mutable_endpoints_v2() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMEndpoints.endpoints_v2)
  return &endpoints_v2_;
}
inline const ::protocol::TMEndpoints_TMEndpointv2& TMEndpoints::endpoints_v2(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMEndpoints.endpoints_v2)
  return endpoints_v2_.Get(index);
}
inline ::protocol::TMEndpoints_TMEndpointv2* TMEndpoints::add_endpoints_v2() {
  // @@protoc_insertion_point(field_add:protocol.TMEndpoints.endpoints_v2)
  return endpoints_v2_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMEndpoints_TMEndpointv2 >&
TMEndpoints::endpoints_v2() const {
  // @@protoc_insertion_point(field_list:protocol.TMEndpoints.endpoints_v2)
  return endpoints_v2_;
}

// -------------------------------------------------------------------

// TMIndexedObject

// optional bytes hash = 1;
inline bool TMIndexedObject::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMIndexedObject::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMIndexedObject::hash() const {
  // @@protoc_insertion_point(field_get:protocol.TMIndexedObject.hash)
  return hash_.GetNoArena();
}
inline void TMIndexedObject::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMIndexedObject.hash)
}
inline void TMIndexedObject::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMIndexedObject.hash)
}
inline void TMIndexedObject::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMIndexedObject.hash)
}
inline void TMIndexedObject::set_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMIndexedObject.hash)
}
inline std::string* TMIndexedObject::mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMIndexedObject.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMIndexedObject::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.TMIndexedObject.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMIndexedObject::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMIndexedObject.hash)
}

// optional bytes nodeID = 2;
inline bool TMIndexedObject::has_nodeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMIndexedObject::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMIndexedObject::nodeid() const {
  // @@protoc_insertion_point(field_get:protocol.TMIndexedObject.nodeID)
  return nodeid_.GetNoArena();
}
inline void TMIndexedObject::set_nodeid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMIndexedObject.nodeID)
}
inline void TMIndexedObject::set_nodeid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMIndexedObject.nodeID)
}
inline void TMIndexedObject::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMIndexedObject.nodeID)
}
inline void TMIndexedObject::set_nodeid(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMIndexedObject.nodeID)
}
inline std::string* TMIndexedObject::mutable_nodeid() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMIndexedObject.nodeID)
  return nodeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMIndexedObject::release_nodeid() {
  // @@protoc_insertion_point(field_release:protocol.TMIndexedObject.nodeID)
  if (!has_nodeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nodeid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMIndexedObject::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nodeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMIndexedObject.nodeID)
}

// optional bytes index = 3;
inline bool TMIndexedObject::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMIndexedObject::clear_index() {
  index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TMIndexedObject::index() const {
  // @@protoc_insertion_point(field_get:protocol.TMIndexedObject.index)
  return index_.GetNoArena();
}
inline void TMIndexedObject::set_index(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMIndexedObject.index)
}
inline void TMIndexedObject::set_index(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  index_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMIndexedObject.index)
}
inline void TMIndexedObject::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMIndexedObject.index)
}
inline void TMIndexedObject::set_index(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMIndexedObject.index)
}
inline std::string* TMIndexedObject::mutable_index() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.TMIndexedObject.index)
  return index_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMIndexedObject::release_index() {
  // @@protoc_insertion_point(field_release:protocol.TMIndexedObject.index)
  if (!has_index()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return index_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMIndexedObject::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  index_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMIndexedObject.index)
}

// optional bytes data = 4;
inline bool TMIndexedObject::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMIndexedObject::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TMIndexedObject::data() const {
  // @@protoc_insertion_point(field_get:protocol.TMIndexedObject.data)
  return data_.GetNoArena();
}
inline void TMIndexedObject::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMIndexedObject.data)
}
inline void TMIndexedObject::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMIndexedObject.data)
}
inline void TMIndexedObject::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMIndexedObject.data)
}
inline void TMIndexedObject::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMIndexedObject.data)
}
inline std::string* TMIndexedObject::mutable_data() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:protocol.TMIndexedObject.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMIndexedObject::release_data() {
  // @@protoc_insertion_point(field_release:protocol.TMIndexedObject.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMIndexedObject::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMIndexedObject.data)
}

// optional uint32 ledgerSeq = 5;
inline bool TMIndexedObject::has_ledgerseq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMIndexedObject::clear_ledgerseq() {
  ledgerseq_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMIndexedObject::ledgerseq() const {
  // @@protoc_insertion_point(field_get:protocol.TMIndexedObject.ledgerSeq)
  return ledgerseq_;
}
inline void TMIndexedObject::set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ledgerseq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMIndexedObject.ledgerSeq)
}

// -------------------------------------------------------------------

// TMGetObjectByHash

// required .protocol.TMGetObjectByHash.ObjectType type = 1;
inline bool TMGetObjectByHash::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMGetObjectByHash::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protocol::TMGetObjectByHash_ObjectType TMGetObjectByHash::type() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetObjectByHash.type)
  return static_cast< ::protocol::TMGetObjectByHash_ObjectType >(type_);
}
inline void TMGetObjectByHash::set_type(::protocol::TMGetObjectByHash_ObjectType value) {
  assert(::protocol::TMGetObjectByHash_ObjectType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetObjectByHash.type)
}

// required bool query = 2;
inline bool TMGetObjectByHash::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMGetObjectByHash::clear_query() {
  query_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TMGetObjectByHash::query() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetObjectByHash.query)
  return query_;
}
inline void TMGetObjectByHash::set_query(bool value) {
  _has_bits_[0] |= 0x00000008u;
  query_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetObjectByHash.query)
}

// optional uint32 seq = 3;
inline bool TMGetObjectByHash::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMGetObjectByHash::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMGetObjectByHash::seq() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetObjectByHash.seq)
  return seq_;
}
inline void TMGetObjectByHash::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetObjectByHash.seq)
}

// optional bytes ledgerHash = 4;
inline bool TMGetObjectByHash::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMGetObjectByHash::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMGetObjectByHash::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetObjectByHash.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMGetObjectByHash::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMGetObjectByHash.ledgerHash)
}
inline void TMGetObjectByHash::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMGetObjectByHash.ledgerHash)
}
inline void TMGetObjectByHash::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMGetObjectByHash.ledgerHash)
}
inline void TMGetObjectByHash::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMGetObjectByHash.ledgerHash)
}
inline std::string* TMGetObjectByHash::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMGetObjectByHash.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMGetObjectByHash::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMGetObjectByHash.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMGetObjectByHash::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMGetObjectByHash.ledgerHash)
}

// optional bool fat = 5;
inline bool TMGetObjectByHash::has_fat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMGetObjectByHash::clear_fat() {
  fat_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TMGetObjectByHash::fat() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetObjectByHash.fat)
  return fat_;
}
inline void TMGetObjectByHash::set_fat(bool value) {
  _has_bits_[0] |= 0x00000010u;
  fat_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetObjectByHash.fat)
}

// repeated .protocol.TMIndexedObject objects = 6;
inline int TMGetObjectByHash::objects_size() const {
  return objects_.size();
}
inline void TMGetObjectByHash::clear_objects() {
  objects_.Clear();
}
inline ::protocol::TMIndexedObject* TMGetObjectByHash::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMGetObjectByHash.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMIndexedObject >*
TMGetObjectByHash::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMGetObjectByHash.objects)
  return &objects_;
}
inline const ::protocol::TMIndexedObject& TMGetObjectByHash::objects(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMGetObjectByHash.objects)
  return objects_.Get(index);
}
inline ::protocol::TMIndexedObject* TMGetObjectByHash::add_objects() {
  // @@protoc_insertion_point(field_add:protocol.TMGetObjectByHash.objects)
  return objects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMIndexedObject >&
TMGetObjectByHash::objects() const {
  // @@protoc_insertion_point(field_list:protocol.TMGetObjectByHash.objects)
  return objects_;
}

// -------------------------------------------------------------------

// TMLedgerNode

// required bytes nodedata = 1;
inline bool TMLedgerNode::has_nodedata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMLedgerNode::clear_nodedata() {
  nodedata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMLedgerNode::nodedata() const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerNode.nodedata)
  return nodedata_.GetNoArena();
}
inline void TMLedgerNode::set_nodedata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nodedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMLedgerNode.nodedata)
}
inline void TMLedgerNode::set_nodedata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nodedata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMLedgerNode.nodedata)
}
inline void TMLedgerNode::set_nodedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nodedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMLedgerNode.nodedata)
}
inline void TMLedgerNode::set_nodedata(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nodedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMLedgerNode.nodedata)
}
inline std::string* TMLedgerNode::mutable_nodedata() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMLedgerNode.nodedata)
  return nodedata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMLedgerNode::release_nodedata() {
  // @@protoc_insertion_point(field_release:protocol.TMLedgerNode.nodedata)
  if (!has_nodedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nodedata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMLedgerNode::set_allocated_nodedata(std::string* nodedata) {
  if (nodedata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nodedata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodedata);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMLedgerNode.nodedata)
}

// optional bytes nodeid = 2;
inline bool TMLedgerNode::has_nodeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMLedgerNode::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMLedgerNode::nodeid() const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerNode.nodeid)
  return nodeid_.GetNoArena();
}
inline void TMLedgerNode::set_nodeid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMLedgerNode.nodeid)
}
inline void TMLedgerNode::set_nodeid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMLedgerNode.nodeid)
}
inline void TMLedgerNode::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMLedgerNode.nodeid)
}
inline void TMLedgerNode::set_nodeid(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMLedgerNode.nodeid)
}
inline std::string* TMLedgerNode::mutable_nodeid() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMLedgerNode.nodeid)
  return nodeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMLedgerNode::release_nodeid() {
  // @@protoc_insertion_point(field_release:protocol.TMLedgerNode.nodeid)
  if (!has_nodeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nodeid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMLedgerNode::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nodeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMLedgerNode.nodeid)
}

// -------------------------------------------------------------------

// TMGetLedger

// required .protocol.TMLedgerInfoType itype = 1;
inline bool TMGetLedger::has_itype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMGetLedger::clear_itype() {
  itype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protocol::TMLedgerInfoType TMGetLedger::itype() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.itype)
  return static_cast< ::protocol::TMLedgerInfoType >(itype_);
}
inline void TMGetLedger::set_itype(::protocol::TMLedgerInfoType value) {
  assert(::protocol::TMLedgerInfoType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  itype_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.itype)
}

// optional .protocol.TMLedgerType ltype = 2;
inline bool TMGetLedger::has_ltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMGetLedger::clear_ltype() {
  ltype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::protocol::TMLedgerType TMGetLedger::ltype() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.ltype)
  return static_cast< ::protocol::TMLedgerType >(ltype_);
}
inline void TMGetLedger::set_ltype(::protocol::TMLedgerType value) {
  assert(::protocol::TMLedgerType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ltype_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.ltype)
}

// optional bytes ledgerHash = 3;
inline bool TMGetLedger::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMGetLedger::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMGetLedger::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMGetLedger::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.ledgerHash)
}
inline void TMGetLedger::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMGetLedger.ledgerHash)
}
inline void TMGetLedger::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMGetLedger.ledgerHash)
}
inline void TMGetLedger::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMGetLedger.ledgerHash)
}
inline std::string* TMGetLedger::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMGetLedger.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMGetLedger::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMGetLedger.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMGetLedger::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMGetLedger.ledgerHash)
}

// optional uint32 ledgerSeq = 4;
inline bool TMGetLedger::has_ledgerseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMGetLedger::clear_ledgerseq() {
  ledgerseq_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMGetLedger::ledgerseq() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.ledgerSeq)
  return ledgerseq_;
}
inline void TMGetLedger::set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ledgerseq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.ledgerSeq)
}

// repeated bytes nodeIDs = 5;
inline int TMGetLedger::nodeids_size() const {
  return nodeids_.size();
}
inline void TMGetLedger::clear_nodeids() {
  nodeids_.Clear();
}
inline const std::string& TMGetLedger::nodeids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.nodeIDs)
  return nodeids_.Get(index);
}
inline std::string* TMGetLedger::mutable_nodeids(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMGetLedger.nodeIDs)
  return nodeids_.Mutable(index);
}
inline void TMGetLedger::set_nodeids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.nodeIDs)
  nodeids_.Mutable(index)->assign(value);
}
inline void TMGetLedger::set_nodeids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.nodeIDs)
  nodeids_.Mutable(index)->assign(std::move(value));
}
inline void TMGetLedger::set_nodeids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodeids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TMGetLedger.nodeIDs)
}
inline void TMGetLedger::set_nodeids(int index, const void* value, size_t size) {
  nodeids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TMGetLedger.nodeIDs)
}
inline std::string* TMGetLedger::add_nodeids() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TMGetLedger.nodeIDs)
  return nodeids_.Add();
}
inline void TMGetLedger::add_nodeids(const std::string& value) {
  nodeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TMGetLedger.nodeIDs)
}
inline void TMGetLedger::add_nodeids(std::string&& value) {
  nodeids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TMGetLedger.nodeIDs)
}
inline void TMGetLedger::add_nodeids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TMGetLedger.nodeIDs)
}
inline void TMGetLedger::add_nodeids(const void* value, size_t size) {
  nodeids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TMGetLedger.nodeIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TMGetLedger::nodeids() const {
  // @@protoc_insertion_point(field_list:protocol.TMGetLedger.nodeIDs)
  return nodeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TMGetLedger::mutable_nodeids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMGetLedger.nodeIDs)
  return &nodeids_;
}

// optional uint64 requestCookie = 6;
inline bool TMGetLedger::has_requestcookie() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TMGetLedger::clear_requestcookie() {
  requestcookie_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TMGetLedger::requestcookie() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.requestCookie)
  return requestcookie_;
}
inline void TMGetLedger::set_requestcookie(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  requestcookie_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.requestCookie)
}

// optional .protocol.TMQueryType queryType = 7;
inline bool TMGetLedger::has_querytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMGetLedger::clear_querytype() {
  querytype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::protocol::TMQueryType TMGetLedger::querytype() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.queryType)
  return static_cast< ::protocol::TMQueryType >(querytype_);
}
inline void TMGetLedger::set_querytype(::protocol::TMQueryType value) {
  assert(::protocol::TMQueryType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  querytype_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.queryType)
}

// optional uint32 queryDepth = 8;
inline bool TMGetLedger::has_querydepth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TMGetLedger::clear_querydepth() {
  querydepth_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMGetLedger::querydepth() const {
  // @@protoc_insertion_point(field_get:protocol.TMGetLedger.queryDepth)
  return querydepth_;
}
inline void TMGetLedger::set_querydepth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  querydepth_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMGetLedger.queryDepth)
}

// -------------------------------------------------------------------

// TMLedgerData

// required bytes ledgerHash = 1;
inline bool TMLedgerData::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMLedgerData::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMLedgerData::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerData.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMLedgerData::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMLedgerData.ledgerHash)
}
inline void TMLedgerData::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMLedgerData.ledgerHash)
}
inline void TMLedgerData::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMLedgerData.ledgerHash)
}
inline void TMLedgerData::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMLedgerData.ledgerHash)
}
inline std::string* TMLedgerData::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMLedgerData.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMLedgerData::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMLedgerData.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMLedgerData::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMLedgerData.ledgerHash)
}

// required uint32 ledgerSeq = 2;
inline bool TMLedgerData::has_ledgerseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMLedgerData::clear_ledgerseq() {
  ledgerseq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMLedgerData::ledgerseq() const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerData.ledgerSeq)
  return ledgerseq_;
}
inline void TMLedgerData::set_ledgerseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerseq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMLedgerData.ledgerSeq)
}

// required .protocol.TMLedgerInfoType type = 3;
inline bool TMLedgerData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMLedgerData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::protocol::TMLedgerInfoType TMLedgerData::type() const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerData.type)
  return static_cast< ::protocol::TMLedgerInfoType >(type_);
}
inline void TMLedgerData::set_type(::protocol::TMLedgerInfoType value) {
  assert(::protocol::TMLedgerInfoType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMLedgerData.type)
}

// repeated .protocol.TMLedgerNode nodes = 4;
inline int TMLedgerData::nodes_size() const {
  return nodes_.size();
}
inline void TMLedgerData::clear_nodes() {
  nodes_.Clear();
}
inline ::protocol::TMLedgerNode* TMLedgerData::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMLedgerData.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLedgerNode >*
TMLedgerData::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMLedgerData.nodes)
  return &nodes_;
}
inline const ::protocol::TMLedgerNode& TMLedgerData::nodes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerData.nodes)
  return nodes_.Get(index);
}
inline ::protocol::TMLedgerNode* TMLedgerData::add_nodes() {
  // @@protoc_insertion_point(field_add:protocol.TMLedgerData.nodes)
  return nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TMLedgerNode >&
TMLedgerData::nodes() const {
  // @@protoc_insertion_point(field_list:protocol.TMLedgerData.nodes)
  return nodes_;
}

// optional uint32 requestCookie = 5;
inline bool TMLedgerData::has_requestcookie() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMLedgerData::clear_requestcookie() {
  requestcookie_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMLedgerData::requestcookie() const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerData.requestCookie)
  return requestcookie_;
}
inline void TMLedgerData::set_requestcookie(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  requestcookie_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMLedgerData.requestCookie)
}

// optional .protocol.TMReplyError error = 6;
inline bool TMLedgerData::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMLedgerData::clear_error() {
  error_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::protocol::TMReplyError TMLedgerData::error() const {
  // @@protoc_insertion_point(field_get:protocol.TMLedgerData.error)
  return static_cast< ::protocol::TMReplyError >(error_);
}
inline void TMLedgerData::set_error(::protocol::TMReplyError value) {
  assert(::protocol::TMReplyError_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  error_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMLedgerData.error)
}

// -------------------------------------------------------------------

// TMPing

// required .protocol.TMPing.pingType type = 1;
inline bool TMPing::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMPing::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::protocol::TMPing_pingType TMPing::type() const {
  // @@protoc_insertion_point(field_get:protocol.TMPing.type)
  return static_cast< ::protocol::TMPing_pingType >(type_);
}
inline void TMPing::set_type(::protocol::TMPing_pingType value) {
  assert(::protocol::TMPing_pingType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMPing.type)
}

// optional uint32 seq = 2;
inline bool TMPing::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMPing::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMPing::seq() const {
  // @@protoc_insertion_point(field_get:protocol.TMPing.seq)
  return seq_;
}
inline void TMPing::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMPing.seq)
}

// optional uint64 pingTime = 3;
inline bool TMPing::has_pingtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMPing::clear_pingtime() {
  pingtime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TMPing::pingtime() const {
  // @@protoc_insertion_point(field_get:protocol.TMPing.pingTime)
  return pingtime_;
}
inline void TMPing::set_pingtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  pingtime_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMPing.pingTime)
}

// optional uint64 netTime = 4;
inline bool TMPing::has_nettime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMPing::clear_nettime() {
  nettime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TMPing::nettime() const {
  // @@protoc_insertion_point(field_get:protocol.TMPing.netTime)
  return nettime_;
}
inline void TMPing::set_nettime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  nettime_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMPing.netTime)
}

// -------------------------------------------------------------------

// TMSquelch

// required bool squelch = 1;
inline bool TMSquelch::has_squelch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMSquelch::clear_squelch() {
  squelch_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TMSquelch::squelch() const {
  // @@protoc_insertion_point(field_get:protocol.TMSquelch.squelch)
  return squelch_;
}
inline void TMSquelch::set_squelch(bool value) {
  _has_bits_[0] |= 0x00000002u;
  squelch_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMSquelch.squelch)
}

// required bytes validatorPubKey = 2;
inline bool TMSquelch::has_validatorpubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMSquelch::clear_validatorpubkey() {
  validatorpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMSquelch::validatorpubkey() const {
  // @@protoc_insertion_point(field_get:protocol.TMSquelch.validatorPubKey)
  return validatorpubkey_.GetNoArena();
}
inline void TMSquelch::set_validatorpubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  validatorpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMSquelch.validatorPubKey)
}
inline void TMSquelch::set_validatorpubkey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  validatorpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMSquelch.validatorPubKey)
}
inline void TMSquelch::set_validatorpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  validatorpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMSquelch.validatorPubKey)
}
inline void TMSquelch::set_validatorpubkey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  validatorpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMSquelch.validatorPubKey)
}
inline std::string* TMSquelch::mutable_validatorpubkey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMSquelch.validatorPubKey)
  return validatorpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMSquelch::release_validatorpubkey() {
  // @@protoc_insertion_point(field_release:protocol.TMSquelch.validatorPubKey)
  if (!has_validatorpubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return validatorpubkey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMSquelch::set_allocated_validatorpubkey(std::string* validatorpubkey) {
  if (validatorpubkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  validatorpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validatorpubkey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMSquelch.validatorPubKey)
}

// optional uint32 squelchDuration = 3;
inline bool TMSquelch::has_squelchduration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMSquelch::clear_squelchduration() {
  squelchduration_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TMSquelch::squelchduration() const {
  // @@protoc_insertion_point(field_get:protocol.TMSquelch.squelchDuration)
  return squelchduration_;
}
inline void TMSquelch::set_squelchduration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  squelchduration_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMSquelch.squelchDuration)
}

// -------------------------------------------------------------------

// TMProofPathRequest

// required bytes key = 1;
inline bool TMProofPathRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMProofPathRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMProofPathRequest::key() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathRequest.key)
  return key_.GetNoArena();
}
inline void TMProofPathRequest::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProofPathRequest.key)
}
inline void TMProofPathRequest::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProofPathRequest.key)
}
inline void TMProofPathRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProofPathRequest.key)
}
inline void TMProofPathRequest::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProofPathRequest.key)
}
inline std::string* TMProofPathRequest::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProofPathRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProofPathRequest::release_key() {
  // @@protoc_insertion_point(field_release:protocol.TMProofPathRequest.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProofPathRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProofPathRequest.key)
}

// required bytes ledgerHash = 2;
inline bool TMProofPathRequest::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMProofPathRequest::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMProofPathRequest::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathRequest.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMProofPathRequest::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProofPathRequest.ledgerHash)
}
inline void TMProofPathRequest::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProofPathRequest.ledgerHash)
}
inline void TMProofPathRequest::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProofPathRequest.ledgerHash)
}
inline void TMProofPathRequest::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProofPathRequest.ledgerHash)
}
inline std::string* TMProofPathRequest::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProofPathRequest.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProofPathRequest::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMProofPathRequest.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProofPathRequest::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProofPathRequest.ledgerHash)
}

// required .protocol.TMLedgerMapType type = 3;
inline bool TMProofPathRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMProofPathRequest::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::protocol::TMLedgerMapType TMProofPathRequest::type() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathRequest.type)
  return static_cast< ::protocol::TMLedgerMapType >(type_);
}
inline void TMProofPathRequest::set_type(::protocol::TMLedgerMapType value) {
  assert(::protocol::TMLedgerMapType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMProofPathRequest.type)
}

// -------------------------------------------------------------------

// TMProofPathResponse

// required bytes key = 1;
inline bool TMProofPathResponse::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMProofPathResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMProofPathResponse::key() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathResponse.key)
  return key_.GetNoArena();
}
inline void TMProofPathResponse::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProofPathResponse.key)
}
inline void TMProofPathResponse::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProofPathResponse.key)
}
inline void TMProofPathResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProofPathResponse.key)
}
inline void TMProofPathResponse::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProofPathResponse.key)
}
inline std::string* TMProofPathResponse::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProofPathResponse.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProofPathResponse::release_key() {
  // @@protoc_insertion_point(field_release:protocol.TMProofPathResponse.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProofPathResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProofPathResponse.key)
}

// required bytes ledgerHash = 2;
inline bool TMProofPathResponse::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMProofPathResponse::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMProofPathResponse::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathResponse.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMProofPathResponse::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProofPathResponse.ledgerHash)
}
inline void TMProofPathResponse::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProofPathResponse.ledgerHash)
}
inline void TMProofPathResponse::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProofPathResponse.ledgerHash)
}
inline void TMProofPathResponse::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProofPathResponse.ledgerHash)
}
inline std::string* TMProofPathResponse::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProofPathResponse.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProofPathResponse::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMProofPathResponse.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProofPathResponse::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProofPathResponse.ledgerHash)
}

// required .protocol.TMLedgerMapType type = 3;
inline bool TMProofPathResponse::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMProofPathResponse::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::protocol::TMLedgerMapType TMProofPathResponse::type() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathResponse.type)
  return static_cast< ::protocol::TMLedgerMapType >(type_);
}
inline void TMProofPathResponse::set_type(::protocol::TMLedgerMapType value) {
  assert(::protocol::TMLedgerMapType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMProofPathResponse.type)
}

// optional bytes ledgerHeader = 4;
inline bool TMProofPathResponse::has_ledgerheader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMProofPathResponse::clear_ledgerheader() {
  ledgerheader_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TMProofPathResponse::ledgerheader() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathResponse.ledgerHeader)
  return ledgerheader_.GetNoArena();
}
inline void TMProofPathResponse::set_ledgerheader(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ledgerheader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMProofPathResponse.ledgerHeader)
}
inline void TMProofPathResponse::set_ledgerheader(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ledgerheader_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMProofPathResponse.ledgerHeader)
}
inline void TMProofPathResponse::set_ledgerheader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ledgerheader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMProofPathResponse.ledgerHeader)
}
inline void TMProofPathResponse::set_ledgerheader(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ledgerheader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProofPathResponse.ledgerHeader)
}
inline std::string* TMProofPathResponse::mutable_ledgerheader() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protocol.TMProofPathResponse.ledgerHeader)
  return ledgerheader_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMProofPathResponse::release_ledgerheader() {
  // @@protoc_insertion_point(field_release:protocol.TMProofPathResponse.ledgerHeader)
  if (!has_ledgerheader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ledgerheader_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMProofPathResponse::set_allocated_ledgerheader(std::string* ledgerheader) {
  if (ledgerheader != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ledgerheader_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerheader);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMProofPathResponse.ledgerHeader)
}

// repeated bytes path = 5;
inline int TMProofPathResponse::path_size() const {
  return path_.size();
}
inline void TMProofPathResponse::clear_path() {
  path_.Clear();
}
inline const std::string& TMProofPathResponse::path(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathResponse.path)
  return path_.Get(index);
}
inline std::string* TMProofPathResponse::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMProofPathResponse.path)
  return path_.Mutable(index);
}
inline void TMProofPathResponse::set_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TMProofPathResponse.path)
  path_.Mutable(index)->assign(value);
}
inline void TMProofPathResponse::set_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TMProofPathResponse.path)
  path_.Mutable(index)->assign(std::move(value));
}
inline void TMProofPathResponse::set_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TMProofPathResponse.path)
}
inline void TMProofPathResponse::set_path(int index, const void* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TMProofPathResponse.path)
}
inline std::string* TMProofPathResponse::add_path() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TMProofPathResponse.path)
  return path_.Add();
}
inline void TMProofPathResponse::add_path(const std::string& value) {
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TMProofPathResponse.path)
}
inline void TMProofPathResponse::add_path(std::string&& value) {
  path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TMProofPathResponse.path)
}
inline void TMProofPathResponse::add_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TMProofPathResponse.path)
}
inline void TMProofPathResponse::add_path(const void* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TMProofPathResponse.path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TMProofPathResponse::path() const {
  // @@protoc_insertion_point(field_list:protocol.TMProofPathResponse.path)
  return path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TMProofPathResponse::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMProofPathResponse.path)
  return &path_;
}

// optional .protocol.TMReplyError error = 6;
inline bool TMProofPathResponse::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMProofPathResponse::clear_error() {
  error_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::protocol::TMReplyError TMProofPathResponse::error() const {
  // @@protoc_insertion_point(field_get:protocol.TMProofPathResponse.error)
  return static_cast< ::protocol::TMReplyError >(error_);
}
inline void TMProofPathResponse::set_error(::protocol::TMReplyError value) {
  assert(::protocol::TMReplyError_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  error_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMProofPathResponse.error)
}

// -------------------------------------------------------------------

// TMReplayDeltaRequest

// required bytes ledgerHash = 1;
inline bool TMReplayDeltaRequest::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMReplayDeltaRequest::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMReplayDeltaRequest::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMReplayDeltaRequest.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMReplayDeltaRequest::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMReplayDeltaRequest.ledgerHash)
}
inline void TMReplayDeltaRequest::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMReplayDeltaRequest.ledgerHash)
}
inline void TMReplayDeltaRequest::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMReplayDeltaRequest.ledgerHash)
}
inline void TMReplayDeltaRequest::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMReplayDeltaRequest.ledgerHash)
}
inline std::string* TMReplayDeltaRequest::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMReplayDeltaRequest.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMReplayDeltaRequest::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMReplayDeltaRequest.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMReplayDeltaRequest::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMReplayDeltaRequest.ledgerHash)
}

// -------------------------------------------------------------------

// TMReplayDeltaResponse

// required bytes ledgerHash = 1;
inline bool TMReplayDeltaResponse::has_ledgerhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMReplayDeltaResponse::clear_ledgerhash() {
  ledgerhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TMReplayDeltaResponse::ledgerhash() const {
  // @@protoc_insertion_point(field_get:protocol.TMReplayDeltaResponse.ledgerHash)
  return ledgerhash_.GetNoArena();
}
inline void TMReplayDeltaResponse::set_ledgerhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMReplayDeltaResponse.ledgerHash)
}
inline void TMReplayDeltaResponse::set_ledgerhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMReplayDeltaResponse.ledgerHash)
}
inline void TMReplayDeltaResponse::set_ledgerhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMReplayDeltaResponse.ledgerHash)
}
inline void TMReplayDeltaResponse::set_ledgerhash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ledgerhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMReplayDeltaResponse.ledgerHash)
}
inline std::string* TMReplayDeltaResponse::mutable_ledgerhash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protocol.TMReplayDeltaResponse.ledgerHash)
  return ledgerhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMReplayDeltaResponse::release_ledgerhash() {
  // @@protoc_insertion_point(field_release:protocol.TMReplayDeltaResponse.ledgerHash)
  if (!has_ledgerhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ledgerhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMReplayDeltaResponse::set_allocated_ledgerhash(std::string* ledgerhash) {
  if (ledgerhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ledgerhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMReplayDeltaResponse.ledgerHash)
}

// optional bytes ledgerHeader = 2;
inline bool TMReplayDeltaResponse::has_ledgerheader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMReplayDeltaResponse::clear_ledgerheader() {
  ledgerheader_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TMReplayDeltaResponse::ledgerheader() const {
  // @@protoc_insertion_point(field_get:protocol.TMReplayDeltaResponse.ledgerHeader)
  return ledgerheader_.GetNoArena();
}
inline void TMReplayDeltaResponse::set_ledgerheader(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerheader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TMReplayDeltaResponse.ledgerHeader)
}
inline void TMReplayDeltaResponse::set_ledgerheader(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ledgerheader_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TMReplayDeltaResponse.ledgerHeader)
}
inline void TMReplayDeltaResponse::set_ledgerheader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ledgerheader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TMReplayDeltaResponse.ledgerHeader)
}
inline void TMReplayDeltaResponse::set_ledgerheader(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ledgerheader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TMReplayDeltaResponse.ledgerHeader)
}
inline std::string* TMReplayDeltaResponse::mutable_ledgerheader() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protocol.TMReplayDeltaResponse.ledgerHeader)
  return ledgerheader_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TMReplayDeltaResponse::release_ledgerheader() {
  // @@protoc_insertion_point(field_release:protocol.TMReplayDeltaResponse.ledgerHeader)
  if (!has_ledgerheader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ledgerheader_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TMReplayDeltaResponse::set_allocated_ledgerheader(std::string* ledgerheader) {
  if (ledgerheader != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ledgerheader_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgerheader);
  // @@protoc_insertion_point(field_set_allocated:protocol.TMReplayDeltaResponse.ledgerHeader)
}

// repeated bytes transaction = 3;
inline int TMReplayDeltaResponse::transaction_size() const {
  return transaction_.size();
}
inline void TMReplayDeltaResponse::clear_transaction() {
  transaction_.Clear();
}
inline const std::string& TMReplayDeltaResponse::transaction(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TMReplayDeltaResponse.transaction)
  return transaction_.Get(index);
}
inline std::string* TMReplayDeltaResponse::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TMReplayDeltaResponse.transaction)
  return transaction_.Mutable(index);
}
inline void TMReplayDeltaResponse::set_transaction(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TMReplayDeltaResponse.transaction)
  transaction_.Mutable(index)->assign(value);
}
inline void TMReplayDeltaResponse::set_transaction(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TMReplayDeltaResponse.transaction)
  transaction_.Mutable(index)->assign(std::move(value));
}
inline void TMReplayDeltaResponse::set_transaction(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TMReplayDeltaResponse.transaction)
}
inline void TMReplayDeltaResponse::set_transaction(int index, const void* value, size_t size) {
  transaction_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TMReplayDeltaResponse.transaction)
}
inline std::string* TMReplayDeltaResponse::add_transaction() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TMReplayDeltaResponse.transaction)
  return transaction_.Add();
}
inline void TMReplayDeltaResponse::add_transaction(const std::string& value) {
  transaction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TMReplayDeltaResponse.transaction)
}
inline void TMReplayDeltaResponse::add_transaction(std::string&& value) {
  transaction_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TMReplayDeltaResponse.transaction)
}
inline void TMReplayDeltaResponse::add_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TMReplayDeltaResponse.transaction)
}
inline void TMReplayDeltaResponse::add_transaction(const void* value, size_t size) {
  transaction_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TMReplayDeltaResponse.transaction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TMReplayDeltaResponse::transaction() const {
  // @@protoc_insertion_point(field_list:protocol.TMReplayDeltaResponse.transaction)
  return transaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TMReplayDeltaResponse::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TMReplayDeltaResponse.transaction)
  return &transaction_;
}

// optional .protocol.TMReplyError error = 4;
inline bool TMReplayDeltaResponse::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMReplayDeltaResponse::clear_error() {
  error_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::protocol::TMReplyError TMReplayDeltaResponse::error() const {
  // @@protoc_insertion_point(field_get:protocol.TMReplayDeltaResponse.error)
  return static_cast< ::protocol::TMReplyError >(error_);
}
inline void TMReplayDeltaResponse::set_error(::protocol::TMReplyError value) {
  assert(::protocol::TMReplyError_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  error_ = value;
  // @@protoc_insertion_point(field_set:protocol.TMReplayDeltaResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::TMGetObjectByHash_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TMGetObjectByHash_ObjectType>() {
  return ::protocol::TMGetObjectByHash_ObjectType_descriptor();
}
template <> struct is_proto_enum< ::protocol::TMPing_pingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TMPing_pingType>() {
  return ::protocol::TMPing_pingType_descriptor();
}
template <> struct is_proto_enum< ::protocol::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MessageType>() {
  return ::protocol::MessageType_descriptor();
}
template <> struct is_proto_enum< ::protocol::TransactionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TransactionStatus>() {
  return ::protocol::TransactionStatus_descriptor();
}
template <> struct is_proto_enum< ::protocol::NodeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::NodeStatus>() {
  return ::protocol::NodeStatus_descriptor();
}
template <> struct is_proto_enum< ::protocol::NodeEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::NodeEvent>() {
  return ::protocol::NodeEvent_descriptor();
}
template <> struct is_proto_enum< ::protocol::TxSetStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TxSetStatus>() {
  return ::protocol::TxSetStatus_descriptor();
}
template <> struct is_proto_enum< ::protocol::TMLedgerInfoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TMLedgerInfoType>() {
  return ::protocol::TMLedgerInfoType_descriptor();
}
template <> struct is_proto_enum< ::protocol::TMLedgerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TMLedgerType>() {
  return ::protocol::TMLedgerType_descriptor();
}
template <> struct is_proto_enum< ::protocol::TMQueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TMQueryType>() {
  return ::protocol::TMQueryType_descriptor();
}
template <> struct is_proto_enum< ::protocol::TMReplyError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TMReplyError>() {
  return ::protocol::TMReplyError_descriptor();
}
template <> struct is_proto_enum< ::protocol::TMLedgerMapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TMLedgerMapType>() {
  return ::protocol::TMLedgerMapType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ripple_2eproto
